
LM35_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079fc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003c0  08007ba0  08007ba0  00008ba0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007f60  08007f60  000091d4  2**0
                  CONTENTS
  4 .ARM          00000008  08007f60  08007f60  00008f60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007f68  08007f68  000091d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007f68  08007f68  00008f68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08007f6c  08007f6c  00008f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08007f70  00009000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d4  2**0
                  CONTENTS
 10 .bss          00000250  200001d4  200001d4  000091d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000424  20000424  000091d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c4df  00000000  00000000  00009204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001cb7  00000000  00000000  000156e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000990  00000000  00000000  000173a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000750  00000000  00000000  00017d30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002164c  00000000  00000000  00018480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d9c3  00000000  00000000  00039acc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae1e  00000000  00000000  0004748f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001122ad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036d4  00000000  00000000  001122f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  001159c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b84 	.word	0x08007b84

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007b84 	.word	0x08007b84

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <HAL_ADC_ConvCpltCallback>:
static void MX_GPIO_Init(void);
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
/* USER CODE BEGIN PFP */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	value = HAL_ADC_GetValue(&hadc1);
 8000c60:	4811      	ldr	r0, [pc, #68]	@ (8000ca8 <HAL_ADC_ConvCpltCallback+0x50>)
 8000c62:	f000 ff47 	bl	8001af4 <HAL_ADC_GetValue>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b10      	ldr	r3, [pc, #64]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x54>)
 8000c6c:	801a      	strh	r2, [r3, #0]
	temp = value * 0.08;
 8000c6e:	4b0f      	ldr	r3, [pc, #60]	@ (8000cac <HAL_ADC_ConvCpltCallback+0x54>)
 8000c70:	881b      	ldrh	r3, [r3, #0]
 8000c72:	4618      	mov	r0, r3
 8000c74:	f7ff fc5e 	bl	8000534 <__aeabi_i2d>
 8000c78:	a309      	add	r3, pc, #36	@ (adr r3, 8000ca0 <HAL_ADC_ConvCpltCallback+0x48>)
 8000c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c7e:	f7ff fcc3 	bl	8000608 <__aeabi_dmul>
 8000c82:	4602      	mov	r2, r0
 8000c84:	460b      	mov	r3, r1
 8000c86:	4610      	mov	r0, r2
 8000c88:	4619      	mov	r1, r3
 8000c8a:	f7ff ff95 	bl	8000bb8 <__aeabi_d2f>
 8000c8e:	4603      	mov	r3, r0
 8000c90:	4a07      	ldr	r2, [pc, #28]	@ (8000cb0 <HAL_ADC_ConvCpltCallback+0x58>)
 8000c92:	6013      	str	r3, [r2, #0]
	//printf("Temperature = %.2f°C\n\r", temp);
}
 8000c94:	bf00      	nop
 8000c96:	3708      	adds	r7, #8
 8000c98:	46bd      	mov	sp, r7
 8000c9a:	bd80      	pop	{r7, pc}
 8000c9c:	f3af 8000 	nop.w
 8000ca0:	47ae147b 	.word	0x47ae147b
 8000ca4:	3fb47ae1 	.word	0x3fb47ae1
 8000ca8:	200001f0 	.word	0x200001f0
 8000cac:	200002c8 	.word	0x200002c8
 8000cb0:	200002cc 	.word	0x200002cc

08000cb4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb8:	f000 fb44 	bl	8001344 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cbc:	f000 f822 	bl	8000d04 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cc0:	f000 f91e 	bl	8000f00 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000cc4:	f000 f87c 	bl	8000dc0 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000cc8:	f000 f8ea 	bl	8000ea0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start(&hadc1);
  HAL_ADC_Start_IT(&hadc1);
 8000ccc:	480a      	ldr	r0, [pc, #40]	@ (8000cf8 <main+0x44>)
 8000cce:	f000 fdd1 	bl	8001874 <HAL_ADC_Start_IT>
  {
    /* USER CODE END WHILE */
	  //printf("Start >>\n\r");
	  //HAL_ADC_PollForConversion(&hadc1, 1000);
	  //value = HAL_ADC_GetValue(&hadc1);
	  HAL_ADC_ConvCpltCallback(&hadc1);
 8000cd2:	4809      	ldr	r0, [pc, #36]	@ (8000cf8 <main+0x44>)
 8000cd4:	f7ff ffc0 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
	  printf("Temperature = %.2f°C\n\r", temp);
 8000cd8:	4b08      	ldr	r3, [pc, #32]	@ (8000cfc <main+0x48>)
 8000cda:	681b      	ldr	r3, [r3, #0]
 8000cdc:	4618      	mov	r0, r3
 8000cde:	f7ff fc3b 	bl	8000558 <__aeabi_f2d>
 8000ce2:	4602      	mov	r2, r0
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	4806      	ldr	r0, [pc, #24]	@ (8000d00 <main+0x4c>)
 8000ce8:	f004 ffd4 	bl	8005c94 <iprintf>
    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000cec:	2064      	movs	r0, #100	@ 0x64
 8000cee:	f000 fb8f 	bl	8001410 <HAL_Delay>
	  HAL_ADC_ConvCpltCallback(&hadc1);
 8000cf2:	bf00      	nop
 8000cf4:	e7ed      	b.n	8000cd2 <main+0x1e>
 8000cf6:	bf00      	nop
 8000cf8:	200001f0 	.word	0x200001f0
 8000cfc:	200002cc 	.word	0x200002cc
 8000d00:	08007ba0 	.word	0x08007ba0

08000d04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d04:	b580      	push	{r7, lr}
 8000d06:	b0a6      	sub	sp, #152	@ 0x98
 8000d08:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d0a:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d0e:	2228      	movs	r2, #40	@ 0x28
 8000d10:	2100      	movs	r1, #0
 8000d12:	4618      	mov	r0, r3
 8000d14:	f005 f813 	bl	8005d3e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d18:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d1c:	2200      	movs	r2, #0
 8000d1e:	601a      	str	r2, [r3, #0]
 8000d20:	605a      	str	r2, [r3, #4]
 8000d22:	609a      	str	r2, [r3, #8]
 8000d24:	60da      	str	r2, [r3, #12]
 8000d26:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d28:	1d3b      	adds	r3, r7, #4
 8000d2a:	2258      	movs	r2, #88	@ 0x58
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4618      	mov	r0, r3
 8000d30:	f005 f805 	bl	8005d3e <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d34:	2302      	movs	r3, #2
 8000d36:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d38:	2301      	movs	r3, #1
 8000d3a:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d3c:	2310      	movs	r3, #16
 8000d3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d42:	2302      	movs	r3, #2
 8000d44:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000d48:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000d50:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000d54:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000d5e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d62:	4618      	mov	r0, r3
 8000d64:	f002 f924 	bl	8002fb0 <HAL_RCC_OscConfig>
 8000d68:	4603      	mov	r3, r0
 8000d6a:	2b00      	cmp	r3, #0
 8000d6c:	d001      	beq.n	8000d72 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000d6e:	f000 f8fd 	bl	8000f6c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000d72:	230f      	movs	r3, #15
 8000d74:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000d76:	2302      	movs	r3, #2
 8000d78:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000d7a:	2300      	movs	r3, #0
 8000d7c:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000d7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000d82:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000d84:	2300      	movs	r3, #0
 8000d86:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000d88:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d8c:	2102      	movs	r1, #2
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f003 f962 	bl	8004058 <HAL_RCC_ClockConfig>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000d9a:	f000 f8e7 	bl	8000f6c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000da2:	2300      	movs	r3, #0
 8000da4:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000da6:	1d3b      	adds	r3, r7, #4
 8000da8:	4618      	mov	r0, r3
 8000daa:	f003 fb75 	bl	8004498 <HAL_RCCEx_PeriphCLKConfig>
 8000dae:	4603      	mov	r3, r0
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	d001      	beq.n	8000db8 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000db4:	f000 f8da 	bl	8000f6c <Error_Handler>
  }
}
 8000db8:	bf00      	nop
 8000dba:	3798      	adds	r7, #152	@ 0x98
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bd80      	pop	{r7, pc}

08000dc0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08a      	sub	sp, #40	@ 0x28
 8000dc4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000dc6:	f107 031c 	add.w	r3, r7, #28
 8000dca:	2200      	movs	r2, #0
 8000dcc:	601a      	str	r2, [r3, #0]
 8000dce:	605a      	str	r2, [r3, #4]
 8000dd0:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000dd2:	1d3b      	adds	r3, r7, #4
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	601a      	str	r2, [r3, #0]
 8000dd8:	605a      	str	r2, [r3, #4]
 8000dda:	609a      	str	r2, [r3, #8]
 8000ddc:	60da      	str	r2, [r3, #12]
 8000dde:	611a      	str	r2, [r3, #16]
 8000de0:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000de2:	4b2e      	ldr	r3, [pc, #184]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000de4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000de8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000dea:	4b2c      	ldr	r3, [pc, #176]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000dec:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000df0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000df2:	4b2a      	ldr	r3, [pc, #168]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000df4:	2200      	movs	r2, #0
 8000df6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000df8:	4b28      	ldr	r3, [pc, #160]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000dfa:	2200      	movs	r2, #0
 8000dfc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000dfe:	4b27      	ldr	r3, [pc, #156]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e00:	2201      	movs	r2, #1
 8000e02:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e04:	4b25      	ldr	r3, [pc, #148]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e0c:	4b23      	ldr	r3, [pc, #140]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e12:	4b22      	ldr	r3, [pc, #136]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e14:	2201      	movs	r2, #1
 8000e16:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e18:	4b20      	ldr	r3, [pc, #128]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e1e:	4b1f      	ldr	r3, [pc, #124]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e20:	2201      	movs	r2, #1
 8000e22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e24:	4b1d      	ldr	r3, [pc, #116]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e26:	2200      	movs	r2, #0
 8000e28:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e2c:	4b1b      	ldr	r3, [pc, #108]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e2e:	2204      	movs	r2, #4
 8000e30:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e32:	4b1a      	ldr	r3, [pc, #104]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e38:	4b18      	ldr	r3, [pc, #96]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e3e:	4817      	ldr	r0, [pc, #92]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e40:	f000 fb1e 	bl	8001480 <HAL_ADC_Init>
 8000e44:	4603      	mov	r3, r0
 8000e46:	2b00      	cmp	r3, #0
 8000e48:	d001      	beq.n	8000e4e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000e4a:	f000 f88f 	bl	8000f6c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000e52:	f107 031c 	add.w	r3, r7, #28
 8000e56:	4619      	mov	r1, r3
 8000e58:	4810      	ldr	r0, [pc, #64]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e5a:	f001 fc51 	bl	8002700 <HAL_ADCEx_MultiModeConfigChannel>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	2b00      	cmp	r3, #0
 8000e62:	d001      	beq.n	8000e68 <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000e64:	f000 f882 	bl	8000f6c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000e70:	2300      	movs	r3, #0
 8000e72:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000e74:	2307      	movs	r3, #7
 8000e76:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e80:	1d3b      	adds	r3, r7, #4
 8000e82:	4619      	mov	r1, r3
 8000e84:	4805      	ldr	r0, [pc, #20]	@ (8000e9c <MX_ADC1_Init+0xdc>)
 8000e86:	f001 f951 	bl	800212c <HAL_ADC_ConfigChannel>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000e90:	f000 f86c 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000e94:	bf00      	nop
 8000e96:	3728      	adds	r7, #40	@ 0x28
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	bd80      	pop	{r7, pc}
 8000e9c:	200001f0 	.word	0x200001f0

08000ea0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ea4:	4b14      	ldr	r3, [pc, #80]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ea6:	4a15      	ldr	r2, [pc, #84]	@ (8000efc <MX_USART2_UART_Init+0x5c>)
 8000ea8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000eaa:	4b13      	ldr	r3, [pc, #76]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000eb0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000eb2:	4b11      	ldr	r3, [pc, #68]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000eb8:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000eba:	2200      	movs	r2, #0
 8000ebc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000ebe:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ec4:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ec6:	220c      	movs	r2, #12
 8000ec8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000eca:	4b0b      	ldr	r3, [pc, #44]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ed0:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ed6:	4b08      	ldr	r3, [pc, #32]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ed8:	2200      	movs	r2, #0
 8000eda:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000edc:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ede:	2200      	movs	r2, #0
 8000ee0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000ee2:	4805      	ldr	r0, [pc, #20]	@ (8000ef8 <MX_USART2_UART_Init+0x58>)
 8000ee4:	f003 fcf6 	bl	80048d4 <HAL_UART_Init>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000eee:	f000 f83d 	bl	8000f6c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000ef2:	bf00      	nop
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	20000240 	.word	0x20000240
 8000efc:	40004400 	.word	0x40004400

08000f00 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	b083      	sub	sp, #12
 8000f04:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f06:	4b0f      	ldr	r3, [pc, #60]	@ (8000f44 <MX_GPIO_Init+0x44>)
 8000f08:	695b      	ldr	r3, [r3, #20]
 8000f0a:	4a0e      	ldr	r2, [pc, #56]	@ (8000f44 <MX_GPIO_Init+0x44>)
 8000f0c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8000f10:	6153      	str	r3, [r2, #20]
 8000f12:	4b0c      	ldr	r3, [pc, #48]	@ (8000f44 <MX_GPIO_Init+0x44>)
 8000f14:	695b      	ldr	r3, [r3, #20]
 8000f16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8000f1a:	607b      	str	r3, [r7, #4]
 8000f1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	4b09      	ldr	r3, [pc, #36]	@ (8000f44 <MX_GPIO_Init+0x44>)
 8000f20:	695b      	ldr	r3, [r3, #20]
 8000f22:	4a08      	ldr	r2, [pc, #32]	@ (8000f44 <MX_GPIO_Init+0x44>)
 8000f24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f28:	6153      	str	r3, [r2, #20]
 8000f2a:	4b06      	ldr	r3, [pc, #24]	@ (8000f44 <MX_GPIO_Init+0x44>)
 8000f2c:	695b      	ldr	r3, [r3, #20]
 8000f2e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f32:	603b      	str	r3, [r7, #0]
 8000f34:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f40:	4770      	bx	lr
 8000f42:	bf00      	nop
 8000f44:	40021000 	.word	0x40021000

08000f48 <__io_putchar>:

/* USER CODE BEGIN 4 */
PRINTF2UART2
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b082      	sub	sp, #8
 8000f4c:	af00      	add	r7, sp, #0
 8000f4e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8000f50:	1d39      	adds	r1, r7, #4
 8000f52:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000f56:	2201      	movs	r2, #1
 8000f58:	4803      	ldr	r0, [pc, #12]	@ (8000f68 <__io_putchar+0x20>)
 8000f5a:	f003 fd09 	bl	8004970 <HAL_UART_Transmit>

  return ch;
 8000f5e:	687b      	ldr	r3, [r7, #4]
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3708      	adds	r7, #8
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20000240 	.word	0x20000240

08000f6c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000f6c:	b480      	push	{r7}
 8000f6e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000f70:	b672      	cpsid	i
}
 8000f72:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000f74:	bf00      	nop
 8000f76:	e7fd      	b.n	8000f74 <Error_Handler+0x8>

08000f78 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f78:	b480      	push	{r7}
 8000f7a:	b083      	sub	sp, #12
 8000f7c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f7e:	4b0f      	ldr	r3, [pc, #60]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f80:	699b      	ldr	r3, [r3, #24]
 8000f82:	4a0e      	ldr	r2, [pc, #56]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f84:	f043 0301 	orr.w	r3, r3, #1
 8000f88:	6193      	str	r3, [r2, #24]
 8000f8a:	4b0c      	ldr	r3, [pc, #48]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f8c:	699b      	ldr	r3, [r3, #24]
 8000f8e:	f003 0301 	and.w	r3, r3, #1
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f96:	4b09      	ldr	r3, [pc, #36]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f98:	69db      	ldr	r3, [r3, #28]
 8000f9a:	4a08      	ldr	r2, [pc, #32]	@ (8000fbc <HAL_MspInit+0x44>)
 8000f9c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fa0:	61d3      	str	r3, [r2, #28]
 8000fa2:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <HAL_MspInit+0x44>)
 8000fa4:	69db      	ldr	r3, [r3, #28]
 8000fa6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000faa:	603b      	str	r3, [r7, #0]
 8000fac:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fae:	bf00      	nop
 8000fb0:	370c      	adds	r7, #12
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	40021000 	.word	0x40021000

08000fc0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	b08a      	sub	sp, #40	@ 0x28
 8000fc4:	af00      	add	r7, sp, #0
 8000fc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc8:	f107 0314 	add.w	r3, r7, #20
 8000fcc:	2200      	movs	r2, #0
 8000fce:	601a      	str	r2, [r3, #0]
 8000fd0:	605a      	str	r2, [r3, #4]
 8000fd2:	609a      	str	r2, [r3, #8]
 8000fd4:	60da      	str	r2, [r3, #12]
 8000fd6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000fe0:	d12c      	bne.n	800103c <HAL_ADC_MspInit+0x7c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000fe2:	4b18      	ldr	r3, [pc, #96]	@ (8001044 <HAL_ADC_MspInit+0x84>)
 8000fe4:	695b      	ldr	r3, [r3, #20]
 8000fe6:	4a17      	ldr	r2, [pc, #92]	@ (8001044 <HAL_ADC_MspInit+0x84>)
 8000fe8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000fec:	6153      	str	r3, [r2, #20]
 8000fee:	4b15      	ldr	r3, [pc, #84]	@ (8001044 <HAL_ADC_MspInit+0x84>)
 8000ff0:	695b      	ldr	r3, [r3, #20]
 8000ff2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ff6:	613b      	str	r3, [r7, #16]
 8000ff8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ffa:	4b12      	ldr	r3, [pc, #72]	@ (8001044 <HAL_ADC_MspInit+0x84>)
 8000ffc:	695b      	ldr	r3, [r3, #20]
 8000ffe:	4a11      	ldr	r2, [pc, #68]	@ (8001044 <HAL_ADC_MspInit+0x84>)
 8001000:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001004:	6153      	str	r3, [r2, #20]
 8001006:	4b0f      	ldr	r3, [pc, #60]	@ (8001044 <HAL_ADC_MspInit+0x84>)
 8001008:	695b      	ldr	r3, [r3, #20]
 800100a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800100e:	60fb      	str	r3, [r7, #12]
 8001010:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001012:	2301      	movs	r3, #1
 8001014:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001016:	2303      	movs	r3, #3
 8001018:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800101a:	2300      	movs	r3, #0
 800101c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800101e:	f107 0314 	add.w	r3, r7, #20
 8001022:	4619      	mov	r1, r3
 8001024:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001028:	f001 fe38 	bl	8002c9c <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800102c:	2200      	movs	r2, #0
 800102e:	2100      	movs	r1, #0
 8001030:	2012      	movs	r0, #18
 8001032:	f001 fdfc 	bl	8002c2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001036:	2012      	movs	r0, #18
 8001038:	f001 fe15 	bl	8002c66 <HAL_NVIC_EnableIRQ>

  /* USER CODE END ADC1_MspInit 1 */

  }

}
 800103c:	bf00      	nop
 800103e:	3728      	adds	r7, #40	@ 0x28
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	40021000 	.word	0x40021000

08001048 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	@ 0x28
 800104c:	af00      	add	r7, sp, #0
 800104e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001050:	f107 0314 	add.w	r3, r7, #20
 8001054:	2200      	movs	r2, #0
 8001056:	601a      	str	r2, [r3, #0]
 8001058:	605a      	str	r2, [r3, #4]
 800105a:	609a      	str	r2, [r3, #8]
 800105c:	60da      	str	r2, [r3, #12]
 800105e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	4a17      	ldr	r2, [pc, #92]	@ (80010c4 <HAL_UART_MspInit+0x7c>)
 8001066:	4293      	cmp	r3, r2
 8001068:	d128      	bne.n	80010bc <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800106a:	4b17      	ldr	r3, [pc, #92]	@ (80010c8 <HAL_UART_MspInit+0x80>)
 800106c:	69db      	ldr	r3, [r3, #28]
 800106e:	4a16      	ldr	r2, [pc, #88]	@ (80010c8 <HAL_UART_MspInit+0x80>)
 8001070:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001074:	61d3      	str	r3, [r2, #28]
 8001076:	4b14      	ldr	r3, [pc, #80]	@ (80010c8 <HAL_UART_MspInit+0x80>)
 8001078:	69db      	ldr	r3, [r3, #28]
 800107a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800107e:	613b      	str	r3, [r7, #16]
 8001080:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001082:	4b11      	ldr	r3, [pc, #68]	@ (80010c8 <HAL_UART_MspInit+0x80>)
 8001084:	695b      	ldr	r3, [r3, #20]
 8001086:	4a10      	ldr	r2, [pc, #64]	@ (80010c8 <HAL_UART_MspInit+0x80>)
 8001088:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800108c:	6153      	str	r3, [r2, #20]
 800108e:	4b0e      	ldr	r3, [pc, #56]	@ (80010c8 <HAL_UART_MspInit+0x80>)
 8001090:	695b      	ldr	r3, [r3, #20]
 8001092:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001096:	60fb      	str	r3, [r7, #12]
 8001098:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800109a:	230c      	movs	r3, #12
 800109c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800109e:	2302      	movs	r3, #2
 80010a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010a2:	2300      	movs	r3, #0
 80010a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80010a6:	2303      	movs	r3, #3
 80010a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80010aa:	2307      	movs	r3, #7
 80010ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010ae:	f107 0314 	add.w	r3, r7, #20
 80010b2:	4619      	mov	r1, r3
 80010b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80010b8:	f001 fdf0 	bl	8002c9c <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 80010bc:	bf00      	nop
 80010be:	3728      	adds	r7, #40	@ 0x28
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}
 80010c4:	40004400 	.word	0x40004400
 80010c8:	40021000 	.word	0x40021000

080010cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010cc:	b480      	push	{r7}
 80010ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80010d0:	bf00      	nop
 80010d2:	e7fd      	b.n	80010d0 <NMI_Handler+0x4>

080010d4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010d4:	b480      	push	{r7}
 80010d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80010d8:	bf00      	nop
 80010da:	e7fd      	b.n	80010d8 <HardFault_Handler+0x4>

080010dc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80010dc:	b480      	push	{r7}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80010e0:	bf00      	nop
 80010e2:	e7fd      	b.n	80010e0 <MemManage_Handler+0x4>

080010e4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80010e8:	bf00      	nop
 80010ea:	e7fd      	b.n	80010e8 <BusFault_Handler+0x4>

080010ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80010ec:	b480      	push	{r7}
 80010ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80010f0:	bf00      	nop
 80010f2:	e7fd      	b.n	80010f0 <UsageFault_Handler+0x4>

080010f4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80010f4:	b480      	push	{r7}
 80010f6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr

08001102 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001102:	b480      	push	{r7}
 8001104:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001106:	bf00      	nop
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001114:	bf00      	nop
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr

0800111e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800111e:	b580      	push	{r7, lr}
 8001120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001122:	f000 f955 	bl	80013d0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001126:	bf00      	nop
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8001130:	4802      	ldr	r0, [pc, #8]	@ (800113c <ADC1_2_IRQHandler+0x10>)
 8001132:	f000 fced 	bl	8001b10 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200001f0 	.word	0x200001f0

08001140 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return 1;
 8001144:	2301      	movs	r3, #1
}
 8001146:	4618      	mov	r0, r3
 8001148:	46bd      	mov	sp, r7
 800114a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800114e:	4770      	bx	lr

08001150 <_kill>:

int _kill(int pid, int sig)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b082      	sub	sp, #8
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
 8001158:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800115a:	f004 fe43 	bl	8005de4 <__errno>
 800115e:	4603      	mov	r3, r0
 8001160:	2216      	movs	r2, #22
 8001162:	601a      	str	r2, [r3, #0]
  return -1;
 8001164:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001168:	4618      	mov	r0, r3
 800116a:	3708      	adds	r7, #8
 800116c:	46bd      	mov	sp, r7
 800116e:	bd80      	pop	{r7, pc}

08001170 <_exit>:

void _exit (int status)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b082      	sub	sp, #8
 8001174:	af00      	add	r7, sp, #0
 8001176:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001178:	f04f 31ff 	mov.w	r1, #4294967295
 800117c:	6878      	ldr	r0, [r7, #4]
 800117e:	f7ff ffe7 	bl	8001150 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001182:	bf00      	nop
 8001184:	e7fd      	b.n	8001182 <_exit+0x12>

08001186 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b086      	sub	sp, #24
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001192:	2300      	movs	r3, #0
 8001194:	617b      	str	r3, [r7, #20]
 8001196:	e00a      	b.n	80011ae <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001198:	f3af 8000 	nop.w
 800119c:	4601      	mov	r1, r0
 800119e:	68bb      	ldr	r3, [r7, #8]
 80011a0:	1c5a      	adds	r2, r3, #1
 80011a2:	60ba      	str	r2, [r7, #8]
 80011a4:	b2ca      	uxtb	r2, r1
 80011a6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011a8:	697b      	ldr	r3, [r7, #20]
 80011aa:	3301      	adds	r3, #1
 80011ac:	617b      	str	r3, [r7, #20]
 80011ae:	697a      	ldr	r2, [r7, #20]
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	429a      	cmp	r2, r3
 80011b4:	dbf0      	blt.n	8001198 <_read+0x12>
  }

  return len;
 80011b6:	687b      	ldr	r3, [r7, #4]
}
 80011b8:	4618      	mov	r0, r3
 80011ba:	3718      	adds	r7, #24
 80011bc:	46bd      	mov	sp, r7
 80011be:	bd80      	pop	{r7, pc}

080011c0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b086      	sub	sp, #24
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	60f8      	str	r0, [r7, #12]
 80011c8:	60b9      	str	r1, [r7, #8]
 80011ca:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
 80011d0:	e009      	b.n	80011e6 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80011d2:	68bb      	ldr	r3, [r7, #8]
 80011d4:	1c5a      	adds	r2, r3, #1
 80011d6:	60ba      	str	r2, [r7, #8]
 80011d8:	781b      	ldrb	r3, [r3, #0]
 80011da:	4618      	mov	r0, r3
 80011dc:	f7ff feb4 	bl	8000f48 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80011e0:	697b      	ldr	r3, [r7, #20]
 80011e2:	3301      	adds	r3, #1
 80011e4:	617b      	str	r3, [r7, #20]
 80011e6:	697a      	ldr	r2, [r7, #20]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	429a      	cmp	r2, r3
 80011ec:	dbf1      	blt.n	80011d2 <_write+0x12>
  }
  return len;
 80011ee:	687b      	ldr	r3, [r7, #4]
}
 80011f0:	4618      	mov	r0, r3
 80011f2:	3718      	adds	r7, #24
 80011f4:	46bd      	mov	sp, r7
 80011f6:	bd80      	pop	{r7, pc}

080011f8 <_close>:

int _close(int file)
{
 80011f8:	b480      	push	{r7}
 80011fa:	b083      	sub	sp, #12
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001200:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001204:	4618      	mov	r0, r3
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr

08001210 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001210:	b480      	push	{r7}
 8001212:	b083      	sub	sp, #12
 8001214:	af00      	add	r7, sp, #0
 8001216:	6078      	str	r0, [r7, #4]
 8001218:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001220:	605a      	str	r2, [r3, #4]
  return 0;
 8001222:	2300      	movs	r3, #0
}
 8001224:	4618      	mov	r0, r3
 8001226:	370c      	adds	r7, #12
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr

08001230 <_isatty>:

int _isatty(int file)
{
 8001230:	b480      	push	{r7}
 8001232:	b083      	sub	sp, #12
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001238:	2301      	movs	r3, #1
}
 800123a:	4618      	mov	r0, r3
 800123c:	370c      	adds	r7, #12
 800123e:	46bd      	mov	sp, r7
 8001240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001244:	4770      	bx	lr

08001246 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001246:	b480      	push	{r7}
 8001248:	b085      	sub	sp, #20
 800124a:	af00      	add	r7, sp, #0
 800124c:	60f8      	str	r0, [r7, #12]
 800124e:	60b9      	str	r1, [r7, #8]
 8001250:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3714      	adds	r7, #20
 8001258:	46bd      	mov	sp, r7
 800125a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125e:	4770      	bx	lr

08001260 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	b086      	sub	sp, #24
 8001264:	af00      	add	r7, sp, #0
 8001266:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001268:	4a14      	ldr	r2, [pc, #80]	@ (80012bc <_sbrk+0x5c>)
 800126a:	4b15      	ldr	r3, [pc, #84]	@ (80012c0 <_sbrk+0x60>)
 800126c:	1ad3      	subs	r3, r2, r3
 800126e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001270:	697b      	ldr	r3, [r7, #20]
 8001272:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001274:	4b13      	ldr	r3, [pc, #76]	@ (80012c4 <_sbrk+0x64>)
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	2b00      	cmp	r3, #0
 800127a:	d102      	bne.n	8001282 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800127c:	4b11      	ldr	r3, [pc, #68]	@ (80012c4 <_sbrk+0x64>)
 800127e:	4a12      	ldr	r2, [pc, #72]	@ (80012c8 <_sbrk+0x68>)
 8001280:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001282:	4b10      	ldr	r3, [pc, #64]	@ (80012c4 <_sbrk+0x64>)
 8001284:	681a      	ldr	r2, [r3, #0]
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	4413      	add	r3, r2
 800128a:	693a      	ldr	r2, [r7, #16]
 800128c:	429a      	cmp	r2, r3
 800128e:	d207      	bcs.n	80012a0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001290:	f004 fda8 	bl	8005de4 <__errno>
 8001294:	4603      	mov	r3, r0
 8001296:	220c      	movs	r2, #12
 8001298:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800129a:	f04f 33ff 	mov.w	r3, #4294967295
 800129e:	e009      	b.n	80012b4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80012a0:	4b08      	ldr	r3, [pc, #32]	@ (80012c4 <_sbrk+0x64>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80012a6:	4b07      	ldr	r3, [pc, #28]	@ (80012c4 <_sbrk+0x64>)
 80012a8:	681a      	ldr	r2, [r3, #0]
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	4413      	add	r3, r2
 80012ae:	4a05      	ldr	r2, [pc, #20]	@ (80012c4 <_sbrk+0x64>)
 80012b0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80012b2:	68fb      	ldr	r3, [r7, #12]
}
 80012b4:	4618      	mov	r0, r3
 80012b6:	3718      	adds	r7, #24
 80012b8:	46bd      	mov	sp, r7
 80012ba:	bd80      	pop	{r7, pc}
 80012bc:	20010000 	.word	0x20010000
 80012c0:	00000400 	.word	0x00000400
 80012c4:	200002d0 	.word	0x200002d0
 80012c8:	20000428 	.word	0x20000428

080012cc <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	@ (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	@ (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80012f0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001328 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80012f4:	f7ff ffea 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80012f8:	480c      	ldr	r0, [pc, #48]	@ (800132c <LoopForever+0x6>)
  ldr r1, =_edata
 80012fa:	490d      	ldr	r1, [pc, #52]	@ (8001330 <LoopForever+0xa>)
  ldr r2, =_sidata
 80012fc:	4a0d      	ldr	r2, [pc, #52]	@ (8001334 <LoopForever+0xe>)
  movs r3, #0
 80012fe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001300:	e002      	b.n	8001308 <LoopCopyDataInit>

08001302 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001302:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001304:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001306:	3304      	adds	r3, #4

08001308 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001308:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800130a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800130c:	d3f9      	bcc.n	8001302 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800130e:	4a0a      	ldr	r2, [pc, #40]	@ (8001338 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001310:	4c0a      	ldr	r4, [pc, #40]	@ (800133c <LoopForever+0x16>)
  movs r3, #0
 8001312:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001314:	e001      	b.n	800131a <LoopFillZerobss>

08001316 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001316:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001318:	3204      	adds	r2, #4

0800131a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800131a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800131c:	d3fb      	bcc.n	8001316 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800131e:	f004 fd67 	bl	8005df0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001322:	f7ff fcc7 	bl	8000cb4 <main>

08001326 <LoopForever>:

LoopForever:
    b LoopForever
 8001326:	e7fe      	b.n	8001326 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 8001328:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 800132c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001330:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001334:	08007f70 	.word	0x08007f70
  ldr r2, =_sbss
 8001338:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 800133c:	20000424 	.word	0x20000424

08001340 <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001340:	e7fe      	b.n	8001340 <ADC3_IRQHandler>
	...

08001344 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001348:	4b08      	ldr	r3, [pc, #32]	@ (800136c <HAL_Init+0x28>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	4a07      	ldr	r2, [pc, #28]	@ (800136c <HAL_Init+0x28>)
 800134e:	f043 0310 	orr.w	r3, r3, #16
 8001352:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001354:	2003      	movs	r0, #3
 8001356:	f001 fc5f 	bl	8002c18 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800135a:	200f      	movs	r0, #15
 800135c:	f000 f808 	bl	8001370 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001360:	f7ff fe0a 	bl	8000f78 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001364:	2300      	movs	r3, #0
}
 8001366:	4618      	mov	r0, r3
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40022000 	.word	0x40022000

08001370 <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001378:	4b12      	ldr	r3, [pc, #72]	@ (80013c4 <HAL_InitTick+0x54>)
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	4b12      	ldr	r3, [pc, #72]	@ (80013c8 <HAL_InitTick+0x58>)
 800137e:	781b      	ldrb	r3, [r3, #0]
 8001380:	4619      	mov	r1, r3
 8001382:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001386:	fbb3 f3f1 	udiv	r3, r3, r1
 800138a:	fbb2 f3f3 	udiv	r3, r2, r3
 800138e:	4618      	mov	r0, r3
 8001390:	f001 fc77 	bl	8002c82 <HAL_SYSTICK_Config>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800139a:	2301      	movs	r3, #1
 800139c:	e00e      	b.n	80013bc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	2b0f      	cmp	r3, #15
 80013a2:	d80a      	bhi.n	80013ba <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013a4:	2200      	movs	r2, #0
 80013a6:	6879      	ldr	r1, [r7, #4]
 80013a8:	f04f 30ff 	mov.w	r0, #4294967295
 80013ac:	f001 fc3f 	bl	8002c2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80013b0:	4a06      	ldr	r2, [pc, #24]	@ (80013cc <HAL_InitTick+0x5c>)
 80013b2:	687b      	ldr	r3, [r7, #4]
 80013b4:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 80013b6:	2300      	movs	r3, #0
 80013b8:	e000      	b.n	80013bc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80013ba:	2301      	movs	r3, #1
}
 80013bc:	4618      	mov	r0, r3
 80013be:	3708      	adds	r7, #8
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	20000000 	.word	0x20000000
 80013c8:	20000008 	.word	0x20000008
 80013cc:	20000004 	.word	0x20000004

080013d0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013d4:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_IncTick+0x20>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	461a      	mov	r2, r3
 80013da:	4b06      	ldr	r3, [pc, #24]	@ (80013f4 <HAL_IncTick+0x24>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	4a04      	ldr	r2, [pc, #16]	@ (80013f4 <HAL_IncTick+0x24>)
 80013e2:	6013      	str	r3, [r2, #0]
}
 80013e4:	bf00      	nop
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	20000008 	.word	0x20000008
 80013f4:	200002d4 	.word	0x200002d4

080013f8 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013f8:	b480      	push	{r7}
 80013fa:	af00      	add	r7, sp, #0
  return uwTick;  
 80013fc:	4b03      	ldr	r3, [pc, #12]	@ (800140c <HAL_GetTick+0x14>)
 80013fe:	681b      	ldr	r3, [r3, #0]
}
 8001400:	4618      	mov	r0, r3
 8001402:	46bd      	mov	sp, r7
 8001404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001408:	4770      	bx	lr
 800140a:	bf00      	nop
 800140c:	200002d4 	.word	0x200002d4

08001410 <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001418:	f7ff ffee 	bl	80013f8 <HAL_GetTick>
 800141c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001428:	d005      	beq.n	8001436 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800142a:	4b0a      	ldr	r3, [pc, #40]	@ (8001454 <HAL_Delay+0x44>)
 800142c:	781b      	ldrb	r3, [r3, #0]
 800142e:	461a      	mov	r2, r3
 8001430:	68fb      	ldr	r3, [r7, #12]
 8001432:	4413      	add	r3, r2
 8001434:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 8001436:	bf00      	nop
 8001438:	f7ff ffde 	bl	80013f8 <HAL_GetTick>
 800143c:	4602      	mov	r2, r0
 800143e:	68bb      	ldr	r3, [r7, #8]
 8001440:	1ad3      	subs	r3, r2, r3
 8001442:	68fa      	ldr	r2, [r7, #12]
 8001444:	429a      	cmp	r2, r3
 8001446:	d8f7      	bhi.n	8001438 <HAL_Delay+0x28>
  {
  }
}
 8001448:	bf00      	nop
 800144a:	bf00      	nop
 800144c:	3710      	adds	r7, #16
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
 8001452:	bf00      	nop
 8001454:	20000008 	.word	0x20000008

08001458 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 8001460:	bf00      	nop
 8001462:	370c      	adds	r7, #12
 8001464:	46bd      	mov	sp, r7
 8001466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146a:	4770      	bx	lr

0800146c <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800146c:	b480      	push	{r7}
 800146e:	b083      	sub	sp, #12
 8001470:	af00      	add	r7, sp, #0
 8001472:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001474:	bf00      	nop
 8001476:	370c      	adds	r7, #12
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr

08001480 <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b09a      	sub	sp, #104	@ 0x68
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001488:	2300      	movs	r3, #0
 800148a:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800148e:	2300      	movs	r3, #0
 8001490:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 8001492:	2300      	movs	r3, #0
 8001494:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2b00      	cmp	r3, #0
 800149a:	d101      	bne.n	80014a0 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 800149c:	2301      	movs	r3, #1
 800149e:	e1e3      	b.n	8001868 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	691b      	ldr	r3, [r3, #16]
 80014a4:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014aa:	f003 0310 	and.w	r3, r3, #16
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d176      	bne.n	80015a0 <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d152      	bne.n	8001560 <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	2200      	movs	r2, #0
 80014be:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	2200      	movs	r2, #0
 80014c4:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	2200      	movs	r2, #0
 80014ca:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80014d4:	6878      	ldr	r0, [r7, #4]
 80014d6:	f7ff fd73 	bl	8000fc0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d13b      	bne.n	8001560 <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80014e8:	6878      	ldr	r0, [r7, #4]
 80014ea:	f001 fa5f 	bl	80029ac <ADC_Disable>
 80014ee:	4603      	mov	r3, r0
 80014f0:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014f8:	f003 0310 	and.w	r3, r3, #16
 80014fc:	2b00      	cmp	r3, #0
 80014fe:	d12f      	bne.n	8001560 <HAL_ADC_Init+0xe0>
 8001500:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 8001504:	2b00      	cmp	r3, #0
 8001506:	d12b      	bne.n	8001560 <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800150c:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8001510:	f023 0302 	bic.w	r3, r3, #2
 8001514:	f043 0202 	orr.w	r2, r3, #2
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	689a      	ldr	r2, [r3, #8]
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800152a:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	689a      	ldr	r2, [r3, #8]
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 800153a:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800153c:	4b92      	ldr	r3, [pc, #584]	@ (8001788 <HAL_ADC_Init+0x308>)
 800153e:	681b      	ldr	r3, [r3, #0]
 8001540:	4a92      	ldr	r2, [pc, #584]	@ (800178c <HAL_ADC_Init+0x30c>)
 8001542:	fba2 2303 	umull	r2, r3, r2, r3
 8001546:	0c9a      	lsrs	r2, r3, #18
 8001548:	4613      	mov	r3, r2
 800154a:	009b      	lsls	r3, r3, #2
 800154c:	4413      	add	r3, r2
 800154e:	005b      	lsls	r3, r3, #1
 8001550:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001552:	e002      	b.n	800155a <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	3b01      	subs	r3, #1
 8001558:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800155a:	68bb      	ldr	r3, [r7, #8]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d1f9      	bne.n	8001554 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	689b      	ldr	r3, [r3, #8]
 8001566:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d007      	beq.n	800157e <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	689b      	ldr	r3, [r3, #8]
 8001574:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001578:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800157c:	d110      	bne.n	80015a0 <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800157e:	687b      	ldr	r3, [r7, #4]
 8001580:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001582:	f023 0312 	bic.w	r3, r3, #18
 8001586:	f043 0210 	orr.w	r2, r3, #16
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001592:	f043 0201 	orr.w	r2, r3, #1
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 800159a:	2301      	movs	r3, #1
 800159c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a4:	f003 0310 	and.w	r3, r3, #16
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	f040 8150 	bne.w	800184e <HAL_ADC_Init+0x3ce>
 80015ae:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	f040 814b 	bne.w	800184e <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 80015b8:	687b      	ldr	r3, [r7, #4]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	f040 8143 	bne.w	800184e <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015cc:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80015d0:	f043 0202 	orr.w	r2, r3, #2
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015e0:	d004      	beq.n	80015ec <HAL_ADC_Init+0x16c>
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a6a      	ldr	r2, [pc, #424]	@ (8001790 <HAL_ADC_Init+0x310>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d101      	bne.n	80015f0 <HAL_ADC_Init+0x170>
 80015ec:	4b69      	ldr	r3, [pc, #420]	@ (8001794 <HAL_ADC_Init+0x314>)
 80015ee:	e000      	b.n	80015f2 <HAL_ADC_Init+0x172>
 80015f0:	4b69      	ldr	r3, [pc, #420]	@ (8001798 <HAL_ADC_Init+0x318>)
 80015f2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80015fc:	d102      	bne.n	8001604 <HAL_ADC_Init+0x184>
 80015fe:	4b64      	ldr	r3, [pc, #400]	@ (8001790 <HAL_ADC_Init+0x310>)
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	e01a      	b.n	800163a <HAL_ADC_Init+0x1ba>
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	681b      	ldr	r3, [r3, #0]
 8001608:	4a61      	ldr	r2, [pc, #388]	@ (8001790 <HAL_ADC_Init+0x310>)
 800160a:	4293      	cmp	r3, r2
 800160c:	d103      	bne.n	8001616 <HAL_ADC_Init+0x196>
 800160e:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	e011      	b.n	800163a <HAL_ADC_Init+0x1ba>
 8001616:	687b      	ldr	r3, [r7, #4]
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	4a60      	ldr	r2, [pc, #384]	@ (800179c <HAL_ADC_Init+0x31c>)
 800161c:	4293      	cmp	r3, r2
 800161e:	d102      	bne.n	8001626 <HAL_ADC_Init+0x1a6>
 8001620:	4b5f      	ldr	r3, [pc, #380]	@ (80017a0 <HAL_ADC_Init+0x320>)
 8001622:	60fb      	str	r3, [r7, #12]
 8001624:	e009      	b.n	800163a <HAL_ADC_Init+0x1ba>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	4a5d      	ldr	r2, [pc, #372]	@ (80017a0 <HAL_ADC_Init+0x320>)
 800162c:	4293      	cmp	r3, r2
 800162e:	d102      	bne.n	8001636 <HAL_ADC_Init+0x1b6>
 8001630:	4b5a      	ldr	r3, [pc, #360]	@ (800179c <HAL_ADC_Init+0x31c>)
 8001632:	60fb      	str	r3, [r7, #12]
 8001634:	e001      	b.n	800163a <HAL_ADC_Init+0x1ba>
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 0303 	and.w	r3, r3, #3
 8001644:	2b01      	cmp	r3, #1
 8001646:	d108      	bne.n	800165a <HAL_ADC_Init+0x1da>
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	681b      	ldr	r3, [r3, #0]
 800164e:	f003 0301 	and.w	r3, r3, #1
 8001652:	2b01      	cmp	r3, #1
 8001654:	d101      	bne.n	800165a <HAL_ADC_Init+0x1da>
 8001656:	2301      	movs	r3, #1
 8001658:	e000      	b.n	800165c <HAL_ADC_Init+0x1dc>
 800165a:	2300      	movs	r3, #0
 800165c:	2b00      	cmp	r3, #0
 800165e:	d11c      	bne.n	800169a <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001660:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 8001662:	2b00      	cmp	r3, #0
 8001664:	d010      	beq.n	8001688 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	689b      	ldr	r3, [r3, #8]
 800166a:	f003 0303 	and.w	r3, r3, #3
 800166e:	2b01      	cmp	r3, #1
 8001670:	d107      	bne.n	8001682 <HAL_ADC_Init+0x202>
 8001672:	68fb      	ldr	r3, [r7, #12]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	f003 0301 	and.w	r3, r3, #1
 800167a:	2b01      	cmp	r3, #1
 800167c:	d101      	bne.n	8001682 <HAL_ADC_Init+0x202>
 800167e:	2301      	movs	r3, #1
 8001680:	e000      	b.n	8001684 <HAL_ADC_Init+0x204>
 8001682:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001684:	2b00      	cmp	r3, #0
 8001686:	d108      	bne.n	800169a <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001688:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800168a:	689b      	ldr	r3, [r3, #8]
 800168c:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	685b      	ldr	r3, [r3, #4]
 8001694:	431a      	orrs	r2, r3
 8001696:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001698:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	7e5b      	ldrb	r3, [r3, #25]
 800169e:	035b      	lsls	r3, r3, #13
 80016a0:	687a      	ldr	r2, [r7, #4]
 80016a2:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80016a4:	2a01      	cmp	r2, #1
 80016a6:	d002      	beq.n	80016ae <HAL_ADC_Init+0x22e>
 80016a8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80016ac:	e000      	b.n	80016b0 <HAL_ADC_Init+0x230>
 80016ae:	2200      	movs	r2, #0
 80016b0:	431a      	orrs	r2, r3
 80016b2:	687b      	ldr	r3, [r7, #4]
 80016b4:	68db      	ldr	r3, [r3, #12]
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	689b      	ldr	r3, [r3, #8]
 80016bc:	4313      	orrs	r3, r2
 80016be:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80016c0:	4313      	orrs	r3, r2
 80016c2:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016ca:	2b01      	cmp	r3, #1
 80016cc:	d11b      	bne.n	8001706 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	7e5b      	ldrb	r3, [r3, #25]
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d109      	bne.n	80016ea <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016da:	3b01      	subs	r3, #1
 80016dc:	045a      	lsls	r2, r3, #17
 80016de:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80016e0:	4313      	orrs	r3, r2
 80016e2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80016e8:	e00d      	b.n	8001706 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ee:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80016f2:	f043 0220 	orr.w	r2, r3, #32
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016fe:	f043 0201 	orr.w	r2, r3, #1
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800170a:	2b01      	cmp	r3, #1
 800170c:	d054      	beq.n	80017b8 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	4a22      	ldr	r2, [pc, #136]	@ (800179c <HAL_ADC_Init+0x31c>)
 8001714:	4293      	cmp	r3, r2
 8001716:	d004      	beq.n	8001722 <HAL_ADC_Init+0x2a2>
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	4a20      	ldr	r2, [pc, #128]	@ (80017a0 <HAL_ADC_Init+0x320>)
 800171e:	4293      	cmp	r3, r2
 8001720:	d140      	bne.n	80017a4 <HAL_ADC_Init+0x324>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001726:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 800172a:	d02a      	beq.n	8001782 <HAL_ADC_Init+0x302>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001730:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8001734:	d022      	beq.n	800177c <HAL_ADC_Init+0x2fc>
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800173a:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 800173e:	d01a      	beq.n	8001776 <HAL_ADC_Init+0x2f6>
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001744:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001748:	d012      	beq.n	8001770 <HAL_ADC_Init+0x2f0>
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174e:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 8001752:	d00a      	beq.n	800176a <HAL_ADC_Init+0x2ea>
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001758:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 800175c:	d002      	beq.n	8001764 <HAL_ADC_Init+0x2e4>
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001762:	e023      	b.n	80017ac <HAL_ADC_Init+0x32c>
 8001764:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001768:	e020      	b.n	80017ac <HAL_ADC_Init+0x32c>
 800176a:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800176e:	e01d      	b.n	80017ac <HAL_ADC_Init+0x32c>
 8001770:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001774:	e01a      	b.n	80017ac <HAL_ADC_Init+0x32c>
 8001776:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800177a:	e017      	b.n	80017ac <HAL_ADC_Init+0x32c>
 800177c:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 8001780:	e014      	b.n	80017ac <HAL_ADC_Init+0x32c>
 8001782:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001786:	e011      	b.n	80017ac <HAL_ADC_Init+0x32c>
 8001788:	20000000 	.word	0x20000000
 800178c:	431bde83 	.word	0x431bde83
 8001790:	50000100 	.word	0x50000100
 8001794:	50000300 	.word	0x50000300
 8001798:	50000700 	.word	0x50000700
 800179c:	50000400 	.word	0x50000400
 80017a0:	50000500 	.word	0x50000500
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80017a8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80017ac:	687a      	ldr	r2, [r7, #4]
 80017ae:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80017b0:	4313      	orrs	r3, r2
 80017b2:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017b4:	4313      	orrs	r3, r2
 80017b6:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	689b      	ldr	r3, [r3, #8]
 80017be:	f003 030c 	and.w	r3, r3, #12
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d114      	bne.n	80017f0 <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	68db      	ldr	r3, [r3, #12]
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	6812      	ldr	r2, [r2, #0]
 80017d0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80017d4:	f023 0302 	bic.w	r3, r3, #2
 80017d8:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	7e1b      	ldrb	r3, [r3, #24]
 80017de:	039a      	lsls	r2, r3, #14
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80017e6:	005b      	lsls	r3, r3, #1
 80017e8:	4313      	orrs	r3, r2
 80017ea:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80017ec:	4313      	orrs	r3, r2
 80017ee:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68da      	ldr	r2, [r3, #12]
 80017f6:	4b1e      	ldr	r3, [pc, #120]	@ (8001870 <HAL_ADC_Init+0x3f0>)
 80017f8:	4013      	ands	r3, r2
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6812      	ldr	r2, [r2, #0]
 80017fe:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 8001800:	430b      	orrs	r3, r1
 8001802:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	691b      	ldr	r3, [r3, #16]
 8001808:	2b01      	cmp	r3, #1
 800180a:	d10c      	bne.n	8001826 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001812:	f023 010f 	bic.w	r1, r3, #15
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	69db      	ldr	r3, [r3, #28]
 800181a:	1e5a      	subs	r2, r3, #1
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	430a      	orrs	r2, r1
 8001822:	631a      	str	r2, [r3, #48]	@ 0x30
 8001824:	e007      	b.n	8001836 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f022 020f 	bic.w	r2, r2, #15
 8001834:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	2200      	movs	r2, #0
 800183a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001840:	f023 0303 	bic.w	r3, r3, #3
 8001844:	f043 0201 	orr.w	r2, r3, #1
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	641a      	str	r2, [r3, #64]	@ 0x40
 800184c:	e00a      	b.n	8001864 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001852:	f023 0312 	bic.w	r3, r3, #18
 8001856:	f043 0210 	orr.w	r2, r3, #16
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 800185e:	2301      	movs	r3, #1
 8001860:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001864:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001868:	4618      	mov	r0, r3
 800186a:	3768      	adds	r7, #104	@ 0x68
 800186c:	46bd      	mov	sp, r7
 800186e:	bd80      	pop	{r7, pc}
 8001870:	fff0c007 	.word	0xfff0c007

08001874 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001874:	b580      	push	{r7, lr}
 8001876:	b084      	sub	sp, #16
 8001878:	af00      	add	r7, sp, #0
 800187a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800187c:	2300      	movs	r3, #0
 800187e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	689b      	ldr	r3, [r3, #8]
 8001886:	f003 0304 	and.w	r3, r3, #4
 800188a:	2b00      	cmp	r3, #0
 800188c:	f040 8123 	bne.w	8001ad6 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001896:	2b01      	cmp	r3, #1
 8001898:	d101      	bne.n	800189e <HAL_ADC_Start_IT+0x2a>
 800189a:	2302      	movs	r3, #2
 800189c:	e11e      	b.n	8001adc <HAL_ADC_Start_IT+0x268>
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	2201      	movs	r2, #1
 80018a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80018a6:	6878      	ldr	r0, [r7, #4]
 80018a8:	f001 f81c 	bl	80028e4 <ADC_Enable>
 80018ac:	4603      	mov	r3, r0
 80018ae:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80018b0:	7bfb      	ldrb	r3, [r7, #15]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	f040 810a 	bne.w	8001acc <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018bc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80018c0:	f023 0301 	bic.w	r3, r3, #1
 80018c4:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80018d4:	d004      	beq.n	80018e0 <HAL_ADC_Start_IT+0x6c>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	681b      	ldr	r3, [r3, #0]
 80018da:	4a82      	ldr	r2, [pc, #520]	@ (8001ae4 <HAL_ADC_Start_IT+0x270>)
 80018dc:	4293      	cmp	r3, r2
 80018de:	d106      	bne.n	80018ee <HAL_ADC_Start_IT+0x7a>
 80018e0:	4b81      	ldr	r3, [pc, #516]	@ (8001ae8 <HAL_ADC_Start_IT+0x274>)
 80018e2:	689b      	ldr	r3, [r3, #8]
 80018e4:	f003 031f 	and.w	r3, r3, #31
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d010      	beq.n	800190e <HAL_ADC_Start_IT+0x9a>
 80018ec:	e005      	b.n	80018fa <HAL_ADC_Start_IT+0x86>
 80018ee:	4b7f      	ldr	r3, [pc, #508]	@ (8001aec <HAL_ADC_Start_IT+0x278>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 031f 	and.w	r3, r3, #31
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d009      	beq.n	800190e <HAL_ADC_Start_IT+0x9a>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	681b      	ldr	r3, [r3, #0]
 80018fe:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001902:	d004      	beq.n	800190e <HAL_ADC_Start_IT+0x9a>
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	681b      	ldr	r3, [r3, #0]
 8001908:	4a79      	ldr	r2, [pc, #484]	@ (8001af0 <HAL_ADC_Start_IT+0x27c>)
 800190a:	4293      	cmp	r3, r2
 800190c:	d115      	bne.n	800193a <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001912:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	68db      	ldr	r3, [r3, #12]
 8001920:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d036      	beq.n	8001996 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800192c:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001930:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001938:	e02d      	b.n	8001996 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800193e:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800194e:	d004      	beq.n	800195a <HAL_ADC_Start_IT+0xe6>
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	4a63      	ldr	r2, [pc, #396]	@ (8001ae4 <HAL_ADC_Start_IT+0x270>)
 8001956:	4293      	cmp	r3, r2
 8001958:	d10a      	bne.n	8001970 <HAL_ADC_Start_IT+0xfc>
 800195a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800195e:	68db      	ldr	r3, [r3, #12]
 8001960:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001964:	2b00      	cmp	r3, #0
 8001966:	bf14      	ite	ne
 8001968:	2301      	movne	r3, #1
 800196a:	2300      	moveq	r3, #0
 800196c:	b2db      	uxtb	r3, r3
 800196e:	e008      	b.n	8001982 <HAL_ADC_Start_IT+0x10e>
 8001970:	4b5f      	ldr	r3, [pc, #380]	@ (8001af0 <HAL_ADC_Start_IT+0x27c>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001978:	2b00      	cmp	r3, #0
 800197a:	bf14      	ite	ne
 800197c:	2301      	movne	r3, #1
 800197e:	2300      	moveq	r3, #0
 8001980:	b2db      	uxtb	r3, r3
 8001982:	2b00      	cmp	r3, #0
 8001984:	d007      	beq.n	8001996 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800198a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800198e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800199a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800199e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80019a2:	d106      	bne.n	80019b2 <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019a8:	f023 0206 	bic.w	r2, r3, #6
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	645a      	str	r2, [r3, #68]	@ 0x44
 80019b0:	e002      	b.n	80019b8 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	2200      	movs	r2, #0
 80019b6:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	221c      	movs	r2, #28
 80019c6:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	695b      	ldr	r3, [r3, #20]
 80019cc:	2b08      	cmp	r3, #8
 80019ce:	d110      	bne.n	80019f2 <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	685a      	ldr	r2, [r3, #4]
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	f022 0204 	bic.w	r2, r2, #4
 80019de:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	681b      	ldr	r3, [r3, #0]
 80019e4:	685a      	ldr	r2, [r3, #4]
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f042 0208 	orr.w	r2, r2, #8
 80019ee:	605a      	str	r2, [r3, #4]
          break;
 80019f0:	e008      	b.n	8001a04 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	685a      	ldr	r2, [r3, #4]
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f042 020c 	orr.w	r2, r2, #12
 8001a00:	605a      	str	r2, [r3, #4]
          break;
 8001a02:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001a08:	2b01      	cmp	r3, #1
 8001a0a:	d107      	bne.n	8001a1c <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f022 0210 	bic.w	r2, r2, #16
 8001a1a:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a24:	d004      	beq.n	8001a30 <HAL_ADC_Start_IT+0x1bc>
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae4 <HAL_ADC_Start_IT+0x270>)
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d106      	bne.n	8001a3e <HAL_ADC_Start_IT+0x1ca>
 8001a30:	4b2d      	ldr	r3, [pc, #180]	@ (8001ae8 <HAL_ADC_Start_IT+0x274>)
 8001a32:	689b      	ldr	r3, [r3, #8]
 8001a34:	f003 031f 	and.w	r3, r3, #31
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	d03e      	beq.n	8001aba <HAL_ADC_Start_IT+0x246>
 8001a3c:	e005      	b.n	8001a4a <HAL_ADC_Start_IT+0x1d6>
 8001a3e:	4b2b      	ldr	r3, [pc, #172]	@ (8001aec <HAL_ADC_Start_IT+0x278>)
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 031f 	and.w	r3, r3, #31
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d037      	beq.n	8001aba <HAL_ADC_Start_IT+0x246>
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a52:	d004      	beq.n	8001a5e <HAL_ADC_Start_IT+0x1ea>
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	4a22      	ldr	r2, [pc, #136]	@ (8001ae4 <HAL_ADC_Start_IT+0x270>)
 8001a5a:	4293      	cmp	r3, r2
 8001a5c:	d106      	bne.n	8001a6c <HAL_ADC_Start_IT+0x1f8>
 8001a5e:	4b22      	ldr	r3, [pc, #136]	@ (8001ae8 <HAL_ADC_Start_IT+0x274>)
 8001a60:	689b      	ldr	r3, [r3, #8]
 8001a62:	f003 031f 	and.w	r3, r3, #31
 8001a66:	2b05      	cmp	r3, #5
 8001a68:	d027      	beq.n	8001aba <HAL_ADC_Start_IT+0x246>
 8001a6a:	e005      	b.n	8001a78 <HAL_ADC_Start_IT+0x204>
 8001a6c:	4b1f      	ldr	r3, [pc, #124]	@ (8001aec <HAL_ADC_Start_IT+0x278>)
 8001a6e:	689b      	ldr	r3, [r3, #8]
 8001a70:	f003 031f 	and.w	r3, r3, #31
 8001a74:	2b05      	cmp	r3, #5
 8001a76:	d020      	beq.n	8001aba <HAL_ADC_Start_IT+0x246>
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a80:	d004      	beq.n	8001a8c <HAL_ADC_Start_IT+0x218>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4a17      	ldr	r2, [pc, #92]	@ (8001ae4 <HAL_ADC_Start_IT+0x270>)
 8001a88:	4293      	cmp	r3, r2
 8001a8a:	d106      	bne.n	8001a9a <HAL_ADC_Start_IT+0x226>
 8001a8c:	4b16      	ldr	r3, [pc, #88]	@ (8001ae8 <HAL_ADC_Start_IT+0x274>)
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	f003 031f 	and.w	r3, r3, #31
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	d010      	beq.n	8001aba <HAL_ADC_Start_IT+0x246>
 8001a98:	e005      	b.n	8001aa6 <HAL_ADC_Start_IT+0x232>
 8001a9a:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <HAL_ADC_Start_IT+0x278>)
 8001a9c:	689b      	ldr	r3, [r3, #8]
 8001a9e:	f003 031f 	and.w	r3, r3, #31
 8001aa2:	2b09      	cmp	r3, #9
 8001aa4:	d009      	beq.n	8001aba <HAL_ADC_Start_IT+0x246>
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001aae:	d004      	beq.n	8001aba <HAL_ADC_Start_IT+0x246>
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	681b      	ldr	r3, [r3, #0]
 8001ab4:	4a0e      	ldr	r2, [pc, #56]	@ (8001af0 <HAL_ADC_Start_IT+0x27c>)
 8001ab6:	4293      	cmp	r3, r2
 8001ab8:	d10f      	bne.n	8001ada <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	689a      	ldr	r2, [r3, #8]
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	f042 0204 	orr.w	r2, r2, #4
 8001ac8:	609a      	str	r2, [r3, #8]
 8001aca:	e006      	b.n	8001ada <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001ad4:	e001      	b.n	8001ada <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001ad6:	2302      	movs	r3, #2
 8001ad8:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001ada:	7bfb      	ldrb	r3, [r7, #15]
}
 8001adc:	4618      	mov	r0, r3
 8001ade:	3710      	adds	r7, #16
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	bd80      	pop	{r7, pc}
 8001ae4:	50000100 	.word	0x50000100
 8001ae8:	50000300 	.word	0x50000300
 8001aec:	50000700 	.word	0x50000700
 8001af0:	50000400 	.word	0x50000400

08001af4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	681b      	ldr	r3, [r3, #0]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001b02:	4618      	mov	r0, r3
 8001b04:	370c      	adds	r7, #12
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
	...

08001b10 <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b088      	sub	sp, #32
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001b18:	2300      	movs	r3, #0
 8001b1a:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001b1c:	2300      	movs	r3, #0
 8001b1e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001b20:	2300      	movs	r3, #0
 8001b22:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	f003 0304 	and.w	r3, r3, #4
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	d004      	beq.n	8001b48 <HAL_ADC_IRQHandler+0x38>
 8001b3e:	68fb      	ldr	r3, [r7, #12]
 8001b40:	f003 0304 	and.w	r3, r3, #4
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d10b      	bne.n	8001b60 <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001b48:	693b      	ldr	r3, [r7, #16]
 8001b4a:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	f000 80bc 	beq.w	8001ccc <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f003 0308 	and.w	r3, r3, #8
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	f000 80b6 	beq.w	8001ccc <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	f003 0310 	and.w	r3, r3, #16
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b70:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b80:	d004      	beq.n	8001b8c <HAL_ADC_IRQHandler+0x7c>
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	681b      	ldr	r3, [r3, #0]
 8001b86:	4a90      	ldr	r2, [pc, #576]	@ (8001dc8 <HAL_ADC_IRQHandler+0x2b8>)
 8001b88:	4293      	cmp	r3, r2
 8001b8a:	d106      	bne.n	8001b9a <HAL_ADC_IRQHandler+0x8a>
 8001b8c:	4b8f      	ldr	r3, [pc, #572]	@ (8001dcc <HAL_ADC_IRQHandler+0x2bc>)
 8001b8e:	689b      	ldr	r3, [r3, #8]
 8001b90:	f003 031f 	and.w	r3, r3, #31
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d03e      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x106>
 8001b98:	e005      	b.n	8001ba6 <HAL_ADC_IRQHandler+0x96>
 8001b9a:	4b8d      	ldr	r3, [pc, #564]	@ (8001dd0 <HAL_ADC_IRQHandler+0x2c0>)
 8001b9c:	689b      	ldr	r3, [r3, #8]
 8001b9e:	f003 031f 	and.w	r3, r3, #31
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d037      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x106>
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bae:	d004      	beq.n	8001bba <HAL_ADC_IRQHandler+0xaa>
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4a84      	ldr	r2, [pc, #528]	@ (8001dc8 <HAL_ADC_IRQHandler+0x2b8>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d106      	bne.n	8001bc8 <HAL_ADC_IRQHandler+0xb8>
 8001bba:	4b84      	ldr	r3, [pc, #528]	@ (8001dcc <HAL_ADC_IRQHandler+0x2bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f003 031f 	and.w	r3, r3, #31
 8001bc2:	2b05      	cmp	r3, #5
 8001bc4:	d027      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x106>
 8001bc6:	e005      	b.n	8001bd4 <HAL_ADC_IRQHandler+0xc4>
 8001bc8:	4b81      	ldr	r3, [pc, #516]	@ (8001dd0 <HAL_ADC_IRQHandler+0x2c0>)
 8001bca:	689b      	ldr	r3, [r3, #8]
 8001bcc:	f003 031f 	and.w	r3, r3, #31
 8001bd0:	2b05      	cmp	r3, #5
 8001bd2:	d020      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x106>
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001bdc:	d004      	beq.n	8001be8 <HAL_ADC_IRQHandler+0xd8>
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	4a79      	ldr	r2, [pc, #484]	@ (8001dc8 <HAL_ADC_IRQHandler+0x2b8>)
 8001be4:	4293      	cmp	r3, r2
 8001be6:	d106      	bne.n	8001bf6 <HAL_ADC_IRQHandler+0xe6>
 8001be8:	4b78      	ldr	r3, [pc, #480]	@ (8001dcc <HAL_ADC_IRQHandler+0x2bc>)
 8001bea:	689b      	ldr	r3, [r3, #8]
 8001bec:	f003 031f 	and.w	r3, r3, #31
 8001bf0:	2b09      	cmp	r3, #9
 8001bf2:	d010      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x106>
 8001bf4:	e005      	b.n	8001c02 <HAL_ADC_IRQHandler+0xf2>
 8001bf6:	4b76      	ldr	r3, [pc, #472]	@ (8001dd0 <HAL_ADC_IRQHandler+0x2c0>)
 8001bf8:	689b      	ldr	r3, [r3, #8]
 8001bfa:	f003 031f 	and.w	r3, r3, #31
 8001bfe:	2b09      	cmp	r3, #9
 8001c00:	d009      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x106>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c0a:	d004      	beq.n	8001c16 <HAL_ADC_IRQHandler+0x106>
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a70      	ldr	r2, [pc, #448]	@ (8001dd4 <HAL_ADC_IRQHandler+0x2c4>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d104      	bne.n	8001c20 <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	68db      	ldr	r3, [r3, #12]
 8001c1c:	61bb      	str	r3, [r7, #24]
 8001c1e:	e00f      	b.n	8001c40 <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c28:	d004      	beq.n	8001c34 <HAL_ADC_IRQHandler+0x124>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a66      	ldr	r2, [pc, #408]	@ (8001dc8 <HAL_ADC_IRQHandler+0x2b8>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d102      	bne.n	8001c3a <HAL_ADC_IRQHandler+0x12a>
 8001c34:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001c38:	e000      	b.n	8001c3c <HAL_ADC_IRQHandler+0x12c>
 8001c3a:	4b66      	ldr	r3, [pc, #408]	@ (8001dd4 <HAL_ADC_IRQHandler+0x2c4>)
 8001c3c:	68db      	ldr	r3, [r3, #12]
 8001c3e:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68db      	ldr	r3, [r3, #12]
 8001c46:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d137      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001c4e:	69bb      	ldr	r3, [r7, #24]
 8001c50:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d132      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001c58:	693b      	ldr	r3, [r7, #16]
 8001c5a:	f003 0308 	and.w	r3, r3, #8
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d02d      	beq.n	8001cbe <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	689b      	ldr	r3, [r3, #8]
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	d11a      	bne.n	8001ca6 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	685a      	ldr	r2, [r3, #4]
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f022 020c 	bic.w	r2, r2, #12
 8001c7e:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c84:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c90:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001c94:	2b00      	cmp	r3, #0
 8001c96:	d112      	bne.n	8001cbe <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c9c:	f043 0201 	orr.w	r2, r3, #1
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	641a      	str	r2, [r3, #64]	@ 0x40
 8001ca4:	e00b      	b.n	8001cbe <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001caa:	f043 0210 	orr.w	r2, r3, #16
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cb6:	f043 0201 	orr.w	r2, r3, #1
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001cbe:	6878      	ldr	r0, [r7, #4]
 8001cc0:	f7fe ffca 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	220c      	movs	r2, #12
 8001cca:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ccc:	693b      	ldr	r3, [r7, #16]
 8001cce:	f003 0320 	and.w	r3, r3, #32
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d004      	beq.n	8001ce0 <HAL_ADC_IRQHandler+0x1d0>
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	f003 0320 	and.w	r3, r3, #32
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d10b      	bne.n	8001cf8 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001ce0:	693b      	ldr	r3, [r7, #16]
 8001ce2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ce6:	2b00      	cmp	r3, #0
 8001ce8:	f000 8138 	beq.w	8001f5c <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	f000 8132 	beq.w	8001f5c <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001cfc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d0c:	d004      	beq.n	8001d18 <HAL_ADC_IRQHandler+0x208>
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4a2d      	ldr	r2, [pc, #180]	@ (8001dc8 <HAL_ADC_IRQHandler+0x2b8>)
 8001d14:	4293      	cmp	r3, r2
 8001d16:	d106      	bne.n	8001d26 <HAL_ADC_IRQHandler+0x216>
 8001d18:	4b2c      	ldr	r3, [pc, #176]	@ (8001dcc <HAL_ADC_IRQHandler+0x2bc>)
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	f003 031f 	and.w	r3, r3, #31
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d03e      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x292>
 8001d24:	e005      	b.n	8001d32 <HAL_ADC_IRQHandler+0x222>
 8001d26:	4b2a      	ldr	r3, [pc, #168]	@ (8001dd0 <HAL_ADC_IRQHandler+0x2c0>)
 8001d28:	689b      	ldr	r3, [r3, #8]
 8001d2a:	f003 031f 	and.w	r3, r3, #31
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d037      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x292>
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d3a:	d004      	beq.n	8001d46 <HAL_ADC_IRQHandler+0x236>
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	4a21      	ldr	r2, [pc, #132]	@ (8001dc8 <HAL_ADC_IRQHandler+0x2b8>)
 8001d42:	4293      	cmp	r3, r2
 8001d44:	d106      	bne.n	8001d54 <HAL_ADC_IRQHandler+0x244>
 8001d46:	4b21      	ldr	r3, [pc, #132]	@ (8001dcc <HAL_ADC_IRQHandler+0x2bc>)
 8001d48:	689b      	ldr	r3, [r3, #8]
 8001d4a:	f003 031f 	and.w	r3, r3, #31
 8001d4e:	2b05      	cmp	r3, #5
 8001d50:	d027      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x292>
 8001d52:	e005      	b.n	8001d60 <HAL_ADC_IRQHandler+0x250>
 8001d54:	4b1e      	ldr	r3, [pc, #120]	@ (8001dd0 <HAL_ADC_IRQHandler+0x2c0>)
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 031f 	and.w	r3, r3, #31
 8001d5c:	2b05      	cmp	r3, #5
 8001d5e:	d020      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x292>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	681b      	ldr	r3, [r3, #0]
 8001d64:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d68:	d004      	beq.n	8001d74 <HAL_ADC_IRQHandler+0x264>
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	4a16      	ldr	r2, [pc, #88]	@ (8001dc8 <HAL_ADC_IRQHandler+0x2b8>)
 8001d70:	4293      	cmp	r3, r2
 8001d72:	d106      	bne.n	8001d82 <HAL_ADC_IRQHandler+0x272>
 8001d74:	4b15      	ldr	r3, [pc, #84]	@ (8001dcc <HAL_ADC_IRQHandler+0x2bc>)
 8001d76:	689b      	ldr	r3, [r3, #8]
 8001d78:	f003 031f 	and.w	r3, r3, #31
 8001d7c:	2b09      	cmp	r3, #9
 8001d7e:	d010      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x292>
 8001d80:	e005      	b.n	8001d8e <HAL_ADC_IRQHandler+0x27e>
 8001d82:	4b13      	ldr	r3, [pc, #76]	@ (8001dd0 <HAL_ADC_IRQHandler+0x2c0>)
 8001d84:	689b      	ldr	r3, [r3, #8]
 8001d86:	f003 031f 	and.w	r3, r3, #31
 8001d8a:	2b09      	cmp	r3, #9
 8001d8c:	d009      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x292>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d96:	d004      	beq.n	8001da2 <HAL_ADC_IRQHandler+0x292>
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a0d      	ldr	r2, [pc, #52]	@ (8001dd4 <HAL_ADC_IRQHandler+0x2c4>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d104      	bne.n	8001dac <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	61bb      	str	r3, [r7, #24]
 8001daa:	e018      	b.n	8001dde <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001db4:	d004      	beq.n	8001dc0 <HAL_ADC_IRQHandler+0x2b0>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	4a03      	ldr	r2, [pc, #12]	@ (8001dc8 <HAL_ADC_IRQHandler+0x2b8>)
 8001dbc:	4293      	cmp	r3, r2
 8001dbe:	d10b      	bne.n	8001dd8 <HAL_ADC_IRQHandler+0x2c8>
 8001dc0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001dc4:	e009      	b.n	8001dda <HAL_ADC_IRQHandler+0x2ca>
 8001dc6:	bf00      	nop
 8001dc8:	50000100 	.word	0x50000100
 8001dcc:	50000300 	.word	0x50000300
 8001dd0:	50000700 	.word	0x50000700
 8001dd4:	50000400 	.word	0x50000400
 8001dd8:	4b92      	ldr	r3, [pc, #584]	@ (8002024 <HAL_ADC_IRQHandler+0x514>)
 8001dda:	68db      	ldr	r3, [r3, #12]
 8001ddc:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001de4:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	f040 80b0 	bne.w	8001f4e <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001dee:	69bb      	ldr	r3, [r7, #24]
 8001df0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d00d      	beq.n	8001e14 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	68db      	ldr	r3, [r3, #12]
 8001dfe:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	f040 80a3 	bne.w	8001f4e <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	f040 809d 	bne.w	8001f4e <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	f000 8097 	beq.w	8001f4e <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e28:	d004      	beq.n	8001e34 <HAL_ADC_IRQHandler+0x324>
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	4a7e      	ldr	r2, [pc, #504]	@ (8002028 <HAL_ADC_IRQHandler+0x518>)
 8001e30:	4293      	cmp	r3, r2
 8001e32:	d106      	bne.n	8001e42 <HAL_ADC_IRQHandler+0x332>
 8001e34:	4b7d      	ldr	r3, [pc, #500]	@ (800202c <HAL_ADC_IRQHandler+0x51c>)
 8001e36:	689b      	ldr	r3, [r3, #8]
 8001e38:	f003 031f 	and.w	r3, r3, #31
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d03e      	beq.n	8001ebe <HAL_ADC_IRQHandler+0x3ae>
 8001e40:	e005      	b.n	8001e4e <HAL_ADC_IRQHandler+0x33e>
 8001e42:	4b7b      	ldr	r3, [pc, #492]	@ (8002030 <HAL_ADC_IRQHandler+0x520>)
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 031f 	and.w	r3, r3, #31
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d037      	beq.n	8001ebe <HAL_ADC_IRQHandler+0x3ae>
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e56:	d004      	beq.n	8001e62 <HAL_ADC_IRQHandler+0x352>
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a72      	ldr	r2, [pc, #456]	@ (8002028 <HAL_ADC_IRQHandler+0x518>)
 8001e5e:	4293      	cmp	r3, r2
 8001e60:	d106      	bne.n	8001e70 <HAL_ADC_IRQHandler+0x360>
 8001e62:	4b72      	ldr	r3, [pc, #456]	@ (800202c <HAL_ADC_IRQHandler+0x51c>)
 8001e64:	689b      	ldr	r3, [r3, #8]
 8001e66:	f003 031f 	and.w	r3, r3, #31
 8001e6a:	2b06      	cmp	r3, #6
 8001e6c:	d027      	beq.n	8001ebe <HAL_ADC_IRQHandler+0x3ae>
 8001e6e:	e005      	b.n	8001e7c <HAL_ADC_IRQHandler+0x36c>
 8001e70:	4b6f      	ldr	r3, [pc, #444]	@ (8002030 <HAL_ADC_IRQHandler+0x520>)
 8001e72:	689b      	ldr	r3, [r3, #8]
 8001e74:	f003 031f 	and.w	r3, r3, #31
 8001e78:	2b06      	cmp	r3, #6
 8001e7a:	d020      	beq.n	8001ebe <HAL_ADC_IRQHandler+0x3ae>
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001e84:	d004      	beq.n	8001e90 <HAL_ADC_IRQHandler+0x380>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a67      	ldr	r2, [pc, #412]	@ (8002028 <HAL_ADC_IRQHandler+0x518>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d106      	bne.n	8001e9e <HAL_ADC_IRQHandler+0x38e>
 8001e90:	4b66      	ldr	r3, [pc, #408]	@ (800202c <HAL_ADC_IRQHandler+0x51c>)
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	f003 031f 	and.w	r3, r3, #31
 8001e98:	2b07      	cmp	r3, #7
 8001e9a:	d010      	beq.n	8001ebe <HAL_ADC_IRQHandler+0x3ae>
 8001e9c:	e005      	b.n	8001eaa <HAL_ADC_IRQHandler+0x39a>
 8001e9e:	4b64      	ldr	r3, [pc, #400]	@ (8002030 <HAL_ADC_IRQHandler+0x520>)
 8001ea0:	689b      	ldr	r3, [r3, #8]
 8001ea2:	f003 031f 	and.w	r3, r3, #31
 8001ea6:	2b07      	cmp	r3, #7
 8001ea8:	d009      	beq.n	8001ebe <HAL_ADC_IRQHandler+0x3ae>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001eb2:	d004      	beq.n	8001ebe <HAL_ADC_IRQHandler+0x3ae>
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	681b      	ldr	r3, [r3, #0]
 8001eb8:	4a5a      	ldr	r2, [pc, #360]	@ (8002024 <HAL_ADC_IRQHandler+0x514>)
 8001eba:	4293      	cmp	r3, r2
 8001ebc:	d104      	bne.n	8001ec8 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	68db      	ldr	r3, [r3, #12]
 8001ec4:	617b      	str	r3, [r7, #20]
 8001ec6:	e00f      	b.n	8001ee8 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ed0:	d004      	beq.n	8001edc <HAL_ADC_IRQHandler+0x3cc>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	4a54      	ldr	r2, [pc, #336]	@ (8002028 <HAL_ADC_IRQHandler+0x518>)
 8001ed8:	4293      	cmp	r3, r2
 8001eda:	d102      	bne.n	8001ee2 <HAL_ADC_IRQHandler+0x3d2>
 8001edc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001ee0:	e000      	b.n	8001ee4 <HAL_ADC_IRQHandler+0x3d4>
 8001ee2:	4b50      	ldr	r3, [pc, #320]	@ (8002024 <HAL_ADC_IRQHandler+0x514>)
 8001ee4:	68db      	ldr	r3, [r3, #12]
 8001ee6:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 8001ee8:	697b      	ldr	r3, [r7, #20]
 8001eea:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d12d      	bne.n	8001f4e <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	689b      	ldr	r3, [r3, #8]
 8001ef8:	f003 0308 	and.w	r3, r3, #8
 8001efc:	2b00      	cmp	r3, #0
 8001efe:	d11a      	bne.n	8001f36 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	685a      	ldr	r2, [r3, #4]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8001f0e:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f14:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f20:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d112      	bne.n	8001f4e <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f2c:	f043 0201 	orr.w	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	641a      	str	r2, [r3, #64]	@ 0x40
 8001f34:	e00b      	b.n	8001f4e <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f3a:	f043 0210 	orr.w	r2, r3, #16
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f46:	f043 0201 	orr.w	r2, r3, #1
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001f4e:	6878      	ldr	r0, [r7, #4]
 8001f50:	f000 f8c4 	bl	80020dc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	2260      	movs	r2, #96	@ 0x60
 8001f5a:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d011      	beq.n	8001f8a <HAL_ADC_IRQHandler+0x47a>
 8001f66:	68fb      	ldr	r3, [r7, #12]
 8001f68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d00c      	beq.n	8001f8a <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f74:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fa6b 	bl	8001458 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	2280      	movs	r2, #128	@ 0x80
 8001f88:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001f8a:	693b      	ldr	r3, [r7, #16]
 8001f8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d012      	beq.n	8001fba <HAL_ADC_IRQHandler+0x4aa>
 8001f94:	68fb      	ldr	r3, [r7, #12]
 8001f96:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d00d      	beq.n	8001fba <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fa2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001faa:	6878      	ldr	r0, [r7, #4]
 8001fac:	f000 f8aa 	bl	8002104 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fb8:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001fba:	693b      	ldr	r3, [r7, #16]
 8001fbc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d012      	beq.n	8001fea <HAL_ADC_IRQHandler+0x4da>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d00d      	beq.n	8001fea <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fd2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001fda:	6878      	ldr	r0, [r7, #4]
 8001fdc:	f000 f89c 	bl	8002118 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fe8:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001fea:	693b      	ldr	r3, [r7, #16]
 8001fec:	f003 0310 	and.w	r3, r3, #16
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d04f      	beq.n	8002094 <HAL_ADC_IRQHandler+0x584>
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	f003 0310 	and.w	r3, r3, #16
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d04a      	beq.n	8002094 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002002:	2b01      	cmp	r3, #1
 8002004:	d102      	bne.n	800200c <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 8002006:	2301      	movs	r3, #1
 8002008:	61fb      	str	r3, [r7, #28]
 800200a:	e02d      	b.n	8002068 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002014:	d004      	beq.n	8002020 <HAL_ADC_IRQHandler+0x510>
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a03      	ldr	r2, [pc, #12]	@ (8002028 <HAL_ADC_IRQHandler+0x518>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d109      	bne.n	8002034 <HAL_ADC_IRQHandler+0x524>
 8002020:	4b02      	ldr	r3, [pc, #8]	@ (800202c <HAL_ADC_IRQHandler+0x51c>)
 8002022:	e008      	b.n	8002036 <HAL_ADC_IRQHandler+0x526>
 8002024:	50000400 	.word	0x50000400
 8002028:	50000100 	.word	0x50000100
 800202c:	50000300 	.word	0x50000300
 8002030:	50000700 	.word	0x50000700
 8002034:	4b28      	ldr	r3, [pc, #160]	@ (80020d8 <HAL_ADC_IRQHandler+0x5c8>)
 8002036:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	689b      	ldr	r3, [r3, #8]
 800203c:	f003 031f 	and.w	r3, r3, #31
 8002040:	2b00      	cmp	r3, #0
 8002042:	d109      	bne.n	8002058 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	68db      	ldr	r3, [r3, #12]
 800204a:	f003 0301 	and.w	r3, r3, #1
 800204e:	2b01      	cmp	r3, #1
 8002050:	d10a      	bne.n	8002068 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002052:	2301      	movs	r3, #1
 8002054:	61fb      	str	r3, [r7, #28]
 8002056:	e007      	b.n	8002068 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002058:	68bb      	ldr	r3, [r7, #8]
 800205a:	689b      	ldr	r3, [r3, #8]
 800205c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8002060:	2b00      	cmp	r3, #0
 8002062:	d001      	beq.n	8002068 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002064:	2301      	movs	r3, #1
 8002066:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002068:	69fb      	ldr	r3, [r7, #28]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d10e      	bne.n	800208c <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002072:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800207e:	f043 0202 	orr.w	r2, r3, #2
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002086:	6878      	ldr	r0, [r7, #4]
 8002088:	f7ff f9f0 	bl	800146c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	2210      	movs	r2, #16
 8002092:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002094:	693b      	ldr	r3, [r7, #16]
 8002096:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800209a:	2b00      	cmp	r3, #0
 800209c:	d018      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x5c0>
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020ac:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020b8:	f043 0208 	orr.w	r2, r3, #8
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80020c8:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 f810 	bl	80020f0 <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 80020d0:	bf00      	nop
 80020d2:	3720      	adds	r7, #32
 80020d4:	46bd      	mov	sp, r7
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	50000700 	.word	0x50000700

080020dc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 80020dc:	b480      	push	{r7}
 80020de:	b083      	sub	sp, #12
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80020e4:	bf00      	nop
 80020e6:	370c      	adds	r7, #12
 80020e8:	46bd      	mov	sp, r7
 80020ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ee:	4770      	bx	lr

080020f0 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80020f0:	b480      	push	{r7}
 80020f2:	b083      	sub	sp, #12
 80020f4:	af00      	add	r7, sp, #0
 80020f6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80020f8:	bf00      	nop
 80020fa:	370c      	adds	r7, #12
 80020fc:	46bd      	mov	sp, r7
 80020fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002102:	4770      	bx	lr

08002104 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 8002104:	b480      	push	{r7}
 8002106:	b083      	sub	sp, #12
 8002108:	af00      	add	r7, sp, #0
 800210a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 800210c:	bf00      	nop
 800210e:	370c      	adds	r7, #12
 8002110:	46bd      	mov	sp, r7
 8002112:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002116:	4770      	bx	lr

08002118 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 8002118:	b480      	push	{r7}
 800211a:	b083      	sub	sp, #12
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 8002120:	bf00      	nop
 8002122:	370c      	adds	r7, #12
 8002124:	46bd      	mov	sp, r7
 8002126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800212a:	4770      	bx	lr

0800212c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800212c:	b480      	push	{r7}
 800212e:	b09b      	sub	sp, #108	@ 0x6c
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
 8002134:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002136:	2300      	movs	r3, #0
 8002138:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 800213c:	2300      	movs	r3, #0
 800213e:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002146:	2b01      	cmp	r3, #1
 8002148:	d101      	bne.n	800214e <HAL_ADC_ConfigChannel+0x22>
 800214a:	2302      	movs	r3, #2
 800214c:	e2c8      	b.n	80026e0 <HAL_ADC_ConfigChannel+0x5b4>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	2201      	movs	r2, #1
 8002152:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	689b      	ldr	r3, [r3, #8]
 800215c:	f003 0304 	and.w	r3, r3, #4
 8002160:	2b00      	cmp	r3, #0
 8002162:	f040 82ac 	bne.w	80026be <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002166:	683b      	ldr	r3, [r7, #0]
 8002168:	685b      	ldr	r3, [r3, #4]
 800216a:	2b04      	cmp	r3, #4
 800216c:	d81c      	bhi.n	80021a8 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002174:	683b      	ldr	r3, [r7, #0]
 8002176:	685a      	ldr	r2, [r3, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	005b      	lsls	r3, r3, #1
 800217c:	4413      	add	r3, r2
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	461a      	mov	r2, r3
 8002182:	231f      	movs	r3, #31
 8002184:	4093      	lsls	r3, r2
 8002186:	43db      	mvns	r3, r3
 8002188:	4019      	ands	r1, r3
 800218a:	683b      	ldr	r3, [r7, #0]
 800218c:	6818      	ldr	r0, [r3, #0]
 800218e:	683b      	ldr	r3, [r7, #0]
 8002190:	685a      	ldr	r2, [r3, #4]
 8002192:	4613      	mov	r3, r2
 8002194:	005b      	lsls	r3, r3, #1
 8002196:	4413      	add	r3, r2
 8002198:	005b      	lsls	r3, r3, #1
 800219a:	fa00 f203 	lsl.w	r2, r0, r3
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	430a      	orrs	r2, r1
 80021a4:	631a      	str	r2, [r3, #48]	@ 0x30
 80021a6:	e063      	b.n	8002270 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	685b      	ldr	r3, [r3, #4]
 80021ac:	2b09      	cmp	r3, #9
 80021ae:	d81e      	bhi.n	80021ee <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	685a      	ldr	r2, [r3, #4]
 80021ba:	4613      	mov	r3, r2
 80021bc:	005b      	lsls	r3, r3, #1
 80021be:	4413      	add	r3, r2
 80021c0:	005b      	lsls	r3, r3, #1
 80021c2:	3b1e      	subs	r3, #30
 80021c4:	221f      	movs	r2, #31
 80021c6:	fa02 f303 	lsl.w	r3, r2, r3
 80021ca:	43db      	mvns	r3, r3
 80021cc:	4019      	ands	r1, r3
 80021ce:	683b      	ldr	r3, [r7, #0]
 80021d0:	6818      	ldr	r0, [r3, #0]
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	685a      	ldr	r2, [r3, #4]
 80021d6:	4613      	mov	r3, r2
 80021d8:	005b      	lsls	r3, r3, #1
 80021da:	4413      	add	r3, r2
 80021dc:	005b      	lsls	r3, r3, #1
 80021de:	3b1e      	subs	r3, #30
 80021e0:	fa00 f203 	lsl.w	r2, r0, r3
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	430a      	orrs	r2, r1
 80021ea:	635a      	str	r2, [r3, #52]	@ 0x34
 80021ec:	e040      	b.n	8002270 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	2b0e      	cmp	r3, #14
 80021f4:	d81e      	bhi.n	8002234 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80021fc:	683b      	ldr	r3, [r7, #0]
 80021fe:	685a      	ldr	r2, [r3, #4]
 8002200:	4613      	mov	r3, r2
 8002202:	005b      	lsls	r3, r3, #1
 8002204:	4413      	add	r3, r2
 8002206:	005b      	lsls	r3, r3, #1
 8002208:	3b3c      	subs	r3, #60	@ 0x3c
 800220a:	221f      	movs	r2, #31
 800220c:	fa02 f303 	lsl.w	r3, r2, r3
 8002210:	43db      	mvns	r3, r3
 8002212:	4019      	ands	r1, r3
 8002214:	683b      	ldr	r3, [r7, #0]
 8002216:	6818      	ldr	r0, [r3, #0]
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	685a      	ldr	r2, [r3, #4]
 800221c:	4613      	mov	r3, r2
 800221e:	005b      	lsls	r3, r3, #1
 8002220:	4413      	add	r3, r2
 8002222:	005b      	lsls	r3, r3, #1
 8002224:	3b3c      	subs	r3, #60	@ 0x3c
 8002226:	fa00 f203 	lsl.w	r2, r0, r3
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	430a      	orrs	r2, r1
 8002230:	639a      	str	r2, [r3, #56]	@ 0x38
 8002232:	e01d      	b.n	8002270 <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	685a      	ldr	r2, [r3, #4]
 800223e:	4613      	mov	r3, r2
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	4413      	add	r3, r2
 8002244:	005b      	lsls	r3, r3, #1
 8002246:	3b5a      	subs	r3, #90	@ 0x5a
 8002248:	221f      	movs	r2, #31
 800224a:	fa02 f303 	lsl.w	r3, r2, r3
 800224e:	43db      	mvns	r3, r3
 8002250:	4019      	ands	r1, r3
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	6818      	ldr	r0, [r3, #0]
 8002256:	683b      	ldr	r3, [r7, #0]
 8002258:	685a      	ldr	r2, [r3, #4]
 800225a:	4613      	mov	r3, r2
 800225c:	005b      	lsls	r3, r3, #1
 800225e:	4413      	add	r3, r2
 8002260:	005b      	lsls	r3, r3, #1
 8002262:	3b5a      	subs	r3, #90	@ 0x5a
 8002264:	fa00 f203 	lsl.w	r2, r0, r3
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	430a      	orrs	r2, r1
 800226e:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	689b      	ldr	r3, [r3, #8]
 8002276:	f003 030c 	and.w	r3, r3, #12
 800227a:	2b00      	cmp	r3, #0
 800227c:	f040 80e5 	bne.w	800244a <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	2b09      	cmp	r3, #9
 8002286:	d91c      	bls.n	80022c2 <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	6999      	ldr	r1, [r3, #24]
 800228e:	683b      	ldr	r3, [r7, #0]
 8002290:	681a      	ldr	r2, [r3, #0]
 8002292:	4613      	mov	r3, r2
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	4413      	add	r3, r2
 8002298:	3b1e      	subs	r3, #30
 800229a:	2207      	movs	r2, #7
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	4019      	ands	r1, r3
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	6898      	ldr	r0, [r3, #8]
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	681a      	ldr	r2, [r3, #0]
 80022ac:	4613      	mov	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	4413      	add	r3, r2
 80022b2:	3b1e      	subs	r3, #30
 80022b4:	fa00 f203 	lsl.w	r2, r0, r3
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	430a      	orrs	r2, r1
 80022be:	619a      	str	r2, [r3, #24]
 80022c0:	e019      	b.n	80022f6 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	6959      	ldr	r1, [r3, #20]
 80022c8:	683b      	ldr	r3, [r7, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	4613      	mov	r3, r2
 80022ce:	005b      	lsls	r3, r3, #1
 80022d0:	4413      	add	r3, r2
 80022d2:	2207      	movs	r2, #7
 80022d4:	fa02 f303 	lsl.w	r3, r2, r3
 80022d8:	43db      	mvns	r3, r3
 80022da:	4019      	ands	r1, r3
 80022dc:	683b      	ldr	r3, [r7, #0]
 80022de:	6898      	ldr	r0, [r3, #8]
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681a      	ldr	r2, [r3, #0]
 80022e4:	4613      	mov	r3, r2
 80022e6:	005b      	lsls	r3, r3, #1
 80022e8:	4413      	add	r3, r2
 80022ea:	fa00 f203 	lsl.w	r2, r0, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	430a      	orrs	r2, r1
 80022f4:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	695a      	ldr	r2, [r3, #20]
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	681b      	ldr	r3, [r3, #0]
 80022fe:	68db      	ldr	r3, [r3, #12]
 8002300:	08db      	lsrs	r3, r3, #3
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	005b      	lsls	r3, r3, #1
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 800230e:	683b      	ldr	r3, [r7, #0]
 8002310:	691b      	ldr	r3, [r3, #16]
 8002312:	3b01      	subs	r3, #1
 8002314:	2b03      	cmp	r3, #3
 8002316:	d84f      	bhi.n	80023b8 <HAL_ADC_ConfigChannel+0x28c>
 8002318:	a201      	add	r2, pc, #4	@ (adr r2, 8002320 <HAL_ADC_ConfigChannel+0x1f4>)
 800231a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800231e:	bf00      	nop
 8002320:	08002331 	.word	0x08002331
 8002324:	08002353 	.word	0x08002353
 8002328:	08002375 	.word	0x08002375
 800232c:	08002397 	.word	0x08002397
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8002336:	4b99      	ldr	r3, [pc, #612]	@ (800259c <HAL_ADC_ConfigChannel+0x470>)
 8002338:	4013      	ands	r3, r2
 800233a:	683a      	ldr	r2, [r7, #0]
 800233c:	6812      	ldr	r2, [r2, #0]
 800233e:	0691      	lsls	r1, r2, #26
 8002340:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002342:	430a      	orrs	r2, r1
 8002344:	431a      	orrs	r2, r3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800234e:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002350:	e07b      	b.n	800244a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002358:	4b90      	ldr	r3, [pc, #576]	@ (800259c <HAL_ADC_ConfigChannel+0x470>)
 800235a:	4013      	ands	r3, r2
 800235c:	683a      	ldr	r2, [r7, #0]
 800235e:	6812      	ldr	r2, [r2, #0]
 8002360:	0691      	lsls	r1, r2, #26
 8002362:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002364:	430a      	orrs	r2, r1
 8002366:	431a      	orrs	r2, r3
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002370:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002372:	e06a      	b.n	800244a <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800237a:	4b88      	ldr	r3, [pc, #544]	@ (800259c <HAL_ADC_ConfigChannel+0x470>)
 800237c:	4013      	ands	r3, r2
 800237e:	683a      	ldr	r2, [r7, #0]
 8002380:	6812      	ldr	r2, [r2, #0]
 8002382:	0691      	lsls	r1, r2, #26
 8002384:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002386:	430a      	orrs	r2, r1
 8002388:	431a      	orrs	r2, r3
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002392:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002394:	e059      	b.n	800244a <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800239c:	4b7f      	ldr	r3, [pc, #508]	@ (800259c <HAL_ADC_ConfigChannel+0x470>)
 800239e:	4013      	ands	r3, r2
 80023a0:	683a      	ldr	r2, [r7, #0]
 80023a2:	6812      	ldr	r2, [r2, #0]
 80023a4:	0691      	lsls	r1, r2, #26
 80023a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80023a8:	430a      	orrs	r2, r1
 80023aa:	431a      	orrs	r2, r3
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80023b4:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 80023b6:	e048      	b.n	800244a <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80023be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023c2:	683b      	ldr	r3, [r7, #0]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	069b      	lsls	r3, r3, #26
 80023c8:	429a      	cmp	r2, r3
 80023ca:	d107      	bne.n	80023dc <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023da:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80023e2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	069b      	lsls	r3, r3, #26
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d107      	bne.n	8002400 <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80023fe:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002406:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800240a:	683b      	ldr	r3, [r7, #0]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	069b      	lsls	r3, r3, #26
 8002410:	429a      	cmp	r2, r3
 8002412:	d107      	bne.n	8002424 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002422:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800242a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800242e:	683b      	ldr	r3, [r7, #0]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	069b      	lsls	r3, r3, #26
 8002434:	429a      	cmp	r2, r3
 8002436:	d107      	bne.n	8002448 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 800243e:	687b      	ldr	r3, [r7, #4]
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002446:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002448:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	689b      	ldr	r3, [r3, #8]
 8002450:	f003 0303 	and.w	r3, r3, #3
 8002454:	2b01      	cmp	r3, #1
 8002456:	d108      	bne.n	800246a <HAL_ADC_ConfigChannel+0x33e>
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	681b      	ldr	r3, [r3, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f003 0301 	and.w	r3, r3, #1
 8002462:	2b01      	cmp	r3, #1
 8002464:	d101      	bne.n	800246a <HAL_ADC_ConfigChannel+0x33e>
 8002466:	2301      	movs	r3, #1
 8002468:	e000      	b.n	800246c <HAL_ADC_ConfigChannel+0x340>
 800246a:	2300      	movs	r3, #0
 800246c:	2b00      	cmp	r3, #0
 800246e:	f040 8131 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	68db      	ldr	r3, [r3, #12]
 8002476:	2b01      	cmp	r3, #1
 8002478:	d00f      	beq.n	800249a <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 8002482:	683b      	ldr	r3, [r7, #0]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	2201      	movs	r2, #1
 8002488:	fa02 f303 	lsl.w	r3, r2, r3
 800248c:	43da      	mvns	r2, r3
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	400a      	ands	r2, r1
 8002494:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002498:	e049      	b.n	800252e <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	2201      	movs	r2, #1
 80024a8:	409a      	lsls	r2, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	2b09      	cmp	r3, #9
 80024ba:	d91c      	bls.n	80024f6 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	6999      	ldr	r1, [r3, #24]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	681a      	ldr	r2, [r3, #0]
 80024c6:	4613      	mov	r3, r2
 80024c8:	005b      	lsls	r3, r3, #1
 80024ca:	4413      	add	r3, r2
 80024cc:	3b1b      	subs	r3, #27
 80024ce:	2207      	movs	r2, #7
 80024d0:	fa02 f303 	lsl.w	r3, r2, r3
 80024d4:	43db      	mvns	r3, r3
 80024d6:	4019      	ands	r1, r3
 80024d8:	683b      	ldr	r3, [r7, #0]
 80024da:	6898      	ldr	r0, [r3, #8]
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681a      	ldr	r2, [r3, #0]
 80024e0:	4613      	mov	r3, r2
 80024e2:	005b      	lsls	r3, r3, #1
 80024e4:	4413      	add	r3, r2
 80024e6:	3b1b      	subs	r3, #27
 80024e8:	fa00 f203 	lsl.w	r2, r0, r3
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	430a      	orrs	r2, r1
 80024f2:	619a      	str	r2, [r3, #24]
 80024f4:	e01b      	b.n	800252e <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	6959      	ldr	r1, [r3, #20]
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	1c5a      	adds	r2, r3, #1
 8002502:	4613      	mov	r3, r2
 8002504:	005b      	lsls	r3, r3, #1
 8002506:	4413      	add	r3, r2
 8002508:	2207      	movs	r2, #7
 800250a:	fa02 f303 	lsl.w	r3, r2, r3
 800250e:	43db      	mvns	r3, r3
 8002510:	4019      	ands	r1, r3
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	6898      	ldr	r0, [r3, #8]
 8002516:	683b      	ldr	r3, [r7, #0]
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	1c5a      	adds	r2, r3, #1
 800251c:	4613      	mov	r3, r2
 800251e:	005b      	lsls	r3, r3, #1
 8002520:	4413      	add	r3, r2
 8002522:	fa00 f203 	lsl.w	r2, r0, r3
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	430a      	orrs	r2, r1
 800252c:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002536:	d004      	beq.n	8002542 <HAL_ADC_ConfigChannel+0x416>
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	4a18      	ldr	r2, [pc, #96]	@ (80025a0 <HAL_ADC_ConfigChannel+0x474>)
 800253e:	4293      	cmp	r3, r2
 8002540:	d101      	bne.n	8002546 <HAL_ADC_ConfigChannel+0x41a>
 8002542:	4b18      	ldr	r3, [pc, #96]	@ (80025a4 <HAL_ADC_ConfigChannel+0x478>)
 8002544:	e000      	b.n	8002548 <HAL_ADC_ConfigChannel+0x41c>
 8002546:	4b18      	ldr	r3, [pc, #96]	@ (80025a8 <HAL_ADC_ConfigChannel+0x47c>)
 8002548:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800254a:	683b      	ldr	r3, [r7, #0]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	2b10      	cmp	r3, #16
 8002550:	d105      	bne.n	800255e <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002552:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002554:	689b      	ldr	r3, [r3, #8]
 8002556:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 800255a:	2b00      	cmp	r3, #0
 800255c:	d015      	beq.n	800258a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 8002562:	2b11      	cmp	r3, #17
 8002564:	d105      	bne.n	8002572 <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002566:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002568:	689b      	ldr	r3, [r3, #8]
 800256a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800256e:	2b00      	cmp	r3, #0
 8002570:	d00b      	beq.n	800258a <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002572:	683b      	ldr	r3, [r7, #0]
 8002574:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002576:	2b12      	cmp	r3, #18
 8002578:	f040 80ac 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 800257c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002584:	2b00      	cmp	r3, #0
 8002586:	f040 80a5 	bne.w	80026d4 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002592:	d10b      	bne.n	80025ac <HAL_ADC_ConfigChannel+0x480>
 8002594:	4b02      	ldr	r3, [pc, #8]	@ (80025a0 <HAL_ADC_ConfigChannel+0x474>)
 8002596:	60fb      	str	r3, [r7, #12]
 8002598:	e023      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x4b6>
 800259a:	bf00      	nop
 800259c:	83fff000 	.word	0x83fff000
 80025a0:	50000100 	.word	0x50000100
 80025a4:	50000300 	.word	0x50000300
 80025a8:	50000700 	.word	0x50000700
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a4e      	ldr	r2, [pc, #312]	@ (80026ec <HAL_ADC_ConfigChannel+0x5c0>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d103      	bne.n	80025be <HAL_ADC_ConfigChannel+0x492>
 80025b6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025ba:	60fb      	str	r3, [r7, #12]
 80025bc:	e011      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x4b6>
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a4b      	ldr	r2, [pc, #300]	@ (80026f0 <HAL_ADC_ConfigChannel+0x5c4>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d102      	bne.n	80025ce <HAL_ADC_ConfigChannel+0x4a2>
 80025c8:	4b4a      	ldr	r3, [pc, #296]	@ (80026f4 <HAL_ADC_ConfigChannel+0x5c8>)
 80025ca:	60fb      	str	r3, [r7, #12]
 80025cc:	e009      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x4b6>
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	4a48      	ldr	r2, [pc, #288]	@ (80026f4 <HAL_ADC_ConfigChannel+0x5c8>)
 80025d4:	4293      	cmp	r3, r2
 80025d6:	d102      	bne.n	80025de <HAL_ADC_ConfigChannel+0x4b2>
 80025d8:	4b45      	ldr	r3, [pc, #276]	@ (80026f0 <HAL_ADC_ConfigChannel+0x5c4>)
 80025da:	60fb      	str	r3, [r7, #12]
 80025dc:	e001      	b.n	80025e2 <HAL_ADC_ConfigChannel+0x4b6>
 80025de:	2300      	movs	r3, #0
 80025e0:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	689b      	ldr	r3, [r3, #8]
 80025e8:	f003 0303 	and.w	r3, r3, #3
 80025ec:	2b01      	cmp	r3, #1
 80025ee:	d108      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x4d6>
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	f003 0301 	and.w	r3, r3, #1
 80025fa:	2b01      	cmp	r3, #1
 80025fc:	d101      	bne.n	8002602 <HAL_ADC_ConfigChannel+0x4d6>
 80025fe:	2301      	movs	r3, #1
 8002600:	e000      	b.n	8002604 <HAL_ADC_ConfigChannel+0x4d8>
 8002602:	2300      	movs	r3, #0
 8002604:	2b00      	cmp	r3, #0
 8002606:	d150      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8002608:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800260a:	2b00      	cmp	r3, #0
 800260c:	d010      	beq.n	8002630 <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f003 0303 	and.w	r3, r3, #3
 8002616:	2b01      	cmp	r3, #1
 8002618:	d107      	bne.n	800262a <HAL_ADC_ConfigChannel+0x4fe>
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	f003 0301 	and.w	r3, r3, #1
 8002622:	2b01      	cmp	r3, #1
 8002624:	d101      	bne.n	800262a <HAL_ADC_ConfigChannel+0x4fe>
 8002626:	2301      	movs	r3, #1
 8002628:	e000      	b.n	800262c <HAL_ADC_ConfigChannel+0x500>
 800262a:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800262c:	2b00      	cmp	r3, #0
 800262e:	d13c      	bne.n	80026aa <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002630:	683b      	ldr	r3, [r7, #0]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	2b10      	cmp	r3, #16
 8002636:	d11d      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x548>
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002640:	d118      	bne.n	8002674 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 8002642:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002644:	689b      	ldr	r3, [r3, #8]
 8002646:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 800264a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800264c:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800264e:	4b2a      	ldr	r3, [pc, #168]	@ (80026f8 <HAL_ADC_ConfigChannel+0x5cc>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	4a2a      	ldr	r2, [pc, #168]	@ (80026fc <HAL_ADC_ConfigChannel+0x5d0>)
 8002654:	fba2 2303 	umull	r2, r3, r2, r3
 8002658:	0c9a      	lsrs	r2, r3, #18
 800265a:	4613      	mov	r3, r2
 800265c:	009b      	lsls	r3, r3, #2
 800265e:	4413      	add	r3, r2
 8002660:	005b      	lsls	r3, r3, #1
 8002662:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002664:	e002      	b.n	800266c <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002666:	68bb      	ldr	r3, [r7, #8]
 8002668:	3b01      	subs	r3, #1
 800266a:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d1f9      	bne.n	8002666 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002672:	e02e      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b11      	cmp	r3, #17
 800267a:	d10b      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x568>
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002684:	d106      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002686:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800268e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002690:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002692:	e01e      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	2b12      	cmp	r3, #18
 800269a:	d11a      	bne.n	80026d2 <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 800269c:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 80026a4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80026a6:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026a8:	e013      	b.n	80026d2 <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026ae:	f043 0220 	orr.w	r2, r3, #32
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 80026b6:	2301      	movs	r3, #1
 80026b8:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80026bc:	e00a      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80026be:	687b      	ldr	r3, [r7, #4]
 80026c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80026c2:	f043 0220 	orr.w	r2, r3, #32
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80026ca:	2301      	movs	r3, #1
 80026cc:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 80026d0:	e000      	b.n	80026d4 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80026d2:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	2200      	movs	r2, #0
 80026d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80026dc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 80026e0:	4618      	mov	r0, r3
 80026e2:	376c      	adds	r7, #108	@ 0x6c
 80026e4:	46bd      	mov	sp, r7
 80026e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ea:	4770      	bx	lr
 80026ec:	50000100 	.word	0x50000100
 80026f0:	50000400 	.word	0x50000400
 80026f4:	50000500 	.word	0x50000500
 80026f8:	20000000 	.word	0x20000000
 80026fc:	431bde83 	.word	0x431bde83

08002700 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 8002700:	b480      	push	{r7}
 8002702:	b099      	sub	sp, #100	@ 0x64
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
 8002708:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800270a:	2300      	movs	r3, #0
 800270c:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002718:	d102      	bne.n	8002720 <HAL_ADCEx_MultiModeConfigChannel+0x20>
 800271a:	4b6d      	ldr	r3, [pc, #436]	@ (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 800271c:	60bb      	str	r3, [r7, #8]
 800271e:	e01a      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4a6a      	ldr	r2, [pc, #424]	@ (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002726:	4293      	cmp	r3, r2
 8002728:	d103      	bne.n	8002732 <HAL_ADCEx_MultiModeConfigChannel+0x32>
 800272a:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800272e:	60bb      	str	r3, [r7, #8]
 8002730:	e011      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4a67      	ldr	r2, [pc, #412]	@ (80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 8002738:	4293      	cmp	r3, r2
 800273a:	d102      	bne.n	8002742 <HAL_ADCEx_MultiModeConfigChannel+0x42>
 800273c:	4b66      	ldr	r3, [pc, #408]	@ (80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 800273e:	60bb      	str	r3, [r7, #8]
 8002740:	e009      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4a64      	ldr	r2, [pc, #400]	@ (80028d8 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002748:	4293      	cmp	r3, r2
 800274a:	d102      	bne.n	8002752 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800274c:	4b61      	ldr	r3, [pc, #388]	@ (80028d4 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800274e:	60bb      	str	r3, [r7, #8]
 8002750:	e001      	b.n	8002756 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 8002752:	2300      	movs	r3, #0
 8002754:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d101      	bne.n	8002760 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e0b0      	b.n	80028c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002766:	2b01      	cmp	r3, #1
 8002768:	d101      	bne.n	800276e <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 800276a:	2302      	movs	r3, #2
 800276c:	e0a9      	b.n	80028c2 <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2201      	movs	r2, #1
 8002772:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	689b      	ldr	r3, [r3, #8]
 800277c:	f003 0304 	and.w	r3, r3, #4
 8002780:	2b00      	cmp	r3, #0
 8002782:	f040 808d 	bne.w	80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002786:	68bb      	ldr	r3, [r7, #8]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0304 	and.w	r3, r3, #4
 800278e:	2b00      	cmp	r3, #0
 8002790:	f040 8086 	bne.w	80028a0 <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800279c:	d004      	beq.n	80027a8 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	4a4b      	ldr	r2, [pc, #300]	@ (80028d0 <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80027a4:	4293      	cmp	r3, r2
 80027a6:	d101      	bne.n	80027ac <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80027a8:	4b4c      	ldr	r3, [pc, #304]	@ (80028dc <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 80027aa:	e000      	b.n	80027ae <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80027ac:	4b4c      	ldr	r3, [pc, #304]	@ (80028e0 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 80027ae:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d040      	beq.n	800283a <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 80027b8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80027c0:	683b      	ldr	r3, [r7, #0]
 80027c2:	6859      	ldr	r1, [r3, #4]
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80027ca:	035b      	lsls	r3, r3, #13
 80027cc:	430b      	orrs	r3, r1
 80027ce:	431a      	orrs	r2, r3
 80027d0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80027d2:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	689b      	ldr	r3, [r3, #8]
 80027da:	f003 0303 	and.w	r3, r3, #3
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d108      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f003 0301 	and.w	r3, r3, #1
 80027ec:	2b01      	cmp	r3, #1
 80027ee:	d101      	bne.n	80027f4 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80027f0:	2301      	movs	r3, #1
 80027f2:	e000      	b.n	80027f6 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80027f4:	2300      	movs	r3, #0
 80027f6:	2b00      	cmp	r3, #0
 80027f8:	d15c      	bne.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80027fa:	68bb      	ldr	r3, [r7, #8]
 80027fc:	689b      	ldr	r3, [r3, #8]
 80027fe:	f003 0303 	and.w	r3, r3, #3
 8002802:	2b01      	cmp	r3, #1
 8002804:	d107      	bne.n	8002816 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002806:	68bb      	ldr	r3, [r7, #8]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0301 	and.w	r3, r3, #1
 800280e:	2b01      	cmp	r3, #1
 8002810:	d101      	bne.n	8002816 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 8002812:	2301      	movs	r3, #1
 8002814:	e000      	b.n	8002818 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 8002816:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002818:	2b00      	cmp	r3, #0
 800281a:	d14b      	bne.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 800281c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800281e:	689b      	ldr	r3, [r3, #8]
 8002820:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002824:	f023 030f 	bic.w	r3, r3, #15
 8002828:	683a      	ldr	r2, [r7, #0]
 800282a:	6811      	ldr	r1, [r2, #0]
 800282c:	683a      	ldr	r2, [r7, #0]
 800282e:	6892      	ldr	r2, [r2, #8]
 8002830:	430a      	orrs	r2, r1
 8002832:	431a      	orrs	r2, r3
 8002834:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002836:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002838:	e03c      	b.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 800283a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800283c:	689b      	ldr	r3, [r3, #8]
 800283e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002842:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002844:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 0303 	and.w	r3, r3, #3
 8002850:	2b01      	cmp	r3, #1
 8002852:	d108      	bne.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	f003 0301 	and.w	r3, r3, #1
 800285e:	2b01      	cmp	r3, #1
 8002860:	d101      	bne.n	8002866 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002862:	2301      	movs	r3, #1
 8002864:	e000      	b.n	8002868 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002866:	2300      	movs	r3, #0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d123      	bne.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 800286c:	68bb      	ldr	r3, [r7, #8]
 800286e:	689b      	ldr	r3, [r3, #8]
 8002870:	f003 0303 	and.w	r3, r3, #3
 8002874:	2b01      	cmp	r3, #1
 8002876:	d107      	bne.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002878:	68bb      	ldr	r3, [r7, #8]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f003 0301 	and.w	r3, r3, #1
 8002880:	2b01      	cmp	r3, #1
 8002882:	d101      	bne.n	8002888 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002884:	2301      	movs	r3, #1
 8002886:	e000      	b.n	800288a <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002888:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 800288a:	2b00      	cmp	r3, #0
 800288c:	d112      	bne.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 800288e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002890:	689b      	ldr	r3, [r3, #8]
 8002892:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002896:	f023 030f 	bic.w	r3, r3, #15
 800289a:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800289c:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800289e:	e009      	b.n	80028b4 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80028a4:	f043 0220 	orr.w	r2, r3, #32
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 80028ac:	2301      	movs	r3, #1
 80028ae:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 80028b2:	e000      	b.n	80028b6 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80028b4:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2200      	movs	r2, #0
 80028ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 80028be:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 80028c2:	4618      	mov	r0, r3
 80028c4:	3764      	adds	r7, #100	@ 0x64
 80028c6:	46bd      	mov	sp, r7
 80028c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028cc:	4770      	bx	lr
 80028ce:	bf00      	nop
 80028d0:	50000100 	.word	0x50000100
 80028d4:	50000400 	.word	0x50000400
 80028d8:	50000500 	.word	0x50000500
 80028dc:	50000300 	.word	0x50000300
 80028e0:	50000700 	.word	0x50000700

080028e4 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 80028e4:	b580      	push	{r7, lr}
 80028e6:	b084      	sub	sp, #16
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80028ec:	2300      	movs	r3, #0
 80028ee:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	f003 0303 	and.w	r3, r3, #3
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d108      	bne.n	8002910 <ADC_Enable+0x2c>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f003 0301 	and.w	r3, r3, #1
 8002908:	2b01      	cmp	r3, #1
 800290a:	d101      	bne.n	8002910 <ADC_Enable+0x2c>
 800290c:	2301      	movs	r3, #1
 800290e:	e000      	b.n	8002912 <ADC_Enable+0x2e>
 8002910:	2300      	movs	r3, #0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d143      	bne.n	800299e <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	689a      	ldr	r2, [r3, #8]
 800291c:	4b22      	ldr	r3, [pc, #136]	@ (80029a8 <ADC_Enable+0xc4>)
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	d00d      	beq.n	8002940 <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002928:	f043 0210 	orr.w	r2, r3, #16
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002934:	f043 0201 	orr.w	r2, r3, #1
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 800293c:	2301      	movs	r3, #1
 800293e:	e02f      	b.n	80029a0 <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	689a      	ldr	r2, [r3, #8]
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	f042 0201 	orr.w	r2, r2, #1
 800294e:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002950:	f7fe fd52 	bl	80013f8 <HAL_GetTick>
 8002954:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002956:	e01b      	b.n	8002990 <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002958:	f7fe fd4e 	bl	80013f8 <HAL_GetTick>
 800295c:	4602      	mov	r2, r0
 800295e:	68fb      	ldr	r3, [r7, #12]
 8002960:	1ad3      	subs	r3, r2, r3
 8002962:	2b02      	cmp	r3, #2
 8002964:	d914      	bls.n	8002990 <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0301 	and.w	r3, r3, #1
 8002970:	2b01      	cmp	r3, #1
 8002972:	d00d      	beq.n	8002990 <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002978:	f043 0210 	orr.w	r2, r3, #16
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002984:	f043 0201 	orr.w	r2, r3, #1
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 800298c:	2301      	movs	r3, #1
 800298e:	e007      	b.n	80029a0 <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	f003 0301 	and.w	r3, r3, #1
 800299a:	2b01      	cmp	r3, #1
 800299c:	d1dc      	bne.n	8002958 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800299e:	2300      	movs	r3, #0
}
 80029a0:	4618      	mov	r0, r3
 80029a2:	3710      	adds	r7, #16
 80029a4:	46bd      	mov	sp, r7
 80029a6:	bd80      	pop	{r7, pc}
 80029a8:	8000003f 	.word	0x8000003f

080029ac <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 80029ac:	b580      	push	{r7, lr}
 80029ae:	b084      	sub	sp, #16
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80029b4:	2300      	movs	r3, #0
 80029b6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	681b      	ldr	r3, [r3, #0]
 80029bc:	689b      	ldr	r3, [r3, #8]
 80029be:	f003 0303 	and.w	r3, r3, #3
 80029c2:	2b01      	cmp	r3, #1
 80029c4:	d108      	bne.n	80029d8 <ADC_Disable+0x2c>
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	f003 0301 	and.w	r3, r3, #1
 80029d0:	2b01      	cmp	r3, #1
 80029d2:	d101      	bne.n	80029d8 <ADC_Disable+0x2c>
 80029d4:	2301      	movs	r3, #1
 80029d6:	e000      	b.n	80029da <ADC_Disable+0x2e>
 80029d8:	2300      	movs	r3, #0
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d047      	beq.n	8002a6e <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	689b      	ldr	r3, [r3, #8]
 80029e4:	f003 030d 	and.w	r3, r3, #13
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d10f      	bne.n	8002a0c <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	689a      	ldr	r2, [r3, #8]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0202 	orr.w	r2, r2, #2
 80029fa:	609a      	str	r2, [r3, #8]
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2203      	movs	r2, #3
 8002a02:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002a04:	f7fe fcf8 	bl	80013f8 <HAL_GetTick>
 8002a08:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a0a:	e029      	b.n	8002a60 <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	f043 0210 	orr.w	r2, r3, #16
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a1c:	f043 0201 	orr.w	r2, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e023      	b.n	8002a70 <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002a28:	f7fe fce6 	bl	80013f8 <HAL_GetTick>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	1ad3      	subs	r3, r2, r3
 8002a32:	2b02      	cmp	r3, #2
 8002a34:	d914      	bls.n	8002a60 <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	689b      	ldr	r3, [r3, #8]
 8002a3c:	f003 0301 	and.w	r3, r3, #1
 8002a40:	2b01      	cmp	r3, #1
 8002a42:	d10d      	bne.n	8002a60 <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a48:	f043 0210 	orr.w	r2, r3, #16
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a54:	f043 0201 	orr.w	r2, r3, #1
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	e007      	b.n	8002a70 <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	689b      	ldr	r3, [r3, #8]
 8002a66:	f003 0301 	and.w	r3, r3, #1
 8002a6a:	2b01      	cmp	r3, #1
 8002a6c:	d0dc      	beq.n	8002a28 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002a6e:	2300      	movs	r3, #0
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	3710      	adds	r7, #16
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}

08002a78 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b085      	sub	sp, #20
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	f003 0307 	and.w	r3, r3, #7
 8002a86:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a88:	4b0c      	ldr	r3, [pc, #48]	@ (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a8e:	68ba      	ldr	r2, [r7, #8]
 8002a90:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a94:	4013      	ands	r3, r2
 8002a96:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a9c:	68bb      	ldr	r3, [r7, #8]
 8002a9e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aa4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aa8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aaa:	4a04      	ldr	r2, [pc, #16]	@ (8002abc <__NVIC_SetPriorityGrouping+0x44>)
 8002aac:	68bb      	ldr	r3, [r7, #8]
 8002aae:	60d3      	str	r3, [r2, #12]
}
 8002ab0:	bf00      	nop
 8002ab2:	3714      	adds	r7, #20
 8002ab4:	46bd      	mov	sp, r7
 8002ab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aba:	4770      	bx	lr
 8002abc:	e000ed00 	.word	0xe000ed00

08002ac0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac0:	b480      	push	{r7}
 8002ac2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac4:	4b04      	ldr	r3, [pc, #16]	@ (8002ad8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	0a1b      	lsrs	r3, r3, #8
 8002aca:	f003 0307 	and.w	r3, r3, #7
}
 8002ace:	4618      	mov	r0, r3
 8002ad0:	46bd      	mov	sp, r7
 8002ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad6:	4770      	bx	lr
 8002ad8:	e000ed00 	.word	0xe000ed00

08002adc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db0b      	blt.n	8002b06 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	4907      	ldr	r1, [pc, #28]	@ (8002b14 <__NVIC_EnableIRQ+0x38>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b06:	bf00      	nop
 8002b08:	370c      	adds	r7, #12
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b10:	4770      	bx	lr
 8002b12:	bf00      	nop
 8002b14:	e000e100 	.word	0xe000e100

08002b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	db0a      	blt.n	8002b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	490c      	ldr	r1, [pc, #48]	@ (8002b64 <__NVIC_SetPriority+0x4c>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b40:	e00a      	b.n	8002b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4908      	ldr	r1, [pc, #32]	@ (8002b68 <__NVIC_SetPriority+0x50>)
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	0112      	lsls	r2, r2, #4
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	440b      	add	r3, r1
 8002b56:	761a      	strb	r2, [r3, #24]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000e100 	.word	0xe000e100
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	@ 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	bf28      	it	cs
 8002b8a:	2304      	movcs	r3, #4
 8002b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d902      	bls.n	8002b9c <NVIC_EncodePriority+0x30>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3b03      	subs	r3, #3
 8002b9a:	e000      	b.n	8002b9e <NVIC_EncodePriority+0x32>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	401a      	ands	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	4313      	orrs	r3, r2
         );
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3724      	adds	r7, #36	@ 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd0:	4770      	bx	lr
	...

08002bd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	b082      	sub	sp, #8
 8002bd8:	af00      	add	r7, sp, #0
 8002bda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	3b01      	subs	r3, #1
 8002be0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be4:	d301      	bcc.n	8002bea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be6:	2301      	movs	r3, #1
 8002be8:	e00f      	b.n	8002c0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bea:	4a0a      	ldr	r2, [pc, #40]	@ (8002c14 <SysTick_Config+0x40>)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bf2:	210f      	movs	r1, #15
 8002bf4:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf8:	f7ff ff8e 	bl	8002b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bfc:	4b05      	ldr	r3, [pc, #20]	@ (8002c14 <SysTick_Config+0x40>)
 8002bfe:	2200      	movs	r2, #0
 8002c00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c02:	4b04      	ldr	r3, [pc, #16]	@ (8002c14 <SysTick_Config+0x40>)
 8002c04:	2207      	movs	r2, #7
 8002c06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3708      	adds	r7, #8
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bd80      	pop	{r7, pc}
 8002c12:	bf00      	nop
 8002c14:	e000e010 	.word	0xe000e010

08002c18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c20:	6878      	ldr	r0, [r7, #4]
 8002c22:	f7ff ff29 	bl	8002a78 <__NVIC_SetPriorityGrouping>
}
 8002c26:	bf00      	nop
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}

08002c2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c2e:	b580      	push	{r7, lr}
 8002c30:	b086      	sub	sp, #24
 8002c32:	af00      	add	r7, sp, #0
 8002c34:	4603      	mov	r3, r0
 8002c36:	60b9      	str	r1, [r7, #8]
 8002c38:	607a      	str	r2, [r7, #4]
 8002c3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c3c:	2300      	movs	r3, #0
 8002c3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c40:	f7ff ff3e 	bl	8002ac0 <__NVIC_GetPriorityGrouping>
 8002c44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	68b9      	ldr	r1, [r7, #8]
 8002c4a:	6978      	ldr	r0, [r7, #20]
 8002c4c:	f7ff ff8e 	bl	8002b6c <NVIC_EncodePriority>
 8002c50:	4602      	mov	r2, r0
 8002c52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c56:	4611      	mov	r1, r2
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7ff ff5d 	bl	8002b18 <__NVIC_SetPriority>
}
 8002c5e:	bf00      	nop
 8002c60:	3718      	adds	r7, #24
 8002c62:	46bd      	mov	sp, r7
 8002c64:	bd80      	pop	{r7, pc}

08002c66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c66:	b580      	push	{r7, lr}
 8002c68:	b082      	sub	sp, #8
 8002c6a:	af00      	add	r7, sp, #0
 8002c6c:	4603      	mov	r3, r0
 8002c6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7ff ff31 	bl	8002adc <__NVIC_EnableIRQ>
}
 8002c7a:	bf00      	nop
 8002c7c:	3708      	adds	r7, #8
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bd80      	pop	{r7, pc}

08002c82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c82:	b580      	push	{r7, lr}
 8002c84:	b082      	sub	sp, #8
 8002c86:	af00      	add	r7, sp, #0
 8002c88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c8a:	6878      	ldr	r0, [r7, #4]
 8002c8c:	f7ff ffa2 	bl	8002bd4 <SysTick_Config>
 8002c90:	4603      	mov	r3, r0
}
 8002c92:	4618      	mov	r0, r3
 8002c94:	3708      	adds	r7, #8
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}
	...

08002c9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b087      	sub	sp, #28
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
 8002ca4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002caa:	e160      	b.n	8002f6e <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	681a      	ldr	r2, [r3, #0]
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	697b      	ldr	r3, [r7, #20]
 8002cb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	2b00      	cmp	r3, #0
 8002cc0:	f000 8152 	beq.w	8002f68 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	f003 0303 	and.w	r3, r3, #3
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d005      	beq.n	8002cdc <HAL_GPIO_Init+0x40>
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d130      	bne.n	8002d3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	689b      	ldr	r3, [r3, #8]
 8002ce0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002ce2:	697b      	ldr	r3, [r7, #20]
 8002ce4:	005b      	lsls	r3, r3, #1
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8002cec:	43db      	mvns	r3, r3
 8002cee:	693a      	ldr	r2, [r7, #16]
 8002cf0:	4013      	ands	r3, r2
 8002cf2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	68da      	ldr	r2, [r3, #12]
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	005b      	lsls	r3, r3, #1
 8002cfc:	fa02 f303 	lsl.w	r3, r2, r3
 8002d00:	693a      	ldr	r2, [r7, #16]
 8002d02:	4313      	orrs	r3, r2
 8002d04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	693a      	ldr	r2, [r7, #16]
 8002d0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	685b      	ldr	r3, [r3, #4]
 8002d10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d12:	2201      	movs	r2, #1
 8002d14:	697b      	ldr	r3, [r7, #20]
 8002d16:	fa02 f303 	lsl.w	r3, r2, r3
 8002d1a:	43db      	mvns	r3, r3
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	4013      	ands	r3, r2
 8002d20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	685b      	ldr	r3, [r3, #4]
 8002d26:	091b      	lsrs	r3, r3, #4
 8002d28:	f003 0201 	and.w	r2, r3, #1
 8002d2c:	697b      	ldr	r3, [r7, #20]
 8002d2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d32:	693a      	ldr	r2, [r7, #16]
 8002d34:	4313      	orrs	r3, r2
 8002d36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	693a      	ldr	r2, [r7, #16]
 8002d3c:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	f003 0303 	and.w	r3, r3, #3
 8002d46:	2b03      	cmp	r3, #3
 8002d48:	d017      	beq.n	8002d7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	68db      	ldr	r3, [r3, #12]
 8002d4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002d50:	697b      	ldr	r3, [r7, #20]
 8002d52:	005b      	lsls	r3, r3, #1
 8002d54:	2203      	movs	r2, #3
 8002d56:	fa02 f303 	lsl.w	r3, r2, r3
 8002d5a:	43db      	mvns	r3, r3
 8002d5c:	693a      	ldr	r2, [r7, #16]
 8002d5e:	4013      	ands	r3, r2
 8002d60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002d62:	683b      	ldr	r3, [r7, #0]
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	697b      	ldr	r3, [r7, #20]
 8002d68:	005b      	lsls	r3, r3, #1
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	693a      	ldr	r2, [r7, #16]
 8002d70:	4313      	orrs	r3, r2
 8002d72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	693a      	ldr	r2, [r7, #16]
 8002d78:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	f003 0303 	and.w	r3, r3, #3
 8002d82:	2b02      	cmp	r3, #2
 8002d84:	d123      	bne.n	8002dce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002d86:	697b      	ldr	r3, [r7, #20]
 8002d88:	08da      	lsrs	r2, r3, #3
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	3208      	adds	r2, #8
 8002d8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	f003 0307 	and.w	r3, r3, #7
 8002d9a:	009b      	lsls	r3, r3, #2
 8002d9c:	220f      	movs	r2, #15
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	43db      	mvns	r3, r3
 8002da4:	693a      	ldr	r2, [r7, #16]
 8002da6:	4013      	ands	r3, r2
 8002da8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	691a      	ldr	r2, [r3, #16]
 8002dae:	697b      	ldr	r3, [r7, #20]
 8002db0:	f003 0307 	and.w	r3, r3, #7
 8002db4:	009b      	lsls	r3, r3, #2
 8002db6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dba:	693a      	ldr	r2, [r7, #16]
 8002dbc:	4313      	orrs	r3, r2
 8002dbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002dc0:	697b      	ldr	r3, [r7, #20]
 8002dc2:	08da      	lsrs	r2, r3, #3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	3208      	adds	r2, #8
 8002dc8:	6939      	ldr	r1, [r7, #16]
 8002dca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	005b      	lsls	r3, r3, #1
 8002dd8:	2203      	movs	r2, #3
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43db      	mvns	r3, r3
 8002de0:	693a      	ldr	r2, [r7, #16]
 8002de2:	4013      	ands	r3, r2
 8002de4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002de6:	683b      	ldr	r3, [r7, #0]
 8002de8:	685b      	ldr	r3, [r3, #4]
 8002dea:	f003 0203 	and.w	r2, r3, #3
 8002dee:	697b      	ldr	r3, [r7, #20]
 8002df0:	005b      	lsls	r3, r3, #1
 8002df2:	fa02 f303 	lsl.w	r3, r2, r3
 8002df6:	693a      	ldr	r2, [r7, #16]
 8002df8:	4313      	orrs	r3, r2
 8002dfa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	693a      	ldr	r2, [r7, #16]
 8002e00:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002e02:	683b      	ldr	r3, [r7, #0]
 8002e04:	685b      	ldr	r3, [r3, #4]
 8002e06:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80ac 	beq.w	8002f68 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e10:	4b5e      	ldr	r3, [pc, #376]	@ (8002f8c <HAL_GPIO_Init+0x2f0>)
 8002e12:	699b      	ldr	r3, [r3, #24]
 8002e14:	4a5d      	ldr	r2, [pc, #372]	@ (8002f8c <HAL_GPIO_Init+0x2f0>)
 8002e16:	f043 0301 	orr.w	r3, r3, #1
 8002e1a:	6193      	str	r3, [r2, #24]
 8002e1c:	4b5b      	ldr	r3, [pc, #364]	@ (8002f8c <HAL_GPIO_Init+0x2f0>)
 8002e1e:	699b      	ldr	r3, [r3, #24]
 8002e20:	f003 0301 	and.w	r3, r3, #1
 8002e24:	60bb      	str	r3, [r7, #8]
 8002e26:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002e28:	4a59      	ldr	r2, [pc, #356]	@ (8002f90 <HAL_GPIO_Init+0x2f4>)
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	089b      	lsrs	r3, r3, #2
 8002e2e:	3302      	adds	r3, #2
 8002e30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e34:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002e36:	697b      	ldr	r3, [r7, #20]
 8002e38:	f003 0303 	and.w	r3, r3, #3
 8002e3c:	009b      	lsls	r3, r3, #2
 8002e3e:	220f      	movs	r2, #15
 8002e40:	fa02 f303 	lsl.w	r3, r2, r3
 8002e44:	43db      	mvns	r3, r3
 8002e46:	693a      	ldr	r2, [r7, #16]
 8002e48:	4013      	ands	r3, r2
 8002e4a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8002e52:	d025      	beq.n	8002ea0 <HAL_GPIO_Init+0x204>
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a4f      	ldr	r2, [pc, #316]	@ (8002f94 <HAL_GPIO_Init+0x2f8>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d01f      	beq.n	8002e9c <HAL_GPIO_Init+0x200>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a4e      	ldr	r2, [pc, #312]	@ (8002f98 <HAL_GPIO_Init+0x2fc>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d019      	beq.n	8002e98 <HAL_GPIO_Init+0x1fc>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a4d      	ldr	r2, [pc, #308]	@ (8002f9c <HAL_GPIO_Init+0x300>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d013      	beq.n	8002e94 <HAL_GPIO_Init+0x1f8>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a4c      	ldr	r2, [pc, #304]	@ (8002fa0 <HAL_GPIO_Init+0x304>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d00d      	beq.n	8002e90 <HAL_GPIO_Init+0x1f4>
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	4a4b      	ldr	r2, [pc, #300]	@ (8002fa4 <HAL_GPIO_Init+0x308>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d007      	beq.n	8002e8c <HAL_GPIO_Init+0x1f0>
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	4a4a      	ldr	r2, [pc, #296]	@ (8002fa8 <HAL_GPIO_Init+0x30c>)
 8002e80:	4293      	cmp	r3, r2
 8002e82:	d101      	bne.n	8002e88 <HAL_GPIO_Init+0x1ec>
 8002e84:	2306      	movs	r3, #6
 8002e86:	e00c      	b.n	8002ea2 <HAL_GPIO_Init+0x206>
 8002e88:	2307      	movs	r3, #7
 8002e8a:	e00a      	b.n	8002ea2 <HAL_GPIO_Init+0x206>
 8002e8c:	2305      	movs	r3, #5
 8002e8e:	e008      	b.n	8002ea2 <HAL_GPIO_Init+0x206>
 8002e90:	2304      	movs	r3, #4
 8002e92:	e006      	b.n	8002ea2 <HAL_GPIO_Init+0x206>
 8002e94:	2303      	movs	r3, #3
 8002e96:	e004      	b.n	8002ea2 <HAL_GPIO_Init+0x206>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e002      	b.n	8002ea2 <HAL_GPIO_Init+0x206>
 8002e9c:	2301      	movs	r3, #1
 8002e9e:	e000      	b.n	8002ea2 <HAL_GPIO_Init+0x206>
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	697a      	ldr	r2, [r7, #20]
 8002ea4:	f002 0203 	and.w	r2, r2, #3
 8002ea8:	0092      	lsls	r2, r2, #2
 8002eaa:	4093      	lsls	r3, r2
 8002eac:	693a      	ldr	r2, [r7, #16]
 8002eae:	4313      	orrs	r3, r2
 8002eb0:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8002eb2:	4937      	ldr	r1, [pc, #220]	@ (8002f90 <HAL_GPIO_Init+0x2f4>)
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	089b      	lsrs	r3, r3, #2
 8002eb8:	3302      	adds	r3, #2
 8002eba:	693a      	ldr	r2, [r7, #16]
 8002ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002ec0:	4b3a      	ldr	r3, [pc, #232]	@ (8002fac <HAL_GPIO_Init+0x310>)
 8002ec2:	689b      	ldr	r3, [r3, #8]
 8002ec4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	43db      	mvns	r3, r3
 8002eca:	693a      	ldr	r2, [r7, #16]
 8002ecc:	4013      	ands	r3, r2
 8002ece:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d003      	beq.n	8002ee4 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8002edc:	693a      	ldr	r2, [r7, #16]
 8002ede:	68fb      	ldr	r3, [r7, #12]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8002ee4:	4a31      	ldr	r2, [pc, #196]	@ (8002fac <HAL_GPIO_Init+0x310>)
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002eea:	4b30      	ldr	r3, [pc, #192]	@ (8002fac <HAL_GPIO_Init+0x310>)
 8002eec:	68db      	ldr	r3, [r3, #12]
 8002eee:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	43db      	mvns	r3, r3
 8002ef4:	693a      	ldr	r2, [r7, #16]
 8002ef6:	4013      	ands	r3, r2
 8002ef8:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d003      	beq.n	8002f0e <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 8002f06:	693a      	ldr	r2, [r7, #16]
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	4313      	orrs	r3, r2
 8002f0c:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8002f0e:	4a27      	ldr	r2, [pc, #156]	@ (8002fac <HAL_GPIO_Init+0x310>)
 8002f10:	693b      	ldr	r3, [r7, #16]
 8002f12:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002f14:	4b25      	ldr	r3, [pc, #148]	@ (8002fac <HAL_GPIO_Init+0x310>)
 8002f16:	685b      	ldr	r3, [r3, #4]
 8002f18:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	43db      	mvns	r3, r3
 8002f1e:	693a      	ldr	r2, [r7, #16]
 8002f20:	4013      	ands	r3, r2
 8002f22:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8002f24:	683b      	ldr	r3, [r7, #0]
 8002f26:	685b      	ldr	r3, [r3, #4]
 8002f28:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d003      	beq.n	8002f38 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 8002f30:	693a      	ldr	r2, [r7, #16]
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8002f38:	4a1c      	ldr	r2, [pc, #112]	@ (8002fac <HAL_GPIO_Init+0x310>)
 8002f3a:	693b      	ldr	r3, [r7, #16]
 8002f3c:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f3e:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <HAL_GPIO_Init+0x310>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	43db      	mvns	r3, r3
 8002f48:	693a      	ldr	r2, [r7, #16]
 8002f4a:	4013      	ands	r3, r2
 8002f4c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8002f4e:	683b      	ldr	r3, [r7, #0]
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8002f5a:	693a      	ldr	r2, [r7, #16]
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8002f62:	4a12      	ldr	r2, [pc, #72]	@ (8002fac <HAL_GPIO_Init+0x310>)
 8002f64:	693b      	ldr	r3, [r7, #16]
 8002f66:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8002f68:	697b      	ldr	r3, [r7, #20]
 8002f6a:	3301      	adds	r3, #1
 8002f6c:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	681a      	ldr	r2, [r3, #0]
 8002f72:	697b      	ldr	r3, [r7, #20]
 8002f74:	fa22 f303 	lsr.w	r3, r2, r3
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	f47f ae97 	bne.w	8002cac <HAL_GPIO_Init+0x10>
  }
}
 8002f7e:	bf00      	nop
 8002f80:	bf00      	nop
 8002f82:	371c      	adds	r7, #28
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr
 8002f8c:	40021000 	.word	0x40021000
 8002f90:	40010000 	.word	0x40010000
 8002f94:	48000400 	.word	0x48000400
 8002f98:	48000800 	.word	0x48000800
 8002f9c:	48000c00 	.word	0x48000c00
 8002fa0:	48001000 	.word	0x48001000
 8002fa4:	48001400 	.word	0x48001400
 8002fa8:	48001800 	.word	0x48001800
 8002fac:	40010400 	.word	0x40010400

08002fb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002fb0:	b580      	push	{r7, lr}
 8002fb2:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fbc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fc0:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002fc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fc6:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d102      	bne.n	8002fd6 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 8002fd0:	2301      	movs	r3, #1
 8002fd2:	f001 b83a 	b.w	800404a <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002fd6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002fda:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	f003 0301 	and.w	r3, r3, #1
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	f000 816f 	beq.w	80032ca <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 8002fec:	4bb5      	ldr	r3, [pc, #724]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 030c 	and.w	r3, r3, #12
 8002ff4:	2b04      	cmp	r3, #4
 8002ff6:	d00c      	beq.n	8003012 <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ff8:	4bb2      	ldr	r3, [pc, #712]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8002ffa:	685b      	ldr	r3, [r3, #4]
 8002ffc:	f003 030c 	and.w	r3, r3, #12
 8003000:	2b08      	cmp	r3, #8
 8003002:	d15c      	bne.n	80030be <HAL_RCC_OscConfig+0x10e>
 8003004:	4baf      	ldr	r3, [pc, #700]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 800300c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003010:	d155      	bne.n	80030be <HAL_RCC_OscConfig+0x10e>
 8003012:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003016:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800301a:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 800301e:	fa93 f3a3 	rbit	r3, r3
 8003022:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003026:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800302a:	fab3 f383 	clz	r3, r3
 800302e:	b2db      	uxtb	r3, r3
 8003030:	095b      	lsrs	r3, r3, #5
 8003032:	b2db      	uxtb	r3, r3
 8003034:	f043 0301 	orr.w	r3, r3, #1
 8003038:	b2db      	uxtb	r3, r3
 800303a:	2b01      	cmp	r3, #1
 800303c:	d102      	bne.n	8003044 <HAL_RCC_OscConfig+0x94>
 800303e:	4ba1      	ldr	r3, [pc, #644]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	e015      	b.n	8003070 <HAL_RCC_OscConfig+0xc0>
 8003044:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003048:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800304c:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 8003050:	fa93 f3a3 	rbit	r3, r3
 8003054:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003058:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800305c:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 8003060:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003064:	fa93 f3a3 	rbit	r3, r3
 8003068:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 800306c:	4b95      	ldr	r3, [pc, #596]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 800306e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003070:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003074:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003078:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 800307c:	fa92 f2a2 	rbit	r2, r2
 8003080:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003084:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003088:	fab2 f282 	clz	r2, r2
 800308c:	b2d2      	uxtb	r2, r2
 800308e:	f042 0220 	orr.w	r2, r2, #32
 8003092:	b2d2      	uxtb	r2, r2
 8003094:	f002 021f 	and.w	r2, r2, #31
 8003098:	2101      	movs	r1, #1
 800309a:	fa01 f202 	lsl.w	r2, r1, r2
 800309e:	4013      	ands	r3, r2
 80030a0:	2b00      	cmp	r3, #0
 80030a2:	f000 8111 	beq.w	80032c8 <HAL_RCC_OscConfig+0x318>
 80030a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030aa:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	685b      	ldr	r3, [r3, #4]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	f040 8108 	bne.w	80032c8 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	f000 bfc6 	b.w	800404a <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030c2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	685b      	ldr	r3, [r3, #4]
 80030ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80030ce:	d106      	bne.n	80030de <HAL_RCC_OscConfig+0x12e>
 80030d0:	4b7c      	ldr	r3, [pc, #496]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a7b      	ldr	r2, [pc, #492]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 80030d6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030da:	6013      	str	r3, [r2, #0]
 80030dc:	e036      	b.n	800314c <HAL_RCC_OscConfig+0x19c>
 80030de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80030e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	685b      	ldr	r3, [r3, #4]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d10c      	bne.n	8003108 <HAL_RCC_OscConfig+0x158>
 80030ee:	4b75      	ldr	r3, [pc, #468]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4a74      	ldr	r2, [pc, #464]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 80030f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030f8:	6013      	str	r3, [r2, #0]
 80030fa:	4b72      	ldr	r3, [pc, #456]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	4a71      	ldr	r2, [pc, #452]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8003100:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003104:	6013      	str	r3, [r2, #0]
 8003106:	e021      	b.n	800314c <HAL_RCC_OscConfig+0x19c>
 8003108:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800310c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	685b      	ldr	r3, [r3, #4]
 8003114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003118:	d10c      	bne.n	8003134 <HAL_RCC_OscConfig+0x184>
 800311a:	4b6a      	ldr	r3, [pc, #424]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	4a69      	ldr	r2, [pc, #420]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8003120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003124:	6013      	str	r3, [r2, #0]
 8003126:	4b67      	ldr	r3, [pc, #412]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4a66      	ldr	r2, [pc, #408]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 800312c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003130:	6013      	str	r3, [r2, #0]
 8003132:	e00b      	b.n	800314c <HAL_RCC_OscConfig+0x19c>
 8003134:	4b63      	ldr	r3, [pc, #396]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	4a62      	ldr	r2, [pc, #392]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 800313a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800313e:	6013      	str	r3, [r2, #0]
 8003140:	4b60      	ldr	r3, [pc, #384]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	4a5f      	ldr	r2, [pc, #380]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 8003146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800314a:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800314c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003150:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d059      	beq.n	8003210 <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800315c:	f7fe f94c 	bl	80013f8 <HAL_GetTick>
 8003160:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003164:	e00a      	b.n	800317c <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003166:	f7fe f947 	bl	80013f8 <HAL_GetTick>
 800316a:	4602      	mov	r2, r0
 800316c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	2b64      	cmp	r3, #100	@ 0x64
 8003174:	d902      	bls.n	800317c <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003176:	2303      	movs	r3, #3
 8003178:	f000 bf67 	b.w	800404a <HAL_RCC_OscConfig+0x109a>
 800317c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003180:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003188:	fa93 f3a3 	rbit	r3, r3
 800318c:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 8003190:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003194:	fab3 f383 	clz	r3, r3
 8003198:	b2db      	uxtb	r3, r3
 800319a:	095b      	lsrs	r3, r3, #5
 800319c:	b2db      	uxtb	r3, r3
 800319e:	f043 0301 	orr.w	r3, r3, #1
 80031a2:	b2db      	uxtb	r3, r3
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d102      	bne.n	80031ae <HAL_RCC_OscConfig+0x1fe>
 80031a8:	4b46      	ldr	r3, [pc, #280]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	e015      	b.n	80031da <HAL_RCC_OscConfig+0x22a>
 80031ae:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031b2:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031b6:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 80031ba:	fa93 f3a3 	rbit	r3, r3
 80031be:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 80031c2:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031c6:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 80031ca:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 80031ce:	fa93 f3a3 	rbit	r3, r3
 80031d2:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 80031d6:	4b3b      	ldr	r3, [pc, #236]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 80031d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80031da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80031de:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 80031e2:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80031e6:	fa92 f2a2 	rbit	r2, r2
 80031ea:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80031ee:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80031f2:	fab2 f282 	clz	r2, r2
 80031f6:	b2d2      	uxtb	r2, r2
 80031f8:	f042 0220 	orr.w	r2, r2, #32
 80031fc:	b2d2      	uxtb	r2, r2
 80031fe:	f002 021f 	and.w	r2, r2, #31
 8003202:	2101      	movs	r1, #1
 8003204:	fa01 f202 	lsl.w	r2, r1, r2
 8003208:	4013      	ands	r3, r2
 800320a:	2b00      	cmp	r3, #0
 800320c:	d0ab      	beq.n	8003166 <HAL_RCC_OscConfig+0x1b6>
 800320e:	e05c      	b.n	80032ca <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003210:	f7fe f8f2 	bl	80013f8 <HAL_GetTick>
 8003214:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003218:	e00a      	b.n	8003230 <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800321a:	f7fe f8ed 	bl	80013f8 <HAL_GetTick>
 800321e:	4602      	mov	r2, r0
 8003220:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003224:	1ad3      	subs	r3, r2, r3
 8003226:	2b64      	cmp	r3, #100	@ 0x64
 8003228:	d902      	bls.n	8003230 <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 800322a:	2303      	movs	r3, #3
 800322c:	f000 bf0d 	b.w	800404a <HAL_RCC_OscConfig+0x109a>
 8003230:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003234:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003238:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 800323c:	fa93 f3a3 	rbit	r3, r3
 8003240:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003244:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003248:	fab3 f383 	clz	r3, r3
 800324c:	b2db      	uxtb	r3, r3
 800324e:	095b      	lsrs	r3, r3, #5
 8003250:	b2db      	uxtb	r3, r3
 8003252:	f043 0301 	orr.w	r3, r3, #1
 8003256:	b2db      	uxtb	r3, r3
 8003258:	2b01      	cmp	r3, #1
 800325a:	d102      	bne.n	8003262 <HAL_RCC_OscConfig+0x2b2>
 800325c:	4b19      	ldr	r3, [pc, #100]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	e015      	b.n	800328e <HAL_RCC_OscConfig+0x2de>
 8003262:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003266:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800326a:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800326e:	fa93 f3a3 	rbit	r3, r3
 8003272:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003276:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800327a:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800327e:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 8003282:	fa93 f3a3 	rbit	r3, r3
 8003286:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 800328a:	4b0e      	ldr	r3, [pc, #56]	@ (80032c4 <HAL_RCC_OscConfig+0x314>)
 800328c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800328e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003292:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003296:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 800329a:	fa92 f2a2 	rbit	r2, r2
 800329e:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 80032a2:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 80032a6:	fab2 f282 	clz	r2, r2
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	f042 0220 	orr.w	r2, r2, #32
 80032b0:	b2d2      	uxtb	r2, r2
 80032b2:	f002 021f 	and.w	r2, r2, #31
 80032b6:	2101      	movs	r1, #1
 80032b8:	fa01 f202 	lsl.w	r2, r1, r2
 80032bc:	4013      	ands	r3, r2
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1ab      	bne.n	800321a <HAL_RCC_OscConfig+0x26a>
 80032c2:	e002      	b.n	80032ca <HAL_RCC_OscConfig+0x31a>
 80032c4:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032ce:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f003 0302 	and.w	r3, r3, #2
 80032da:	2b00      	cmp	r3, #0
 80032dc:	f000 817f 	beq.w	80035de <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 80032e0:	4ba7      	ldr	r3, [pc, #668]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	f003 030c 	and.w	r3, r3, #12
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d00c      	beq.n	8003306 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80032ec:	4ba4      	ldr	r3, [pc, #656]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 80032ee:	685b      	ldr	r3, [r3, #4]
 80032f0:	f003 030c 	and.w	r3, r3, #12
 80032f4:	2b08      	cmp	r3, #8
 80032f6:	d173      	bne.n	80033e0 <HAL_RCC_OscConfig+0x430>
 80032f8:	4ba1      	ldr	r3, [pc, #644]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 80032fa:	685b      	ldr	r3, [r3, #4]
 80032fc:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 8003300:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003304:	d16c      	bne.n	80033e0 <HAL_RCC_OscConfig+0x430>
 8003306:	2302      	movs	r3, #2
 8003308:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800330c:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 8003310:	fa93 f3a3 	rbit	r3, r3
 8003314:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 8003318:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800331c:	fab3 f383 	clz	r3, r3
 8003320:	b2db      	uxtb	r3, r3
 8003322:	095b      	lsrs	r3, r3, #5
 8003324:	b2db      	uxtb	r3, r3
 8003326:	f043 0301 	orr.w	r3, r3, #1
 800332a:	b2db      	uxtb	r3, r3
 800332c:	2b01      	cmp	r3, #1
 800332e:	d102      	bne.n	8003336 <HAL_RCC_OscConfig+0x386>
 8003330:	4b93      	ldr	r3, [pc, #588]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	e013      	b.n	800335e <HAL_RCC_OscConfig+0x3ae>
 8003336:	2302      	movs	r3, #2
 8003338:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800333c:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 8003340:	fa93 f3a3 	rbit	r3, r3
 8003344:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003348:	2302      	movs	r3, #2
 800334a:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800334e:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 8003352:	fa93 f3a3 	rbit	r3, r3
 8003356:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 800335a:	4b89      	ldr	r3, [pc, #548]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 800335c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335e:	2202      	movs	r2, #2
 8003360:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003364:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003368:	fa92 f2a2 	rbit	r2, r2
 800336c:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 8003370:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003374:	fab2 f282 	clz	r2, r2
 8003378:	b2d2      	uxtb	r2, r2
 800337a:	f042 0220 	orr.w	r2, r2, #32
 800337e:	b2d2      	uxtb	r2, r2
 8003380:	f002 021f 	and.w	r2, r2, #31
 8003384:	2101      	movs	r1, #1
 8003386:	fa01 f202 	lsl.w	r2, r1, r2
 800338a:	4013      	ands	r3, r2
 800338c:	2b00      	cmp	r3, #0
 800338e:	d00a      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3f6>
 8003390:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003394:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	68db      	ldr	r3, [r3, #12]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d002      	beq.n	80033a6 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	f000 be52 	b.w	800404a <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033a6:	4b76      	ldr	r3, [pc, #472]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80033ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033b2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	691b      	ldr	r3, [r3, #16]
 80033ba:	21f8      	movs	r1, #248	@ 0xf8
 80033bc:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033c0:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 80033c4:	fa91 f1a1 	rbit	r1, r1
 80033c8:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 80033cc:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 80033d0:	fab1 f181 	clz	r1, r1
 80033d4:	b2c9      	uxtb	r1, r1
 80033d6:	408b      	lsls	r3, r1
 80033d8:	4969      	ldr	r1, [pc, #420]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 80033da:	4313      	orrs	r3, r2
 80033dc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033de:	e0fe      	b.n	80035de <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033e0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80033e4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	68db      	ldr	r3, [r3, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	f000 8088 	beq.w	8003502 <HAL_RCC_OscConfig+0x552>
 80033f2:	2301      	movs	r3, #1
 80033f4:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f8:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80033fc:	fa93 f3a3 	rbit	r3, r3
 8003400:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 8003404:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003408:	fab3 f383 	clz	r3, r3
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003412:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003416:	009b      	lsls	r3, r3, #2
 8003418:	461a      	mov	r2, r3
 800341a:	2301      	movs	r3, #1
 800341c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341e:	f7fd ffeb 	bl	80013f8 <HAL_GetTick>
 8003422:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003426:	e00a      	b.n	800343e <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003428:	f7fd ffe6 	bl	80013f8 <HAL_GetTick>
 800342c:	4602      	mov	r2, r0
 800342e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003432:	1ad3      	subs	r3, r2, r3
 8003434:	2b02      	cmp	r3, #2
 8003436:	d902      	bls.n	800343e <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 8003438:	2303      	movs	r3, #3
 800343a:	f000 be06 	b.w	800404a <HAL_RCC_OscConfig+0x109a>
 800343e:	2302      	movs	r3, #2
 8003440:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003444:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003448:	fa93 f3a3 	rbit	r3, r3
 800344c:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 8003450:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003454:	fab3 f383 	clz	r3, r3
 8003458:	b2db      	uxtb	r3, r3
 800345a:	095b      	lsrs	r3, r3, #5
 800345c:	b2db      	uxtb	r3, r3
 800345e:	f043 0301 	orr.w	r3, r3, #1
 8003462:	b2db      	uxtb	r3, r3
 8003464:	2b01      	cmp	r3, #1
 8003466:	d102      	bne.n	800346e <HAL_RCC_OscConfig+0x4be>
 8003468:	4b45      	ldr	r3, [pc, #276]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	e013      	b.n	8003496 <HAL_RCC_OscConfig+0x4e6>
 800346e:	2302      	movs	r3, #2
 8003470:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003474:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003478:	fa93 f3a3 	rbit	r3, r3
 800347c:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8003480:	2302      	movs	r3, #2
 8003482:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003486:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800348a:	fa93 f3a3 	rbit	r3, r3
 800348e:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 8003492:	4b3b      	ldr	r3, [pc, #236]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 8003494:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003496:	2202      	movs	r2, #2
 8003498:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 800349c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 80034a0:	fa92 f2a2 	rbit	r2, r2
 80034a4:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 80034a8:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 80034ac:	fab2 f282 	clz	r2, r2
 80034b0:	b2d2      	uxtb	r2, r2
 80034b2:	f042 0220 	orr.w	r2, r2, #32
 80034b6:	b2d2      	uxtb	r2, r2
 80034b8:	f002 021f 	and.w	r2, r2, #31
 80034bc:	2101      	movs	r1, #1
 80034be:	fa01 f202 	lsl.w	r2, r1, r2
 80034c2:	4013      	ands	r3, r2
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d0af      	beq.n	8003428 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80034d4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	21f8      	movs	r1, #248	@ 0xf8
 80034de:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034e2:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80034e6:	fa91 f1a1 	rbit	r1, r1
 80034ea:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80034ee:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80034f2:	fab1 f181 	clz	r1, r1
 80034f6:	b2c9      	uxtb	r1, r1
 80034f8:	408b      	lsls	r3, r1
 80034fa:	4921      	ldr	r1, [pc, #132]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 80034fc:	4313      	orrs	r3, r2
 80034fe:	600b      	str	r3, [r1, #0]
 8003500:	e06d      	b.n	80035de <HAL_RCC_OscConfig+0x62e>
 8003502:	2301      	movs	r3, #1
 8003504:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003508:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 800350c:	fa93 f3a3 	rbit	r3, r3
 8003510:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 8003514:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003518:	fab3 f383 	clz	r3, r3
 800351c:	b2db      	uxtb	r3, r3
 800351e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003522:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003526:	009b      	lsls	r3, r3, #2
 8003528:	461a      	mov	r2, r3
 800352a:	2300      	movs	r3, #0
 800352c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800352e:	f7fd ff63 	bl	80013f8 <HAL_GetTick>
 8003532:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	e00a      	b.n	800354e <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003538:	f7fd ff5e 	bl	80013f8 <HAL_GetTick>
 800353c:	4602      	mov	r2, r0
 800353e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003542:	1ad3      	subs	r3, r2, r3
 8003544:	2b02      	cmp	r3, #2
 8003546:	d902      	bls.n	800354e <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003548:	2303      	movs	r3, #3
 800354a:	f000 bd7e 	b.w	800404a <HAL_RCC_OscConfig+0x109a>
 800354e:	2302      	movs	r3, #2
 8003550:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003554:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003558:	fa93 f3a3 	rbit	r3, r3
 800355c:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 8003560:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003564:	fab3 f383 	clz	r3, r3
 8003568:	b2db      	uxtb	r3, r3
 800356a:	095b      	lsrs	r3, r3, #5
 800356c:	b2db      	uxtb	r3, r3
 800356e:	f043 0301 	orr.w	r3, r3, #1
 8003572:	b2db      	uxtb	r3, r3
 8003574:	2b01      	cmp	r3, #1
 8003576:	d105      	bne.n	8003584 <HAL_RCC_OscConfig+0x5d4>
 8003578:	4b01      	ldr	r3, [pc, #4]	@ (8003580 <HAL_RCC_OscConfig+0x5d0>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	e016      	b.n	80035ac <HAL_RCC_OscConfig+0x5fc>
 800357e:	bf00      	nop
 8003580:	40021000 	.word	0x40021000
 8003584:	2302      	movs	r3, #2
 8003586:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800358a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800358e:	fa93 f3a3 	rbit	r3, r3
 8003592:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003596:	2302      	movs	r3, #2
 8003598:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 800359c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80035a0:	fa93 f3a3 	rbit	r3, r3
 80035a4:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 80035a8:	4bbf      	ldr	r3, [pc, #764]	@ (80038a8 <HAL_RCC_OscConfig+0x8f8>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	2202      	movs	r2, #2
 80035ae:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 80035b2:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 80035b6:	fa92 f2a2 	rbit	r2, r2
 80035ba:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 80035be:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 80035c2:	fab2 f282 	clz	r2, r2
 80035c6:	b2d2      	uxtb	r2, r2
 80035c8:	f042 0220 	orr.w	r2, r2, #32
 80035cc:	b2d2      	uxtb	r2, r2
 80035ce:	f002 021f 	and.w	r2, r2, #31
 80035d2:	2101      	movs	r1, #1
 80035d4:	fa01 f202 	lsl.w	r2, r1, r2
 80035d8:	4013      	ands	r3, r2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1ac      	bne.n	8003538 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	f003 0308 	and.w	r3, r3, #8
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	f000 8113 	beq.w	800381a <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	695b      	ldr	r3, [r3, #20]
 8003600:	2b00      	cmp	r3, #0
 8003602:	d07c      	beq.n	80036fe <HAL_RCC_OscConfig+0x74e>
 8003604:	2301      	movs	r3, #1
 8003606:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800360a:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 800360e:	fa93 f3a3 	rbit	r3, r3
 8003612:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 8003616:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800361a:	fab3 f383 	clz	r3, r3
 800361e:	b2db      	uxtb	r3, r3
 8003620:	461a      	mov	r2, r3
 8003622:	4ba2      	ldr	r3, [pc, #648]	@ (80038ac <HAL_RCC_OscConfig+0x8fc>)
 8003624:	4413      	add	r3, r2
 8003626:	009b      	lsls	r3, r3, #2
 8003628:	461a      	mov	r2, r3
 800362a:	2301      	movs	r3, #1
 800362c:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800362e:	f7fd fee3 	bl	80013f8 <HAL_GetTick>
 8003632:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003636:	e00a      	b.n	800364e <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003638:	f7fd fede 	bl	80013f8 <HAL_GetTick>
 800363c:	4602      	mov	r2, r0
 800363e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003642:	1ad3      	subs	r3, r2, r3
 8003644:	2b02      	cmp	r3, #2
 8003646:	d902      	bls.n	800364e <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003648:	2303      	movs	r3, #3
 800364a:	f000 bcfe 	b.w	800404a <HAL_RCC_OscConfig+0x109a>
 800364e:	2302      	movs	r3, #2
 8003650:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003654:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003658:	fa93 f2a3 	rbit	r2, r3
 800365c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003660:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003664:	601a      	str	r2, [r3, #0]
 8003666:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800366a:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800366e:	2202      	movs	r2, #2
 8003670:	601a      	str	r2, [r3, #0]
 8003672:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003676:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	fa93 f2a3 	rbit	r2, r3
 8003680:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003684:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003688:	601a      	str	r2, [r3, #0]
 800368a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800368e:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8003692:	2202      	movs	r2, #2
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800369a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	fa93 f2a3 	rbit	r2, r3
 80036a4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036a8:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80036ac:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ae:	4b7e      	ldr	r3, [pc, #504]	@ (80038a8 <HAL_RCC_OscConfig+0x8f8>)
 80036b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80036b2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036b6:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036ba:	2102      	movs	r1, #2
 80036bc:	6019      	str	r1, [r3, #0]
 80036be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036c2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	fa93 f1a3 	rbit	r1, r3
 80036cc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036d0:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036d4:	6019      	str	r1, [r3, #0]
  return result;
 80036d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80036da:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	fab3 f383 	clz	r3, r3
 80036e4:	b2db      	uxtb	r3, r3
 80036e6:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80036ea:	b2db      	uxtb	r3, r3
 80036ec:	f003 031f 	and.w	r3, r3, #31
 80036f0:	2101      	movs	r1, #1
 80036f2:	fa01 f303 	lsl.w	r3, r1, r3
 80036f6:	4013      	ands	r3, r2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d09d      	beq.n	8003638 <HAL_RCC_OscConfig+0x688>
 80036fc:	e08d      	b.n	800381a <HAL_RCC_OscConfig+0x86a>
 80036fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003702:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003706:	2201      	movs	r2, #1
 8003708:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800370a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800370e:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	fa93 f2a3 	rbit	r2, r3
 8003718:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800371c:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8003720:	601a      	str	r2, [r3, #0]
  return result;
 8003722:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003726:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800372a:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800372c:	fab3 f383 	clz	r3, r3
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461a      	mov	r2, r3
 8003734:	4b5d      	ldr	r3, [pc, #372]	@ (80038ac <HAL_RCC_OscConfig+0x8fc>)
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	461a      	mov	r2, r3
 800373c:	2300      	movs	r3, #0
 800373e:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003740:	f7fd fe5a 	bl	80013f8 <HAL_GetTick>
 8003744:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	e00a      	b.n	8003760 <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800374a:	f7fd fe55 	bl	80013f8 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003754:	1ad3      	subs	r3, r2, r3
 8003756:	2b02      	cmp	r3, #2
 8003758:	d902      	bls.n	8003760 <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	f000 bc75 	b.w	800404a <HAL_RCC_OscConfig+0x109a>
 8003760:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003764:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003768:	2202      	movs	r2, #2
 800376a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800376c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003770:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	fa93 f2a3 	rbit	r2, r3
 800377a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800377e:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 8003782:	601a      	str	r2, [r3, #0]
 8003784:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003788:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 800378c:	2202      	movs	r2, #2
 800378e:	601a      	str	r2, [r3, #0]
 8003790:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003794:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	fa93 f2a3 	rbit	r2, r3
 800379e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037a2:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 80037a6:	601a      	str	r2, [r3, #0]
 80037a8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ac:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80037b0:	2202      	movs	r2, #2
 80037b2:	601a      	str	r2, [r3, #0]
 80037b4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b8:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	fa93 f2a3 	rbit	r2, r3
 80037c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037c6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80037ca:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	4b36      	ldr	r3, [pc, #216]	@ (80038a8 <HAL_RCC_OscConfig+0x8f8>)
 80037ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80037d0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037d4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037d8:	2102      	movs	r1, #2
 80037da:	6019      	str	r1, [r3, #0]
 80037dc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	fa93 f1a3 	rbit	r1, r3
 80037ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037ee:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037f2:	6019      	str	r1, [r3, #0]
  return result;
 80037f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037f8:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	fab3 f383 	clz	r3, r3
 8003802:	b2db      	uxtb	r3, r3
 8003804:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f003 031f 	and.w	r3, r3, #31
 800380e:	2101      	movs	r1, #1
 8003810:	fa01 f303 	lsl.w	r3, r1, r3
 8003814:	4013      	ands	r3, r2
 8003816:	2b00      	cmp	r3, #0
 8003818:	d197      	bne.n	800374a <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800381a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800381e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003822:	681b      	ldr	r3, [r3, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f003 0304 	and.w	r3, r3, #4
 800382a:	2b00      	cmp	r3, #0
 800382c:	f000 81a5 	beq.w	8003b7a <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003830:	2300      	movs	r3, #0
 8003832:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003836:	4b1c      	ldr	r3, [pc, #112]	@ (80038a8 <HAL_RCC_OscConfig+0x8f8>)
 8003838:	69db      	ldr	r3, [r3, #28]
 800383a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d116      	bne.n	8003870 <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003842:	4b19      	ldr	r3, [pc, #100]	@ (80038a8 <HAL_RCC_OscConfig+0x8f8>)
 8003844:	69db      	ldr	r3, [r3, #28]
 8003846:	4a18      	ldr	r2, [pc, #96]	@ (80038a8 <HAL_RCC_OscConfig+0x8f8>)
 8003848:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800384c:	61d3      	str	r3, [r2, #28]
 800384e:	4b16      	ldr	r3, [pc, #88]	@ (80038a8 <HAL_RCC_OscConfig+0x8f8>)
 8003850:	69db      	ldr	r3, [r3, #28]
 8003852:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003856:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800385a:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 800385e:	601a      	str	r2, [r3, #0]
 8003860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003864:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003868:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 800386a:	2301      	movs	r3, #1
 800386c:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003870:	4b0f      	ldr	r3, [pc, #60]	@ (80038b0 <HAL_RCC_OscConfig+0x900>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003878:	2b00      	cmp	r3, #0
 800387a:	d121      	bne.n	80038c0 <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800387c:	4b0c      	ldr	r3, [pc, #48]	@ (80038b0 <HAL_RCC_OscConfig+0x900>)
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	4a0b      	ldr	r2, [pc, #44]	@ (80038b0 <HAL_RCC_OscConfig+0x900>)
 8003882:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003886:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003888:	f7fd fdb6 	bl	80013f8 <HAL_GetTick>
 800388c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003890:	e010      	b.n	80038b4 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003892:	f7fd fdb1 	bl	80013f8 <HAL_GetTick>
 8003896:	4602      	mov	r2, r0
 8003898:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800389c:	1ad3      	subs	r3, r2, r3
 800389e:	2b64      	cmp	r3, #100	@ 0x64
 80038a0:	d908      	bls.n	80038b4 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 80038a2:	2303      	movs	r3, #3
 80038a4:	e3d1      	b.n	800404a <HAL_RCC_OscConfig+0x109a>
 80038a6:	bf00      	nop
 80038a8:	40021000 	.word	0x40021000
 80038ac:	10908120 	.word	0x10908120
 80038b0:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80038b4:	4b8d      	ldr	r3, [pc, #564]	@ (8003aec <HAL_RCC_OscConfig+0xb3c>)
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d0e8      	beq.n	8003892 <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	689b      	ldr	r3, [r3, #8]
 80038cc:	2b01      	cmp	r3, #1
 80038ce:	d106      	bne.n	80038de <HAL_RCC_OscConfig+0x92e>
 80038d0:	4b87      	ldr	r3, [pc, #540]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 80038d2:	6a1b      	ldr	r3, [r3, #32]
 80038d4:	4a86      	ldr	r2, [pc, #536]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 80038d6:	f043 0301 	orr.w	r3, r3, #1
 80038da:	6213      	str	r3, [r2, #32]
 80038dc:	e035      	b.n	800394a <HAL_RCC_OscConfig+0x99a>
 80038de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e2:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	689b      	ldr	r3, [r3, #8]
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d10c      	bne.n	8003908 <HAL_RCC_OscConfig+0x958>
 80038ee:	4b80      	ldr	r3, [pc, #512]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 80038f0:	6a1b      	ldr	r3, [r3, #32]
 80038f2:	4a7f      	ldr	r2, [pc, #508]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 80038f4:	f023 0301 	bic.w	r3, r3, #1
 80038f8:	6213      	str	r3, [r2, #32]
 80038fa:	4b7d      	ldr	r3, [pc, #500]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	4a7c      	ldr	r2, [pc, #496]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 8003900:	f023 0304 	bic.w	r3, r3, #4
 8003904:	6213      	str	r3, [r2, #32]
 8003906:	e020      	b.n	800394a <HAL_RCC_OscConfig+0x99a>
 8003908:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800390c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	2b05      	cmp	r3, #5
 8003916:	d10c      	bne.n	8003932 <HAL_RCC_OscConfig+0x982>
 8003918:	4b75      	ldr	r3, [pc, #468]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	4a74      	ldr	r2, [pc, #464]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 800391e:	f043 0304 	orr.w	r3, r3, #4
 8003922:	6213      	str	r3, [r2, #32]
 8003924:	4b72      	ldr	r3, [pc, #456]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 8003926:	6a1b      	ldr	r3, [r3, #32]
 8003928:	4a71      	ldr	r2, [pc, #452]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 800392a:	f043 0301 	orr.w	r3, r3, #1
 800392e:	6213      	str	r3, [r2, #32]
 8003930:	e00b      	b.n	800394a <HAL_RCC_OscConfig+0x99a>
 8003932:	4b6f      	ldr	r3, [pc, #444]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 8003934:	6a1b      	ldr	r3, [r3, #32]
 8003936:	4a6e      	ldr	r2, [pc, #440]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 8003938:	f023 0301 	bic.w	r3, r3, #1
 800393c:	6213      	str	r3, [r2, #32]
 800393e:	4b6c      	ldr	r3, [pc, #432]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	4a6b      	ldr	r2, [pc, #428]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 8003944:	f023 0304 	bic.w	r3, r3, #4
 8003948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800394a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800394e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	2b00      	cmp	r3, #0
 8003958:	f000 8081 	beq.w	8003a5e <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800395c:	f7fd fd4c 	bl	80013f8 <HAL_GetTick>
 8003960:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003964:	e00b      	b.n	800397e <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003966:	f7fd fd47 	bl	80013f8 <HAL_GetTick>
 800396a:	4602      	mov	r2, r0
 800396c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003970:	1ad3      	subs	r3, r2, r3
 8003972:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003976:	4293      	cmp	r3, r2
 8003978:	d901      	bls.n	800397e <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 800397a:	2303      	movs	r3, #3
 800397c:	e365      	b.n	800404a <HAL_RCC_OscConfig+0x109a>
 800397e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003982:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003986:	2202      	movs	r2, #2
 8003988:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800398a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800398e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	fa93 f2a3 	rbit	r2, r3
 8003998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399c:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80039a0:	601a      	str	r2, [r3, #0]
 80039a2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039a6:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80039aa:	2202      	movs	r2, #2
 80039ac:	601a      	str	r2, [r3, #0]
 80039ae:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b2:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	fa93 f2a3 	rbit	r2, r3
 80039bc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039c0:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039c4:	601a      	str	r2, [r3, #0]
  return result;
 80039c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ca:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80039ce:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80039d0:	fab3 f383 	clz	r3, r3
 80039d4:	b2db      	uxtb	r3, r3
 80039d6:	095b      	lsrs	r3, r3, #5
 80039d8:	b2db      	uxtb	r3, r3
 80039da:	f043 0302 	orr.w	r3, r3, #2
 80039de:	b2db      	uxtb	r3, r3
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d102      	bne.n	80039ea <HAL_RCC_OscConfig+0xa3a>
 80039e4:	4b42      	ldr	r3, [pc, #264]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 80039e6:	6a1b      	ldr	r3, [r3, #32]
 80039e8:	e013      	b.n	8003a12 <HAL_RCC_OscConfig+0xa62>
 80039ea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039ee:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80039f2:	2202      	movs	r2, #2
 80039f4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80039f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039fa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	fa93 f2a3 	rbit	r2, r3
 8003a04:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a08:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003a0c:	601a      	str	r2, [r3, #0]
 8003a0e:	4b38      	ldr	r3, [pc, #224]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 8003a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a12:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a16:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a1a:	2102      	movs	r1, #2
 8003a1c:	6011      	str	r1, [r2, #0]
 8003a1e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a22:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	fa92 f1a2 	rbit	r1, r2
 8003a2c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a30:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003a34:	6011      	str	r1, [r2, #0]
  return result;
 8003a36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003a3a:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003a3e:	6812      	ldr	r2, [r2, #0]
 8003a40:	fab2 f282 	clz	r2, r2
 8003a44:	b2d2      	uxtb	r2, r2
 8003a46:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003a4a:	b2d2      	uxtb	r2, r2
 8003a4c:	f002 021f 	and.w	r2, r2, #31
 8003a50:	2101      	movs	r1, #1
 8003a52:	fa01 f202 	lsl.w	r2, r1, r2
 8003a56:	4013      	ands	r3, r2
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d084      	beq.n	8003966 <HAL_RCC_OscConfig+0x9b6>
 8003a5c:	e083      	b.n	8003b66 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003a5e:	f7fd fccb 	bl	80013f8 <HAL_GetTick>
 8003a62:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003a66:	e00b      	b.n	8003a80 <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003a68:	f7fd fcc6 	bl	80013f8 <HAL_GetTick>
 8003a6c:	4602      	mov	r2, r0
 8003a6e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d901      	bls.n	8003a80 <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e2e4      	b.n	800404a <HAL_RCC_OscConfig+0x109a>
 8003a80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a84:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003a88:	2202      	movs	r2, #2
 8003a8a:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003a8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a90:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	fa93 f2a3 	rbit	r2, r3
 8003a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9e:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003aa2:	601a      	str	r2, [r3, #0]
 8003aa4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003aa8:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003aac:	2202      	movs	r2, #2
 8003aae:	601a      	str	r2, [r3, #0]
 8003ab0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ab4:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	fa93 f2a3 	rbit	r2, r3
 8003abe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac2:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003ac6:	601a      	str	r2, [r3, #0]
  return result;
 8003ac8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003acc:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003ad0:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ad2:	fab3 f383 	clz	r3, r3
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	095b      	lsrs	r3, r3, #5
 8003ada:	b2db      	uxtb	r3, r3
 8003adc:	f043 0302 	orr.w	r3, r3, #2
 8003ae0:	b2db      	uxtb	r3, r3
 8003ae2:	2b02      	cmp	r3, #2
 8003ae4:	d106      	bne.n	8003af4 <HAL_RCC_OscConfig+0xb44>
 8003ae6:	4b02      	ldr	r3, [pc, #8]	@ (8003af0 <HAL_RCC_OscConfig+0xb40>)
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	e017      	b.n	8003b1c <HAL_RCC_OscConfig+0xb6c>
 8003aec:	40007000 	.word	0x40007000
 8003af0:	40021000 	.word	0x40021000
 8003af4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003af8:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003afc:	2202      	movs	r2, #2
 8003afe:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b00:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b04:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	fa93 f2a3 	rbit	r2, r3
 8003b0e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b12:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003b16:	601a      	str	r2, [r3, #0]
 8003b18:	4bb3      	ldr	r3, [pc, #716]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003b1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b1c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b20:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b24:	2102      	movs	r1, #2
 8003b26:	6011      	str	r1, [r2, #0]
 8003b28:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b2c:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003b30:	6812      	ldr	r2, [r2, #0]
 8003b32:	fa92 f1a2 	rbit	r1, r2
 8003b36:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b3a:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003b3e:	6011      	str	r1, [r2, #0]
  return result;
 8003b40:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003b44:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003b48:	6812      	ldr	r2, [r2, #0]
 8003b4a:	fab2 f282 	clz	r2, r2
 8003b4e:	b2d2      	uxtb	r2, r2
 8003b50:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	f002 021f 	and.w	r2, r2, #31
 8003b5a:	2101      	movs	r1, #1
 8003b5c:	fa01 f202 	lsl.w	r2, r1, r2
 8003b60:	4013      	ands	r3, r2
 8003b62:	2b00      	cmp	r3, #0
 8003b64:	d180      	bne.n	8003a68 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003b66:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003b6a:	2b01      	cmp	r3, #1
 8003b6c:	d105      	bne.n	8003b7a <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003b6e:	4b9e      	ldr	r3, [pc, #632]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	4a9d      	ldr	r2, [pc, #628]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003b74:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003b78:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003b7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b7e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	699b      	ldr	r3, [r3, #24]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 825e 	beq.w	8004048 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003b8c:	4b96      	ldr	r3, [pc, #600]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	f003 030c 	and.w	r3, r3, #12
 8003b94:	2b08      	cmp	r3, #8
 8003b96:	f000 821f 	beq.w	8003fd8 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003b9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	f040 8170 	bne.w	8003e8c <HAL_RCC_OscConfig+0xedc>
 8003bac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb0:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003bb4:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003bb8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bbe:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	fa93 f2a3 	rbit	r2, r3
 8003bc8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bcc:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003bd0:	601a      	str	r2, [r3, #0]
  return result;
 8003bd2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bd6:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003bda:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003bdc:	fab3 f383 	clz	r3, r3
 8003be0:	b2db      	uxtb	r3, r3
 8003be2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003be6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003bea:	009b      	lsls	r3, r3, #2
 8003bec:	461a      	mov	r2, r3
 8003bee:	2300      	movs	r3, #0
 8003bf0:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf2:	f7fd fc01 	bl	80013f8 <HAL_GetTick>
 8003bf6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003bfa:	e009      	b.n	8003c10 <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003bfc:	f7fd fbfc 	bl	80013f8 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c06:	1ad3      	subs	r3, r2, r3
 8003c08:	2b02      	cmp	r3, #2
 8003c0a:	d901      	bls.n	8003c10 <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003c0c:	2303      	movs	r3, #3
 8003c0e:	e21c      	b.n	800404a <HAL_RCC_OscConfig+0x109a>
 8003c10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c14:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c18:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c1c:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c1e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c22:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	fa93 f2a3 	rbit	r2, r3
 8003c2c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c30:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c34:	601a      	str	r2, [r3, #0]
  return result;
 8003c36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c3a:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003c3e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003c40:	fab3 f383 	clz	r3, r3
 8003c44:	b2db      	uxtb	r3, r3
 8003c46:	095b      	lsrs	r3, r3, #5
 8003c48:	b2db      	uxtb	r3, r3
 8003c4a:	f043 0301 	orr.w	r3, r3, #1
 8003c4e:	b2db      	uxtb	r3, r3
 8003c50:	2b01      	cmp	r3, #1
 8003c52:	d102      	bne.n	8003c5a <HAL_RCC_OscConfig+0xcaa>
 8003c54:	4b64      	ldr	r3, [pc, #400]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	e027      	b.n	8003caa <HAL_RCC_OscConfig+0xcfa>
 8003c5a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c5e:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003c62:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c66:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c6c:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	fa93 f2a3 	rbit	r2, r3
 8003c76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c7a:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003c7e:	601a      	str	r2, [r3, #0]
 8003c80:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c84:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003c88:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003c8c:	601a      	str	r2, [r3, #0]
 8003c8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c92:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	fa93 f2a3 	rbit	r2, r3
 8003c9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ca0:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003ca4:	601a      	str	r2, [r3, #0]
 8003ca6:	4b50      	ldr	r3, [pc, #320]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003ca8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003caa:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cae:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003cb2:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003cb6:	6011      	str	r1, [r2, #0]
 8003cb8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cbc:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003cc0:	6812      	ldr	r2, [r2, #0]
 8003cc2:	fa92 f1a2 	rbit	r1, r2
 8003cc6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cca:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003cce:	6011      	str	r1, [r2, #0]
  return result;
 8003cd0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cd4:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003cd8:	6812      	ldr	r2, [r2, #0]
 8003cda:	fab2 f282 	clz	r2, r2
 8003cde:	b2d2      	uxtb	r2, r2
 8003ce0:	f042 0220 	orr.w	r2, r2, #32
 8003ce4:	b2d2      	uxtb	r2, r2
 8003ce6:	f002 021f 	and.w	r2, r2, #31
 8003cea:	2101      	movs	r1, #1
 8003cec:	fa01 f202 	lsl.w	r2, r1, r2
 8003cf0:	4013      	ands	r3, r2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d182      	bne.n	8003bfc <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003cf6:	4b3c      	ldr	r3, [pc, #240]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003cf8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003cfa:	f023 020f 	bic.w	r2, r3, #15
 8003cfe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d02:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d0a:	4937      	ldr	r1, [pc, #220]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003d0c:	4313      	orrs	r3, r2
 8003d0e:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003d10:	4b35      	ldr	r3, [pc, #212]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003d12:	685b      	ldr	r3, [r3, #4]
 8003d14:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003d18:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d1c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	6a19      	ldr	r1, [r3, #32]
 8003d24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d28:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	69db      	ldr	r3, [r3, #28]
 8003d30:	430b      	orrs	r3, r1
 8003d32:	492d      	ldr	r1, [pc, #180]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003d34:	4313      	orrs	r3, r2
 8003d36:	604b      	str	r3, [r1, #4]
 8003d38:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d3c:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d40:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d4a:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003d4e:	681b      	ldr	r3, [r3, #0]
 8003d50:	fa93 f2a3 	rbit	r2, r3
 8003d54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d58:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d5c:	601a      	str	r2, [r3, #0]
  return result;
 8003d5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d62:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003d66:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003d68:	fab3 f383 	clz	r3, r3
 8003d6c:	b2db      	uxtb	r3, r3
 8003d6e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003d72:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003d76:	009b      	lsls	r3, r3, #2
 8003d78:	461a      	mov	r2, r3
 8003d7a:	2301      	movs	r3, #1
 8003d7c:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7e:	f7fd fb3b 	bl	80013f8 <HAL_GetTick>
 8003d82:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003d86:	e009      	b.n	8003d9c <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d88:	f7fd fb36 	bl	80013f8 <HAL_GetTick>
 8003d8c:	4602      	mov	r2, r0
 8003d8e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003d92:	1ad3      	subs	r3, r2, r3
 8003d94:	2b02      	cmp	r3, #2
 8003d96:	d901      	bls.n	8003d9c <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003d98:	2303      	movs	r3, #3
 8003d9a:	e156      	b.n	800404a <HAL_RCC_OscConfig+0x109a>
 8003d9c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003da0:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003da4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003da8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003daa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dae:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	fa93 f2a3 	rbit	r2, r3
 8003db8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dbc:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003dc0:	601a      	str	r2, [r3, #0]
  return result;
 8003dc2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dc6:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003dca:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003dcc:	fab3 f383 	clz	r3, r3
 8003dd0:	b2db      	uxtb	r3, r3
 8003dd2:	095b      	lsrs	r3, r3, #5
 8003dd4:	b2db      	uxtb	r3, r3
 8003dd6:	f043 0301 	orr.w	r3, r3, #1
 8003dda:	b2db      	uxtb	r3, r3
 8003ddc:	2b01      	cmp	r3, #1
 8003dde:	d105      	bne.n	8003dec <HAL_RCC_OscConfig+0xe3c>
 8003de0:	4b01      	ldr	r3, [pc, #4]	@ (8003de8 <HAL_RCC_OscConfig+0xe38>)
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	e02a      	b.n	8003e3c <HAL_RCC_OscConfig+0xe8c>
 8003de6:	bf00      	nop
 8003de8:	40021000 	.word	0x40021000
 8003dec:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df0:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003df4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003df8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dfa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dfe:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	fa93 f2a3 	rbit	r2, r3
 8003e08:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e0c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003e10:	601a      	str	r2, [r3, #0]
 8003e12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e16:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e1a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e1e:	601a      	str	r2, [r3, #0]
 8003e20:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e24:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	fa93 f2a3 	rbit	r2, r3
 8003e2e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e32:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003e36:	601a      	str	r2, [r3, #0]
 8003e38:	4b86      	ldr	r3, [pc, #536]	@ (8004054 <HAL_RCC_OscConfig+0x10a4>)
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e3c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e40:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e44:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e48:	6011      	str	r1, [r2, #0]
 8003e4a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e4e:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8003e52:	6812      	ldr	r2, [r2, #0]
 8003e54:	fa92 f1a2 	rbit	r1, r2
 8003e58:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e5c:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003e60:	6011      	str	r1, [r2, #0]
  return result;
 8003e62:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e66:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8003e6a:	6812      	ldr	r2, [r2, #0]
 8003e6c:	fab2 f282 	clz	r2, r2
 8003e70:	b2d2      	uxtb	r2, r2
 8003e72:	f042 0220 	orr.w	r2, r2, #32
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	f002 021f 	and.w	r2, r2, #31
 8003e7c:	2101      	movs	r1, #1
 8003e7e:	fa01 f202 	lsl.w	r2, r1, r2
 8003e82:	4013      	ands	r3, r2
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	f43f af7f 	beq.w	8003d88 <HAL_RCC_OscConfig+0xdd8>
 8003e8a:	e0dd      	b.n	8004048 <HAL_RCC_OscConfig+0x1098>
 8003e8c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e90:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003e94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003e98:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e9e:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	fa93 f2a3 	rbit	r2, r3
 8003ea8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eac:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003eb0:	601a      	str	r2, [r3, #0]
  return result;
 8003eb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003eb6:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8003eba:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ebc:	fab3 f383 	clz	r3, r3
 8003ec0:	b2db      	uxtb	r3, r3
 8003ec2:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003ec6:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003eca:	009b      	lsls	r3, r3, #2
 8003ecc:	461a      	mov	r2, r3
 8003ece:	2300      	movs	r3, #0
 8003ed0:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed2:	f7fd fa91 	bl	80013f8 <HAL_GetTick>
 8003ed6:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003eda:	e009      	b.n	8003ef0 <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003edc:	f7fd fa8c 	bl	80013f8 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003ee6:	1ad3      	subs	r3, r2, r3
 8003ee8:	2b02      	cmp	r3, #2
 8003eea:	d901      	bls.n	8003ef0 <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 8003eec:	2303      	movs	r3, #3
 8003eee:	e0ac      	b.n	800404a <HAL_RCC_OscConfig+0x109a>
 8003ef0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef4:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003ef8:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003efc:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003efe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f02:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	fa93 f2a3 	rbit	r2, r3
 8003f0c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f10:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f14:	601a      	str	r2, [r3, #0]
  return result;
 8003f16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f1a:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 8003f1e:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003f20:	fab3 f383 	clz	r3, r3
 8003f24:	b2db      	uxtb	r3, r3
 8003f26:	095b      	lsrs	r3, r3, #5
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f043 0301 	orr.w	r3, r3, #1
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b01      	cmp	r3, #1
 8003f32:	d102      	bne.n	8003f3a <HAL_RCC_OscConfig+0xf8a>
 8003f34:	4b47      	ldr	r3, [pc, #284]	@ (8004054 <HAL_RCC_OscConfig+0x10a4>)
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	e027      	b.n	8003f8a <HAL_RCC_OscConfig+0xfda>
 8003f3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f3e:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f42:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f4c:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	fa93 f2a3 	rbit	r2, r3
 8003f56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f5a:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 8003f5e:	601a      	str	r2, [r3, #0]
 8003f60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f64:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003f68:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f6c:	601a      	str	r2, [r3, #0]
 8003f6e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f72:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	fa93 f2a3 	rbit	r2, r3
 8003f7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f80:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8003f84:	601a      	str	r2, [r3, #0]
 8003f86:	4b33      	ldr	r3, [pc, #204]	@ (8004054 <HAL_RCC_OscConfig+0x10a4>)
 8003f88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f8a:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f8e:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003f92:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003f96:	6011      	str	r1, [r2, #0]
 8003f98:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003f9c:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 8003fa0:	6812      	ldr	r2, [r2, #0]
 8003fa2:	fa92 f1a2 	rbit	r1, r2
 8003fa6:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003faa:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003fae:	6011      	str	r1, [r2, #0]
  return result;
 8003fb0:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003fb4:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8003fb8:	6812      	ldr	r2, [r2, #0]
 8003fba:	fab2 f282 	clz	r2, r2
 8003fbe:	b2d2      	uxtb	r2, r2
 8003fc0:	f042 0220 	orr.w	r2, r2, #32
 8003fc4:	b2d2      	uxtb	r2, r2
 8003fc6:	f002 021f 	and.w	r2, r2, #31
 8003fca:	2101      	movs	r1, #1
 8003fcc:	fa01 f202 	lsl.w	r2, r1, r2
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	2b00      	cmp	r3, #0
 8003fd4:	d182      	bne.n	8003edc <HAL_RCC_OscConfig+0xf2c>
 8003fd6:	e037      	b.n	8004048 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fd8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fdc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	699b      	ldr	r3, [r3, #24]
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 8003fe8:	2301      	movs	r3, #1
 8003fea:	e02e      	b.n	800404a <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003fec:	4b19      	ldr	r3, [pc, #100]	@ (8004054 <HAL_RCC_OscConfig+0x10a4>)
 8003fee:	685b      	ldr	r3, [r3, #4]
 8003ff0:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 8003ff4:	4b17      	ldr	r3, [pc, #92]	@ (8004054 <HAL_RCC_OscConfig+0x10a4>)
 8003ff6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ff8:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8003ffc:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004000:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 8004004:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004008:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	69db      	ldr	r3, [r3, #28]
 8004010:	429a      	cmp	r2, r3
 8004012:	d117      	bne.n	8004044 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004014:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 8004018:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800401c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004020:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 8004028:	429a      	cmp	r2, r3
 800402a:	d10b      	bne.n	8004044 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 800402c:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 8004030:	f003 020f 	and.w	r2, r3, #15
 8004034:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004038:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 8004040:	429a      	cmp	r2, r3
 8004042:	d001      	beq.n	8004048 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e000      	b.n	800404a <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004048:	2300      	movs	r3, #0
}
 800404a:	4618      	mov	r0, r3
 800404c:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8004050:	46bd      	mov	sp, r7
 8004052:	bd80      	pop	{r7, pc}
 8004054:	40021000 	.word	0x40021000

08004058 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004058:	b580      	push	{r7, lr}
 800405a:	b09e      	sub	sp, #120	@ 0x78
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8004062:	2300      	movs	r3, #0
 8004064:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d101      	bne.n	8004070 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e162      	b.n	8004336 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004070:	4b90      	ldr	r3, [pc, #576]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0307 	and.w	r3, r3, #7
 8004078:	683a      	ldr	r2, [r7, #0]
 800407a:	429a      	cmp	r2, r3
 800407c:	d910      	bls.n	80040a0 <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800407e:	4b8d      	ldr	r3, [pc, #564]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f023 0207 	bic.w	r2, r3, #7
 8004086:	498b      	ldr	r1, [pc, #556]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	4313      	orrs	r3, r2
 800408c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800408e:	4b89      	ldr	r3, [pc, #548]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	f003 0307 	and.w	r3, r3, #7
 8004096:	683a      	ldr	r2, [r7, #0]
 8004098:	429a      	cmp	r2, r3
 800409a:	d001      	beq.n	80040a0 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800409c:	2301      	movs	r3, #1
 800409e:	e14a      	b.n	8004336 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f003 0302 	and.w	r3, r3, #2
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d008      	beq.n	80040be <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040ac:	4b82      	ldr	r3, [pc, #520]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80040ae:	685b      	ldr	r3, [r3, #4]
 80040b0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	497f      	ldr	r1, [pc, #508]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80040ba:	4313      	orrs	r3, r2
 80040bc:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	f003 0301 	and.w	r3, r3, #1
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	f000 80dc 	beq.w	8004284 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	685b      	ldr	r3, [r3, #4]
 80040d0:	2b01      	cmp	r3, #1
 80040d2:	d13c      	bne.n	800414e <HAL_RCC_ClockConfig+0xf6>
 80040d4:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80040d8:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040da:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80040dc:	fa93 f3a3 	rbit	r3, r3
 80040e0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 80040e2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e4:	fab3 f383 	clz	r3, r3
 80040e8:	b2db      	uxtb	r3, r3
 80040ea:	095b      	lsrs	r3, r3, #5
 80040ec:	b2db      	uxtb	r3, r3
 80040ee:	f043 0301 	orr.w	r3, r3, #1
 80040f2:	b2db      	uxtb	r3, r3
 80040f4:	2b01      	cmp	r3, #1
 80040f6:	d102      	bne.n	80040fe <HAL_RCC_ClockConfig+0xa6>
 80040f8:	4b6f      	ldr	r3, [pc, #444]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	e00f      	b.n	800411e <HAL_RCC_ClockConfig+0xc6>
 80040fe:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004102:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8004106:	fa93 f3a3 	rbit	r3, r3
 800410a:	667b      	str	r3, [r7, #100]	@ 0x64
 800410c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004110:	663b      	str	r3, [r7, #96]	@ 0x60
 8004112:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004114:	fa93 f3a3 	rbit	r3, r3
 8004118:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800411a:	4b67      	ldr	r3, [pc, #412]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800411c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800411e:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004122:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004124:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004126:	fa92 f2a2 	rbit	r2, r2
 800412a:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 800412c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800412e:	fab2 f282 	clz	r2, r2
 8004132:	b2d2      	uxtb	r2, r2
 8004134:	f042 0220 	orr.w	r2, r2, #32
 8004138:	b2d2      	uxtb	r2, r2
 800413a:	f002 021f 	and.w	r2, r2, #31
 800413e:	2101      	movs	r1, #1
 8004140:	fa01 f202 	lsl.w	r2, r1, r2
 8004144:	4013      	ands	r3, r2
 8004146:	2b00      	cmp	r3, #0
 8004148:	d17b      	bne.n	8004242 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800414a:	2301      	movs	r3, #1
 800414c:	e0f3      	b.n	8004336 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	685b      	ldr	r3, [r3, #4]
 8004152:	2b02      	cmp	r3, #2
 8004154:	d13c      	bne.n	80041d0 <HAL_RCC_ClockConfig+0x178>
 8004156:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800415a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800415c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800415e:	fa93 f3a3 	rbit	r3, r3
 8004162:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004164:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004166:	fab3 f383 	clz	r3, r3
 800416a:	b2db      	uxtb	r3, r3
 800416c:	095b      	lsrs	r3, r3, #5
 800416e:	b2db      	uxtb	r3, r3
 8004170:	f043 0301 	orr.w	r3, r3, #1
 8004174:	b2db      	uxtb	r3, r3
 8004176:	2b01      	cmp	r3, #1
 8004178:	d102      	bne.n	8004180 <HAL_RCC_ClockConfig+0x128>
 800417a:	4b4f      	ldr	r3, [pc, #316]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	e00f      	b.n	80041a0 <HAL_RCC_ClockConfig+0x148>
 8004180:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004184:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004186:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004188:	fa93 f3a3 	rbit	r3, r3
 800418c:	647b      	str	r3, [r7, #68]	@ 0x44
 800418e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004192:	643b      	str	r3, [r7, #64]	@ 0x40
 8004194:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004196:	fa93 f3a3 	rbit	r3, r3
 800419a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800419c:	4b46      	ldr	r3, [pc, #280]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 800419e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041a0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80041a4:	63ba      	str	r2, [r7, #56]	@ 0x38
 80041a6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80041a8:	fa92 f2a2 	rbit	r2, r2
 80041ac:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 80041ae:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80041b0:	fab2 f282 	clz	r2, r2
 80041b4:	b2d2      	uxtb	r2, r2
 80041b6:	f042 0220 	orr.w	r2, r2, #32
 80041ba:	b2d2      	uxtb	r2, r2
 80041bc:	f002 021f 	and.w	r2, r2, #31
 80041c0:	2101      	movs	r1, #1
 80041c2:	fa01 f202 	lsl.w	r2, r1, r2
 80041c6:	4013      	ands	r3, r2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d13a      	bne.n	8004242 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	e0b2      	b.n	8004336 <HAL_RCC_ClockConfig+0x2de>
 80041d0:	2302      	movs	r3, #2
 80041d2:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041d6:	fa93 f3a3 	rbit	r3, r3
 80041da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 80041dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041de:	fab3 f383 	clz	r3, r3
 80041e2:	b2db      	uxtb	r3, r3
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	b2db      	uxtb	r3, r3
 80041e8:	f043 0301 	orr.w	r3, r3, #1
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d102      	bne.n	80041f8 <HAL_RCC_ClockConfig+0x1a0>
 80041f2:	4b31      	ldr	r3, [pc, #196]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	e00d      	b.n	8004214 <HAL_RCC_ClockConfig+0x1bc>
 80041f8:	2302      	movs	r3, #2
 80041fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80041fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041fe:	fa93 f3a3 	rbit	r3, r3
 8004202:	627b      	str	r3, [r7, #36]	@ 0x24
 8004204:	2302      	movs	r3, #2
 8004206:	623b      	str	r3, [r7, #32]
 8004208:	6a3b      	ldr	r3, [r7, #32]
 800420a:	fa93 f3a3 	rbit	r3, r3
 800420e:	61fb      	str	r3, [r7, #28]
 8004210:	4b29      	ldr	r3, [pc, #164]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004212:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004214:	2202      	movs	r2, #2
 8004216:	61ba      	str	r2, [r7, #24]
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	fa92 f2a2 	rbit	r2, r2
 800421e:	617a      	str	r2, [r7, #20]
  return result;
 8004220:	697a      	ldr	r2, [r7, #20]
 8004222:	fab2 f282 	clz	r2, r2
 8004226:	b2d2      	uxtb	r2, r2
 8004228:	f042 0220 	orr.w	r2, r2, #32
 800422c:	b2d2      	uxtb	r2, r2
 800422e:	f002 021f 	and.w	r2, r2, #31
 8004232:	2101      	movs	r1, #1
 8004234:	fa01 f202 	lsl.w	r2, r1, r2
 8004238:	4013      	ands	r3, r2
 800423a:	2b00      	cmp	r3, #0
 800423c:	d101      	bne.n	8004242 <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 800423e:	2301      	movs	r3, #1
 8004240:	e079      	b.n	8004336 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004242:	4b1d      	ldr	r3, [pc, #116]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f023 0203 	bic.w	r2, r3, #3
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	491a      	ldr	r1, [pc, #104]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004250:	4313      	orrs	r3, r2
 8004252:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004254:	f7fd f8d0 	bl	80013f8 <HAL_GetTick>
 8004258:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800425a:	e00a      	b.n	8004272 <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800425c:	f7fd f8cc 	bl	80013f8 <HAL_GetTick>
 8004260:	4602      	mov	r2, r0
 8004262:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004264:	1ad3      	subs	r3, r2, r3
 8004266:	f241 3288 	movw	r2, #5000	@ 0x1388
 800426a:	4293      	cmp	r3, r2
 800426c:	d901      	bls.n	8004272 <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800426e:	2303      	movs	r3, #3
 8004270:	e061      	b.n	8004336 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004272:	4b11      	ldr	r3, [pc, #68]	@ (80042b8 <HAL_RCC_ClockConfig+0x260>)
 8004274:	685b      	ldr	r3, [r3, #4]
 8004276:	f003 020c 	and.w	r2, r3, #12
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	685b      	ldr	r3, [r3, #4]
 800427e:	009b      	lsls	r3, r3, #2
 8004280:	429a      	cmp	r2, r3
 8004282:	d1eb      	bne.n	800425c <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004284:	4b0b      	ldr	r3, [pc, #44]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	f003 0307 	and.w	r3, r3, #7
 800428c:	683a      	ldr	r2, [r7, #0]
 800428e:	429a      	cmp	r2, r3
 8004290:	d214      	bcs.n	80042bc <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004292:	4b08      	ldr	r3, [pc, #32]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	f023 0207 	bic.w	r2, r3, #7
 800429a:	4906      	ldr	r1, [pc, #24]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	4313      	orrs	r3, r2
 80042a0:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042a2:	4b04      	ldr	r3, [pc, #16]	@ (80042b4 <HAL_RCC_ClockConfig+0x25c>)
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	f003 0307 	and.w	r3, r3, #7
 80042aa:	683a      	ldr	r2, [r7, #0]
 80042ac:	429a      	cmp	r2, r3
 80042ae:	d005      	beq.n	80042bc <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 80042b0:	2301      	movs	r3, #1
 80042b2:	e040      	b.n	8004336 <HAL_RCC_ClockConfig+0x2de>
 80042b4:	40022000 	.word	0x40022000
 80042b8:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f003 0304 	and.w	r3, r3, #4
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d008      	beq.n	80042da <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80042c8:	4b1d      	ldr	r3, [pc, #116]	@ (8004340 <HAL_RCC_ClockConfig+0x2e8>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	68db      	ldr	r3, [r3, #12]
 80042d4:	491a      	ldr	r1, [pc, #104]	@ (8004340 <HAL_RCC_ClockConfig+0x2e8>)
 80042d6:	4313      	orrs	r3, r2
 80042d8:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0308 	and.w	r3, r3, #8
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d009      	beq.n	80042fa <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80042e6:	4b16      	ldr	r3, [pc, #88]	@ (8004340 <HAL_RCC_ClockConfig+0x2e8>)
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	691b      	ldr	r3, [r3, #16]
 80042f2:	00db      	lsls	r3, r3, #3
 80042f4:	4912      	ldr	r1, [pc, #72]	@ (8004340 <HAL_RCC_ClockConfig+0x2e8>)
 80042f6:	4313      	orrs	r3, r2
 80042f8:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80042fa:	f000 f829 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 80042fe:	4601      	mov	r1, r0
 8004300:	4b0f      	ldr	r3, [pc, #60]	@ (8004340 <HAL_RCC_ClockConfig+0x2e8>)
 8004302:	685b      	ldr	r3, [r3, #4]
 8004304:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004308:	22f0      	movs	r2, #240	@ 0xf0
 800430a:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800430c:	693a      	ldr	r2, [r7, #16]
 800430e:	fa92 f2a2 	rbit	r2, r2
 8004312:	60fa      	str	r2, [r7, #12]
  return result;
 8004314:	68fa      	ldr	r2, [r7, #12]
 8004316:	fab2 f282 	clz	r2, r2
 800431a:	b2d2      	uxtb	r2, r2
 800431c:	40d3      	lsrs	r3, r2
 800431e:	4a09      	ldr	r2, [pc, #36]	@ (8004344 <HAL_RCC_ClockConfig+0x2ec>)
 8004320:	5cd3      	ldrb	r3, [r2, r3]
 8004322:	fa21 f303 	lsr.w	r3, r1, r3
 8004326:	4a08      	ldr	r2, [pc, #32]	@ (8004348 <HAL_RCC_ClockConfig+0x2f0>)
 8004328:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 800432a:	4b08      	ldr	r3, [pc, #32]	@ (800434c <HAL_RCC_ClockConfig+0x2f4>)
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	4618      	mov	r0, r3
 8004330:	f7fd f81e 	bl	8001370 <HAL_InitTick>
  
  return HAL_OK;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3778      	adds	r7, #120	@ 0x78
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	40021000 	.word	0x40021000
 8004344:	08007bb8 	.word	0x08007bb8
 8004348:	20000000 	.word	0x20000000
 800434c:	20000004 	.word	0x20000004

08004350 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004350:	b480      	push	{r7}
 8004352:	b087      	sub	sp, #28
 8004354:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004356:	2300      	movs	r3, #0
 8004358:	60fb      	str	r3, [r7, #12]
 800435a:	2300      	movs	r3, #0
 800435c:	60bb      	str	r3, [r7, #8]
 800435e:	2300      	movs	r3, #0
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	2300      	movs	r3, #0
 8004364:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004366:	2300      	movs	r3, #0
 8004368:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 800436a:	4b1f      	ldr	r3, [pc, #124]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x98>)
 800436c:	685b      	ldr	r3, [r3, #4]
 800436e:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	f003 030c 	and.w	r3, r3, #12
 8004376:	2b04      	cmp	r3, #4
 8004378:	d002      	beq.n	8004380 <HAL_RCC_GetSysClockFreq+0x30>
 800437a:	2b08      	cmp	r3, #8
 800437c:	d003      	beq.n	8004386 <HAL_RCC_GetSysClockFreq+0x36>
 800437e:	e029      	b.n	80043d4 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004380:	4b1a      	ldr	r3, [pc, #104]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8004382:	613b      	str	r3, [r7, #16]
      break;
 8004384:	e029      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	0c9b      	lsrs	r3, r3, #18
 800438a:	f003 030f 	and.w	r3, r3, #15
 800438e:	4a18      	ldr	r2, [pc, #96]	@ (80043f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004390:	5cd3      	ldrb	r3, [r2, r3]
 8004392:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004394:	4b14      	ldr	r3, [pc, #80]	@ (80043e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8004396:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004398:	f003 030f 	and.w	r3, r3, #15
 800439c:	4a15      	ldr	r2, [pc, #84]	@ (80043f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 800439e:	5cd3      	ldrb	r3, [r2, r3]
 80043a0:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d008      	beq.n	80043be <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043ac:	4a0f      	ldr	r2, [pc, #60]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	fbb2 f2f3 	udiv	r2, r2, r3
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	fb02 f303 	mul.w	r3, r2, r3
 80043ba:	617b      	str	r3, [r7, #20]
 80043bc:	e007      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 80043be:	4a0b      	ldr	r2, [pc, #44]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80043c0:	68bb      	ldr	r3, [r7, #8]
 80043c2:	fbb2 f2f3 	udiv	r2, r2, r3
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	fb02 f303 	mul.w	r3, r2, r3
 80043cc:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 80043ce:	697b      	ldr	r3, [r7, #20]
 80043d0:	613b      	str	r3, [r7, #16]
      break;
 80043d2:	e002      	b.n	80043da <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80043d4:	4b05      	ldr	r3, [pc, #20]	@ (80043ec <HAL_RCC_GetSysClockFreq+0x9c>)
 80043d6:	613b      	str	r3, [r7, #16]
      break;
 80043d8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043da:	693b      	ldr	r3, [r7, #16]
}
 80043dc:	4618      	mov	r0, r3
 80043de:	371c      	adds	r7, #28
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr
 80043e8:	40021000 	.word	0x40021000
 80043ec:	007a1200 	.word	0x007a1200
 80043f0:	08007bd0 	.word	0x08007bd0
 80043f4:	08007be0 	.word	0x08007be0

080043f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043f8:	b480      	push	{r7}
 80043fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043fc:	4b03      	ldr	r3, [pc, #12]	@ (800440c <HAL_RCC_GetHCLKFreq+0x14>)
 80043fe:	681b      	ldr	r3, [r3, #0]
}
 8004400:	4618      	mov	r0, r3
 8004402:	46bd      	mov	sp, r7
 8004404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004408:	4770      	bx	lr
 800440a:	bf00      	nop
 800440c:	20000000 	.word	0x20000000

08004410 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004410:	b580      	push	{r7, lr}
 8004412:	b082      	sub	sp, #8
 8004414:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 8004416:	f7ff ffef 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 800441a:	4601      	mov	r1, r0
 800441c:	4b0b      	ldr	r3, [pc, #44]	@ (800444c <HAL_RCC_GetPCLK1Freq+0x3c>)
 800441e:	685b      	ldr	r3, [r3, #4]
 8004420:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8004424:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 8004428:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800442a:	687a      	ldr	r2, [r7, #4]
 800442c:	fa92 f2a2 	rbit	r2, r2
 8004430:	603a      	str	r2, [r7, #0]
  return result;
 8004432:	683a      	ldr	r2, [r7, #0]
 8004434:	fab2 f282 	clz	r2, r2
 8004438:	b2d2      	uxtb	r2, r2
 800443a:	40d3      	lsrs	r3, r2
 800443c:	4a04      	ldr	r2, [pc, #16]	@ (8004450 <HAL_RCC_GetPCLK1Freq+0x40>)
 800443e:	5cd3      	ldrb	r3, [r2, r3]
 8004440:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}
 800444c:	40021000 	.word	0x40021000
 8004450:	08007bc8 	.word	0x08007bc8

08004454 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 800445a:	f7ff ffcd 	bl	80043f8 <HAL_RCC_GetHCLKFreq>
 800445e:	4601      	mov	r1, r0
 8004460:	4b0b      	ldr	r3, [pc, #44]	@ (8004490 <HAL_RCC_GetPCLK2Freq+0x3c>)
 8004462:	685b      	ldr	r3, [r3, #4]
 8004464:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004468:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 800446c:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	fa92 f2a2 	rbit	r2, r2
 8004474:	603a      	str	r2, [r7, #0]
  return result;
 8004476:	683a      	ldr	r2, [r7, #0]
 8004478:	fab2 f282 	clz	r2, r2
 800447c:	b2d2      	uxtb	r2, r2
 800447e:	40d3      	lsrs	r3, r2
 8004480:	4a04      	ldr	r2, [pc, #16]	@ (8004494 <HAL_RCC_GetPCLK2Freq+0x40>)
 8004482:	5cd3      	ldrb	r3, [r2, r3]
 8004484:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004488:	4618      	mov	r0, r3
 800448a:	3708      	adds	r7, #8
 800448c:	46bd      	mov	sp, r7
 800448e:	bd80      	pop	{r7, pc}
 8004490:	40021000 	.word	0x40021000
 8004494:	08007bc8 	.word	0x08007bc8

08004498 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004498:	b580      	push	{r7, lr}
 800449a:	b092      	sub	sp, #72	@ 0x48
 800449c:	af00      	add	r7, sp, #0
 800449e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044a0:	2300      	movs	r3, #0
 80044a2:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 80044a4:	2300      	movs	r3, #0
 80044a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 80044a8:	2300      	movs	r3, #0
 80044aa:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	f000 80d4 	beq.w	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80044bc:	4b4e      	ldr	r3, [pc, #312]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044be:	69db      	ldr	r3, [r3, #28]
 80044c0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d10e      	bne.n	80044e6 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044c8:	4b4b      	ldr	r3, [pc, #300]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ca:	69db      	ldr	r3, [r3, #28]
 80044cc:	4a4a      	ldr	r2, [pc, #296]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044ce:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80044d2:	61d3      	str	r3, [r2, #28]
 80044d4:	4b48      	ldr	r3, [pc, #288]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80044d6:	69db      	ldr	r3, [r3, #28]
 80044d8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80044dc:	60bb      	str	r3, [r7, #8]
 80044de:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80044e0:	2301      	movs	r3, #1
 80044e2:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80044e6:	4b45      	ldr	r3, [pc, #276]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d118      	bne.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80044f2:	4b42      	ldr	r3, [pc, #264]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a41      	ldr	r2, [pc, #260]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80044f8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80044fc:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80044fe:	f7fc ff7b 	bl	80013f8 <HAL_GetTick>
 8004502:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004504:	e008      	b.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004506:	f7fc ff77 	bl	80013f8 <HAL_GetTick>
 800450a:	4602      	mov	r2, r0
 800450c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800450e:	1ad3      	subs	r3, r2, r3
 8004510:	2b64      	cmp	r3, #100	@ 0x64
 8004512:	d901      	bls.n	8004518 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8004514:	2303      	movs	r3, #3
 8004516:	e1d6      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004518:	4b38      	ldr	r3, [pc, #224]	@ (80045fc <HAL_RCCEx_PeriphCLKConfig+0x164>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f0      	beq.n	8004506 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004524:	4b34      	ldr	r3, [pc, #208]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004526:	6a1b      	ldr	r3, [r3, #32]
 8004528:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800452c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800452e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004530:	2b00      	cmp	r3, #0
 8004532:	f000 8084 	beq.w	800463e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800453e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004540:	429a      	cmp	r2, r3
 8004542:	d07c      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004544:	4b2c      	ldr	r3, [pc, #176]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800454c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800454e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004552:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004554:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004556:	fa93 f3a3 	rbit	r3, r3
 800455a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 800455c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800455e:	fab3 f383 	clz	r3, r3
 8004562:	b2db      	uxtb	r3, r3
 8004564:	461a      	mov	r2, r3
 8004566:	4b26      	ldr	r3, [pc, #152]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004568:	4413      	add	r3, r2
 800456a:	009b      	lsls	r3, r3, #2
 800456c:	461a      	mov	r2, r3
 800456e:	2301      	movs	r3, #1
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004576:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004578:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800457a:	fa93 f3a3 	rbit	r3, r3
 800457e:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8004580:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004582:	fab3 f383 	clz	r3, r3
 8004586:	b2db      	uxtb	r3, r3
 8004588:	461a      	mov	r2, r3
 800458a:	4b1d      	ldr	r3, [pc, #116]	@ (8004600 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800458c:	4413      	add	r3, r2
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	461a      	mov	r2, r3
 8004592:	2300      	movs	r3, #0
 8004594:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004596:	4a18      	ldr	r2, [pc, #96]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004598:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459a:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800459c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d04b      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045a6:	f7fc ff27 	bl	80013f8 <HAL_GetTick>
 80045aa:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045ac:	e00a      	b.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fc ff23 	bl	80013f8 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d901      	bls.n	80045c4 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	e180      	b.n	80048c6 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 80045c4:	2302      	movs	r3, #2
 80045c6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80045ca:	fa93 f3a3 	rbit	r3, r3
 80045ce:	627b      	str	r3, [r7, #36]	@ 0x24
 80045d0:	2302      	movs	r3, #2
 80045d2:	623b      	str	r3, [r7, #32]
 80045d4:	6a3b      	ldr	r3, [r7, #32]
 80045d6:	fa93 f3a3 	rbit	r3, r3
 80045da:	61fb      	str	r3, [r7, #28]
  return result;
 80045dc:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80045de:	fab3 f383 	clz	r3, r3
 80045e2:	b2db      	uxtb	r3, r3
 80045e4:	095b      	lsrs	r3, r3, #5
 80045e6:	b2db      	uxtb	r3, r3
 80045e8:	f043 0302 	orr.w	r3, r3, #2
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	2b02      	cmp	r3, #2
 80045f0:	d108      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80045f2:	4b01      	ldr	r3, [pc, #4]	@ (80045f8 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80045f4:	6a1b      	ldr	r3, [r3, #32]
 80045f6:	e00d      	b.n	8004614 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80045f8:	40021000 	.word	0x40021000
 80045fc:	40007000 	.word	0x40007000
 8004600:	10908100 	.word	0x10908100
 8004604:	2302      	movs	r3, #2
 8004606:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004608:	69bb      	ldr	r3, [r7, #24]
 800460a:	fa93 f3a3 	rbit	r3, r3
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	4b9a      	ldr	r3, [pc, #616]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004614:	2202      	movs	r2, #2
 8004616:	613a      	str	r2, [r7, #16]
 8004618:	693a      	ldr	r2, [r7, #16]
 800461a:	fa92 f2a2 	rbit	r2, r2
 800461e:	60fa      	str	r2, [r7, #12]
  return result;
 8004620:	68fa      	ldr	r2, [r7, #12]
 8004622:	fab2 f282 	clz	r2, r2
 8004626:	b2d2      	uxtb	r2, r2
 8004628:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800462c:	b2d2      	uxtb	r2, r2
 800462e:	f002 021f 	and.w	r2, r2, #31
 8004632:	2101      	movs	r1, #1
 8004634:	fa01 f202 	lsl.w	r2, r1, r2
 8004638:	4013      	ands	r3, r2
 800463a:	2b00      	cmp	r3, #0
 800463c:	d0b7      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 800463e:	4b8f      	ldr	r3, [pc, #572]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004640:	6a1b      	ldr	r3, [r3, #32]
 8004642:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	498c      	ldr	r1, [pc, #560]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800464c:	4313      	orrs	r3, r2
 800464e:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8004650:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004654:	2b01      	cmp	r3, #1
 8004656:	d105      	bne.n	8004664 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004658:	4b88      	ldr	r3, [pc, #544]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800465a:	69db      	ldr	r3, [r3, #28]
 800465c:	4a87      	ldr	r2, [pc, #540]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800465e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004662:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f003 0301 	and.w	r3, r3, #1
 800466c:	2b00      	cmp	r3, #0
 800466e:	d008      	beq.n	8004682 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004670:	4b82      	ldr	r3, [pc, #520]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004672:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004674:	f023 0203 	bic.w	r2, r3, #3
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	689b      	ldr	r3, [r3, #8]
 800467c:	497f      	ldr	r1, [pc, #508]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800467e:	4313      	orrs	r3, r2
 8004680:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	f003 0302 	and.w	r3, r3, #2
 800468a:	2b00      	cmp	r3, #0
 800468c:	d008      	beq.n	80046a0 <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800468e:	4b7b      	ldr	r3, [pc, #492]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004692:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	68db      	ldr	r3, [r3, #12]
 800469a:	4978      	ldr	r1, [pc, #480]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800469c:	4313      	orrs	r3, r2
 800469e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 0304 	and.w	r3, r3, #4
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	d008      	beq.n	80046be <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80046ac:	4b73      	ldr	r3, [pc, #460]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046b0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	691b      	ldr	r3, [r3, #16]
 80046b8:	4970      	ldr	r1, [pc, #448]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ba:	4313      	orrs	r3, r2
 80046bc:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	f003 0320 	and.w	r3, r3, #32
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d008      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80046ca:	4b6c      	ldr	r3, [pc, #432]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80046ce:	f023 0210 	bic.w	r2, r3, #16
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	69db      	ldr	r3, [r3, #28]
 80046d6:	4969      	ldr	r1, [pc, #420]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046d8:	4313      	orrs	r3, r2
 80046da:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d008      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80046e8:	4b64      	ldr	r3, [pc, #400]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046ea:	685b      	ldr	r3, [r3, #4]
 80046ec:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046f4:	4961      	ldr	r1, [pc, #388]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80046f6:	4313      	orrs	r3, r2
 80046f8:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004702:	2b00      	cmp	r3, #0
 8004704:	d008      	beq.n	8004718 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004706:	4b5d      	ldr	r3, [pc, #372]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004708:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800470a:	f023 0220 	bic.w	r2, r3, #32
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	6a1b      	ldr	r3, [r3, #32]
 8004712:	495a      	ldr	r1, [pc, #360]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004714:	4313      	orrs	r3, r2
 8004716:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004720:	2b00      	cmp	r3, #0
 8004722:	d008      	beq.n	8004736 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004724:	4b55      	ldr	r3, [pc, #340]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004726:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004728:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004730:	4952      	ldr	r1, [pc, #328]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004732:	4313      	orrs	r3, r2
 8004734:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0308 	and.w	r3, r3, #8
 800473e:	2b00      	cmp	r3, #0
 8004740:	d008      	beq.n	8004754 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004742:	4b4e      	ldr	r3, [pc, #312]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004744:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004746:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	695b      	ldr	r3, [r3, #20]
 800474e:	494b      	ldr	r1, [pc, #300]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004750:	4313      	orrs	r3, r2
 8004752:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	f003 0310 	and.w	r3, r3, #16
 800475c:	2b00      	cmp	r3, #0
 800475e:	d008      	beq.n	8004772 <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8004760:	4b46      	ldr	r3, [pc, #280]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004762:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004764:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	699b      	ldr	r3, [r3, #24]
 800476c:	4943      	ldr	r1, [pc, #268]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800476e:	4313      	orrs	r3, r2
 8004770:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	681b      	ldr	r3, [r3, #0]
 8004776:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800477a:	2b00      	cmp	r3, #0
 800477c:	d008      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800477e:	4b3f      	ldr	r3, [pc, #252]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004780:	685b      	ldr	r3, [r3, #4]
 8004782:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478a:	493c      	ldr	r1, [pc, #240]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800478c:	4313      	orrs	r3, r2
 800478e:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004798:	2b00      	cmp	r3, #0
 800479a:	d008      	beq.n	80047ae <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800479c:	4b37      	ldr	r3, [pc, #220]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800479e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047a0:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047a8:	4934      	ldr	r1, [pc, #208]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d008      	beq.n	80047cc <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 80047ba:	4b30      	ldr	r3, [pc, #192]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047be:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047c6:	492d      	ldr	r1, [pc, #180]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047c8:	4313      	orrs	r3, r2
 80047ca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d008      	beq.n	80047ea <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80047d8:	4b28      	ldr	r3, [pc, #160]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047dc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80047e4:	4925      	ldr	r1, [pc, #148]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047e6:	4313      	orrs	r3, r2
 80047e8:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d008      	beq.n	8004808 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80047f6:	4b21      	ldr	r3, [pc, #132]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80047fa:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004802:	491e      	ldr	r1, [pc, #120]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004804:	4313      	orrs	r3, r2
 8004806:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004810:	2b00      	cmp	r3, #0
 8004812:	d008      	beq.n	8004826 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 8004814:	4b19      	ldr	r3, [pc, #100]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004816:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004818:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004820:	4916      	ldr	r1, [pc, #88]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004822:	4313      	orrs	r3, r2
 8004824:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800482e:	2b00      	cmp	r3, #0
 8004830:	d008      	beq.n	8004844 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 8004832:	4b12      	ldr	r3, [pc, #72]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004836:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800483e:	490f      	ldr	r1, [pc, #60]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004840:	4313      	orrs	r3, r2
 8004842:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800484c:	2b00      	cmp	r3, #0
 800484e:	d008      	beq.n	8004862 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004850:	4b0a      	ldr	r3, [pc, #40]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004852:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004854:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800485c:	4907      	ldr	r1, [pc, #28]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800485e:	4313      	orrs	r3, r2
 8004860:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d00c      	beq.n	8004888 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 800486e:	4b03      	ldr	r3, [pc, #12]	@ (800487c <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004872:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	e002      	b.n	8004880 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 800487a:	bf00      	nop
 800487c:	40021000 	.word	0x40021000
 8004880:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004882:	4913      	ldr	r1, [pc, #76]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004884:	4313      	orrs	r3, r2
 8004886:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004890:	2b00      	cmp	r3, #0
 8004892:	d008      	beq.n	80048a6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004894:	4b0e      	ldr	r3, [pc, #56]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004896:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004898:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80048a0:	490b      	ldr	r1, [pc, #44]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048a2:	4313      	orrs	r3, r2
 80048a4:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d008      	beq.n	80048c4 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 80048b2:	4b07      	ldr	r3, [pc, #28]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048b6:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80048be:	4904      	ldr	r1, [pc, #16]	@ (80048d0 <HAL_RCCEx_PeriphCLKConfig+0x438>)
 80048c0:	4313      	orrs	r3, r2
 80048c2:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 80048c4:	2300      	movs	r3, #0
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3748      	adds	r7, #72	@ 0x48
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	40021000 	.word	0x40021000

080048d4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80048d4:	b580      	push	{r7, lr}
 80048d6:	b082      	sub	sp, #8
 80048d8:	af00      	add	r7, sp, #0
 80048da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d101      	bne.n	80048e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80048e2:	2301      	movs	r3, #1
 80048e4:	e040      	b.n	8004968 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d106      	bne.n	80048fc <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	2200      	movs	r2, #0
 80048f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048f6:	6878      	ldr	r0, [r7, #4]
 80048f8:	f7fc fba6 	bl	8001048 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2224      	movs	r2, #36	@ 0x24
 8004900:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	681a      	ldr	r2, [r3, #0]
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	f022 0201 	bic.w	r2, r2, #1
 8004910:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004916:	2b00      	cmp	r3, #0
 8004918:	d002      	beq.n	8004920 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f000 fa86 	bl	8004e2c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f8af 	bl	8004a84 <UART_SetConfig>
 8004926:	4603      	mov	r3, r0
 8004928:	2b01      	cmp	r3, #1
 800492a:	d101      	bne.n	8004930 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800492c:	2301      	movs	r3, #1
 800492e:	e01b      	b.n	8004968 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685a      	ldr	r2, [r3, #4]
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800493e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	689a      	ldr	r2, [r3, #8]
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	681b      	ldr	r3, [r3, #0]
 800494a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800494e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	681a      	ldr	r2, [r3, #0]
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	f042 0201 	orr.w	r2, r2, #1
 800495e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004960:	6878      	ldr	r0, [r7, #4]
 8004962:	f000 fb05 	bl	8004f70 <UART_CheckIdleState>
 8004966:	4603      	mov	r3, r0
}
 8004968:	4618      	mov	r0, r3
 800496a:	3708      	adds	r7, #8
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}

08004970 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b08a      	sub	sp, #40	@ 0x28
 8004974:	af02      	add	r7, sp, #8
 8004976:	60f8      	str	r0, [r7, #12]
 8004978:	60b9      	str	r1, [r7, #8]
 800497a:	603b      	str	r3, [r7, #0]
 800497c:	4613      	mov	r3, r2
 800497e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004984:	2b20      	cmp	r3, #32
 8004986:	d177      	bne.n	8004a78 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d002      	beq.n	8004994 <HAL_UART_Transmit+0x24>
 800498e:	88fb      	ldrh	r3, [r7, #6]
 8004990:	2b00      	cmp	r3, #0
 8004992:	d101      	bne.n	8004998 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004994:	2301      	movs	r3, #1
 8004996:	e070      	b.n	8004a7a <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	2200      	movs	r2, #0
 800499c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2221      	movs	r2, #33	@ 0x21
 80049a4:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049a6:	f7fc fd27 	bl	80013f8 <HAL_GetTick>
 80049aa:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80049ac:	68fb      	ldr	r3, [r7, #12]
 80049ae:	88fa      	ldrh	r2, [r7, #6]
 80049b0:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	88fa      	ldrh	r2, [r7, #6]
 80049b8:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049c4:	d108      	bne.n	80049d8 <HAL_UART_Transmit+0x68>
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	691b      	ldr	r3, [r3, #16]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d104      	bne.n	80049d8 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 80049ce:	2300      	movs	r3, #0
 80049d0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80049d2:	68bb      	ldr	r3, [r7, #8]
 80049d4:	61bb      	str	r3, [r7, #24]
 80049d6:	e003      	b.n	80049e0 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049e0:	e02f      	b.n	8004a42 <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2180      	movs	r1, #128	@ 0x80
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 fb67 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d004      	beq.n	8004a02 <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 80049fe:	2303      	movs	r3, #3
 8004a00:	e03b      	b.n	8004a7a <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	2b00      	cmp	r3, #0
 8004a06:	d10b      	bne.n	8004a20 <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	881a      	ldrh	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a14:	b292      	uxth	r2, r2
 8004a16:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004a18:	69bb      	ldr	r3, [r7, #24]
 8004a1a:	3302      	adds	r3, #2
 8004a1c:	61bb      	str	r3, [r7, #24]
 8004a1e:	e007      	b.n	8004a30 <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a20:	69fb      	ldr	r3, [r7, #28]
 8004a22:	781a      	ldrb	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	3301      	adds	r3, #1
 8004a2e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a36:	b29b      	uxth	r3, r3
 8004a38:	3b01      	subs	r3, #1
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004a48:	b29b      	uxth	r3, r3
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d1c9      	bne.n	80049e2 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	9300      	str	r3, [sp, #0]
 8004a52:	697b      	ldr	r3, [r7, #20]
 8004a54:	2200      	movs	r2, #0
 8004a56:	2140      	movs	r1, #64	@ 0x40
 8004a58:	68f8      	ldr	r0, [r7, #12]
 8004a5a:	f000 fb31 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d004      	beq.n	8004a6e <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a64:	68fb      	ldr	r3, [r7, #12]
 8004a66:	2220      	movs	r2, #32
 8004a68:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004a6a:	2303      	movs	r3, #3
 8004a6c:	e005      	b.n	8004a7a <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	2220      	movs	r2, #32
 8004a72:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004a74:	2300      	movs	r3, #0
 8004a76:	e000      	b.n	8004a7a <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004a78:	2302      	movs	r3, #2
  }
}
 8004a7a:	4618      	mov	r0, r3
 8004a7c:	3720      	adds	r7, #32
 8004a7e:	46bd      	mov	sp, r7
 8004a80:	bd80      	pop	{r7, pc}
	...

08004a84 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004a84:	b580      	push	{r7, lr}
 8004a86:	b088      	sub	sp, #32
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	689a      	ldr	r2, [r3, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	691b      	ldr	r3, [r3, #16]
 8004a98:	431a      	orrs	r2, r3
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	695b      	ldr	r3, [r3, #20]
 8004a9e:	431a      	orrs	r2, r3
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	69db      	ldr	r3, [r3, #28]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	681b      	ldr	r3, [r3, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	4b92      	ldr	r3, [pc, #584]	@ (8004cf8 <UART_SetConfig+0x274>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	687a      	ldr	r2, [r7, #4]
 8004ab4:	6812      	ldr	r2, [r2, #0]
 8004ab6:	6979      	ldr	r1, [r7, #20]
 8004ab8:	430b      	orrs	r3, r1
 8004aba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	68da      	ldr	r2, [r3, #12]
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	681b      	ldr	r3, [r3, #0]
 8004ace:	430a      	orrs	r2, r1
 8004ad0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	699b      	ldr	r3, [r3, #24]
 8004ad6:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	6a1b      	ldr	r3, [r3, #32]
 8004adc:	697a      	ldr	r2, [r7, #20]
 8004ade:	4313      	orrs	r3, r2
 8004ae0:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	689b      	ldr	r3, [r3, #8]
 8004ae8:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	697a      	ldr	r2, [r7, #20]
 8004af2:	430a      	orrs	r2, r1
 8004af4:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	4a80      	ldr	r2, [pc, #512]	@ (8004cfc <UART_SetConfig+0x278>)
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d120      	bne.n	8004b42 <UART_SetConfig+0xbe>
 8004b00:	4b7f      	ldr	r3, [pc, #508]	@ (8004d00 <UART_SetConfig+0x27c>)
 8004b02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b04:	f003 0303 	and.w	r3, r3, #3
 8004b08:	2b03      	cmp	r3, #3
 8004b0a:	d817      	bhi.n	8004b3c <UART_SetConfig+0xb8>
 8004b0c:	a201      	add	r2, pc, #4	@ (adr r2, 8004b14 <UART_SetConfig+0x90>)
 8004b0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b12:	bf00      	nop
 8004b14:	08004b25 	.word	0x08004b25
 8004b18:	08004b31 	.word	0x08004b31
 8004b1c:	08004b37 	.word	0x08004b37
 8004b20:	08004b2b 	.word	0x08004b2b
 8004b24:	2301      	movs	r3, #1
 8004b26:	77fb      	strb	r3, [r7, #31]
 8004b28:	e0b5      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b2a:	2302      	movs	r3, #2
 8004b2c:	77fb      	strb	r3, [r7, #31]
 8004b2e:	e0b2      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b30:	2304      	movs	r3, #4
 8004b32:	77fb      	strb	r3, [r7, #31]
 8004b34:	e0af      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b36:	2308      	movs	r3, #8
 8004b38:	77fb      	strb	r3, [r7, #31]
 8004b3a:	e0ac      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b3c:	2310      	movs	r3, #16
 8004b3e:	77fb      	strb	r3, [r7, #31]
 8004b40:	e0a9      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	4a6f      	ldr	r2, [pc, #444]	@ (8004d04 <UART_SetConfig+0x280>)
 8004b48:	4293      	cmp	r3, r2
 8004b4a:	d124      	bne.n	8004b96 <UART_SetConfig+0x112>
 8004b4c:	4b6c      	ldr	r3, [pc, #432]	@ (8004d00 <UART_SetConfig+0x27c>)
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b50:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004b54:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b58:	d011      	beq.n	8004b7e <UART_SetConfig+0xfa>
 8004b5a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004b5e:	d817      	bhi.n	8004b90 <UART_SetConfig+0x10c>
 8004b60:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b64:	d011      	beq.n	8004b8a <UART_SetConfig+0x106>
 8004b66:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004b6a:	d811      	bhi.n	8004b90 <UART_SetConfig+0x10c>
 8004b6c:	2b00      	cmp	r3, #0
 8004b6e:	d003      	beq.n	8004b78 <UART_SetConfig+0xf4>
 8004b70:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004b74:	d006      	beq.n	8004b84 <UART_SetConfig+0x100>
 8004b76:	e00b      	b.n	8004b90 <UART_SetConfig+0x10c>
 8004b78:	2300      	movs	r3, #0
 8004b7a:	77fb      	strb	r3, [r7, #31]
 8004b7c:	e08b      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b7e:	2302      	movs	r3, #2
 8004b80:	77fb      	strb	r3, [r7, #31]
 8004b82:	e088      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b84:	2304      	movs	r3, #4
 8004b86:	77fb      	strb	r3, [r7, #31]
 8004b88:	e085      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b8a:	2308      	movs	r3, #8
 8004b8c:	77fb      	strb	r3, [r7, #31]
 8004b8e:	e082      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b90:	2310      	movs	r3, #16
 8004b92:	77fb      	strb	r3, [r7, #31]
 8004b94:	e07f      	b.n	8004c96 <UART_SetConfig+0x212>
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4a5b      	ldr	r2, [pc, #364]	@ (8004d08 <UART_SetConfig+0x284>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d124      	bne.n	8004bea <UART_SetConfig+0x166>
 8004ba0:	4b57      	ldr	r3, [pc, #348]	@ (8004d00 <UART_SetConfig+0x27c>)
 8004ba2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ba4:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004ba8:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bac:	d011      	beq.n	8004bd2 <UART_SetConfig+0x14e>
 8004bae:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004bb2:	d817      	bhi.n	8004be4 <UART_SetConfig+0x160>
 8004bb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bb8:	d011      	beq.n	8004bde <UART_SetConfig+0x15a>
 8004bba:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004bbe:	d811      	bhi.n	8004be4 <UART_SetConfig+0x160>
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d003      	beq.n	8004bcc <UART_SetConfig+0x148>
 8004bc4:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004bc8:	d006      	beq.n	8004bd8 <UART_SetConfig+0x154>
 8004bca:	e00b      	b.n	8004be4 <UART_SetConfig+0x160>
 8004bcc:	2300      	movs	r3, #0
 8004bce:	77fb      	strb	r3, [r7, #31]
 8004bd0:	e061      	b.n	8004c96 <UART_SetConfig+0x212>
 8004bd2:	2302      	movs	r3, #2
 8004bd4:	77fb      	strb	r3, [r7, #31]
 8004bd6:	e05e      	b.n	8004c96 <UART_SetConfig+0x212>
 8004bd8:	2304      	movs	r3, #4
 8004bda:	77fb      	strb	r3, [r7, #31]
 8004bdc:	e05b      	b.n	8004c96 <UART_SetConfig+0x212>
 8004bde:	2308      	movs	r3, #8
 8004be0:	77fb      	strb	r3, [r7, #31]
 8004be2:	e058      	b.n	8004c96 <UART_SetConfig+0x212>
 8004be4:	2310      	movs	r3, #16
 8004be6:	77fb      	strb	r3, [r7, #31]
 8004be8:	e055      	b.n	8004c96 <UART_SetConfig+0x212>
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	4a47      	ldr	r2, [pc, #284]	@ (8004d0c <UART_SetConfig+0x288>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d124      	bne.n	8004c3e <UART_SetConfig+0x1ba>
 8004bf4:	4b42      	ldr	r3, [pc, #264]	@ (8004d00 <UART_SetConfig+0x27c>)
 8004bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bf8:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004bfc:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c00:	d011      	beq.n	8004c26 <UART_SetConfig+0x1a2>
 8004c02:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004c06:	d817      	bhi.n	8004c38 <UART_SetConfig+0x1b4>
 8004c08:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c0c:	d011      	beq.n	8004c32 <UART_SetConfig+0x1ae>
 8004c0e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004c12:	d811      	bhi.n	8004c38 <UART_SetConfig+0x1b4>
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d003      	beq.n	8004c20 <UART_SetConfig+0x19c>
 8004c18:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004c1c:	d006      	beq.n	8004c2c <UART_SetConfig+0x1a8>
 8004c1e:	e00b      	b.n	8004c38 <UART_SetConfig+0x1b4>
 8004c20:	2300      	movs	r3, #0
 8004c22:	77fb      	strb	r3, [r7, #31]
 8004c24:	e037      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c26:	2302      	movs	r3, #2
 8004c28:	77fb      	strb	r3, [r7, #31]
 8004c2a:	e034      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c2c:	2304      	movs	r3, #4
 8004c2e:	77fb      	strb	r3, [r7, #31]
 8004c30:	e031      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c32:	2308      	movs	r3, #8
 8004c34:	77fb      	strb	r3, [r7, #31]
 8004c36:	e02e      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c38:	2310      	movs	r3, #16
 8004c3a:	77fb      	strb	r3, [r7, #31]
 8004c3c:	e02b      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	4a33      	ldr	r2, [pc, #204]	@ (8004d10 <UART_SetConfig+0x28c>)
 8004c44:	4293      	cmp	r3, r2
 8004c46:	d124      	bne.n	8004c92 <UART_SetConfig+0x20e>
 8004c48:	4b2d      	ldr	r3, [pc, #180]	@ (8004d00 <UART_SetConfig+0x27c>)
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004c50:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c54:	d011      	beq.n	8004c7a <UART_SetConfig+0x1f6>
 8004c56:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004c5a:	d817      	bhi.n	8004c8c <UART_SetConfig+0x208>
 8004c5c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c60:	d011      	beq.n	8004c86 <UART_SetConfig+0x202>
 8004c62:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004c66:	d811      	bhi.n	8004c8c <UART_SetConfig+0x208>
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	d003      	beq.n	8004c74 <UART_SetConfig+0x1f0>
 8004c6c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004c70:	d006      	beq.n	8004c80 <UART_SetConfig+0x1fc>
 8004c72:	e00b      	b.n	8004c8c <UART_SetConfig+0x208>
 8004c74:	2300      	movs	r3, #0
 8004c76:	77fb      	strb	r3, [r7, #31]
 8004c78:	e00d      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	77fb      	strb	r3, [r7, #31]
 8004c7e:	e00a      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c80:	2304      	movs	r3, #4
 8004c82:	77fb      	strb	r3, [r7, #31]
 8004c84:	e007      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c86:	2308      	movs	r3, #8
 8004c88:	77fb      	strb	r3, [r7, #31]
 8004c8a:	e004      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c8c:	2310      	movs	r3, #16
 8004c8e:	77fb      	strb	r3, [r7, #31]
 8004c90:	e001      	b.n	8004c96 <UART_SetConfig+0x212>
 8004c92:	2310      	movs	r3, #16
 8004c94:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	69db      	ldr	r3, [r3, #28]
 8004c9a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c9e:	d16b      	bne.n	8004d78 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004ca0:	7ffb      	ldrb	r3, [r7, #31]
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d838      	bhi.n	8004d18 <UART_SetConfig+0x294>
 8004ca6:	a201      	add	r2, pc, #4	@ (adr r2, 8004cac <UART_SetConfig+0x228>)
 8004ca8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cac:	08004cd1 	.word	0x08004cd1
 8004cb0:	08004cd9 	.word	0x08004cd9
 8004cb4:	08004ce1 	.word	0x08004ce1
 8004cb8:	08004d19 	.word	0x08004d19
 8004cbc:	08004ce7 	.word	0x08004ce7
 8004cc0:	08004d19 	.word	0x08004d19
 8004cc4:	08004d19 	.word	0x08004d19
 8004cc8:	08004d19 	.word	0x08004d19
 8004ccc:	08004cef 	.word	0x08004cef
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cd0:	f7ff fb9e 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8004cd4:	61b8      	str	r0, [r7, #24]
        break;
 8004cd6:	e024      	b.n	8004d22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cd8:	f7ff fbbc 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8004cdc:	61b8      	str	r0, [r7, #24]
        break;
 8004cde:	e020      	b.n	8004d22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <UART_SetConfig+0x290>)
 8004ce2:	61bb      	str	r3, [r7, #24]
        break;
 8004ce4:	e01d      	b.n	8004d22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ce6:	f7ff fb33 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8004cea:	61b8      	str	r0, [r7, #24]
        break;
 8004cec:	e019      	b.n	8004d22 <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004cee:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004cf2:	61bb      	str	r3, [r7, #24]
        break;
 8004cf4:	e015      	b.n	8004d22 <UART_SetConfig+0x29e>
 8004cf6:	bf00      	nop
 8004cf8:	efff69f3 	.word	0xefff69f3
 8004cfc:	40013800 	.word	0x40013800
 8004d00:	40021000 	.word	0x40021000
 8004d04:	40004400 	.word	0x40004400
 8004d08:	40004800 	.word	0x40004800
 8004d0c:	40004c00 	.word	0x40004c00
 8004d10:	40005000 	.word	0x40005000
 8004d14:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	77bb      	strb	r3, [r7, #30]
        break;
 8004d20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d22:	69bb      	ldr	r3, [r7, #24]
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d073      	beq.n	8004e10 <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004d28:	69bb      	ldr	r3, [r7, #24]
 8004d2a:	005a      	lsls	r2, r3, #1
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	685b      	ldr	r3, [r3, #4]
 8004d30:	085b      	lsrs	r3, r3, #1
 8004d32:	441a      	add	r2, r3
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	685b      	ldr	r3, [r3, #4]
 8004d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d3c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d3e:	693b      	ldr	r3, [r7, #16]
 8004d40:	2b0f      	cmp	r3, #15
 8004d42:	d916      	bls.n	8004d72 <UART_SetConfig+0x2ee>
 8004d44:	693b      	ldr	r3, [r7, #16]
 8004d46:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d4a:	d212      	bcs.n	8004d72 <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d4c:	693b      	ldr	r3, [r7, #16]
 8004d4e:	b29b      	uxth	r3, r3
 8004d50:	f023 030f 	bic.w	r3, r3, #15
 8004d54:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	085b      	lsrs	r3, r3, #1
 8004d5a:	b29b      	uxth	r3, r3
 8004d5c:	f003 0307 	and.w	r3, r3, #7
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	89fb      	ldrh	r3, [r7, #14]
 8004d64:	4313      	orrs	r3, r2
 8004d66:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	89fa      	ldrh	r2, [r7, #14]
 8004d6e:	60da      	str	r2, [r3, #12]
 8004d70:	e04e      	b.n	8004e10 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004d72:	2301      	movs	r3, #1
 8004d74:	77bb      	strb	r3, [r7, #30]
 8004d76:	e04b      	b.n	8004e10 <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004d78:	7ffb      	ldrb	r3, [r7, #31]
 8004d7a:	2b08      	cmp	r3, #8
 8004d7c:	d827      	bhi.n	8004dce <UART_SetConfig+0x34a>
 8004d7e:	a201      	add	r2, pc, #4	@ (adr r2, 8004d84 <UART_SetConfig+0x300>)
 8004d80:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d84:	08004da9 	.word	0x08004da9
 8004d88:	08004db1 	.word	0x08004db1
 8004d8c:	08004db9 	.word	0x08004db9
 8004d90:	08004dcf 	.word	0x08004dcf
 8004d94:	08004dbf 	.word	0x08004dbf
 8004d98:	08004dcf 	.word	0x08004dcf
 8004d9c:	08004dcf 	.word	0x08004dcf
 8004da0:	08004dcf 	.word	0x08004dcf
 8004da4:	08004dc7 	.word	0x08004dc7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004da8:	f7ff fb32 	bl	8004410 <HAL_RCC_GetPCLK1Freq>
 8004dac:	61b8      	str	r0, [r7, #24]
        break;
 8004dae:	e013      	b.n	8004dd8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004db0:	f7ff fb50 	bl	8004454 <HAL_RCC_GetPCLK2Freq>
 8004db4:	61b8      	str	r0, [r7, #24]
        break;
 8004db6:	e00f      	b.n	8004dd8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004db8:	4b1b      	ldr	r3, [pc, #108]	@ (8004e28 <UART_SetConfig+0x3a4>)
 8004dba:	61bb      	str	r3, [r7, #24]
        break;
 8004dbc:	e00c      	b.n	8004dd8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004dbe:	f7ff fac7 	bl	8004350 <HAL_RCC_GetSysClockFreq>
 8004dc2:	61b8      	str	r0, [r7, #24]
        break;
 8004dc4:	e008      	b.n	8004dd8 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004dc6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004dca:	61bb      	str	r3, [r7, #24]
        break;
 8004dcc:	e004      	b.n	8004dd8 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004dce:	2300      	movs	r3, #0
 8004dd0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	77bb      	strb	r3, [r7, #30]
        break;
 8004dd6:	bf00      	nop
    }

    if (pclk != 0U)
 8004dd8:	69bb      	ldr	r3, [r7, #24]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d018      	beq.n	8004e10 <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	685b      	ldr	r3, [r3, #4]
 8004de2:	085a      	lsrs	r2, r3, #1
 8004de4:	69bb      	ldr	r3, [r7, #24]
 8004de6:	441a      	add	r2, r3
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	685b      	ldr	r3, [r3, #4]
 8004dec:	fbb2 f3f3 	udiv	r3, r2, r3
 8004df0:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004df2:	693b      	ldr	r3, [r7, #16]
 8004df4:	2b0f      	cmp	r3, #15
 8004df6:	d909      	bls.n	8004e0c <UART_SetConfig+0x388>
 8004df8:	693b      	ldr	r3, [r7, #16]
 8004dfa:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004dfe:	d205      	bcs.n	8004e0c <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004e00:	693b      	ldr	r3, [r7, #16]
 8004e02:	b29a      	uxth	r2, r3
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	60da      	str	r2, [r3, #12]
 8004e0a:	e001      	b.n	8004e10 <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004e0c:	2301      	movs	r3, #1
 8004e0e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2200      	movs	r2, #0
 8004e14:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004e1c:	7fbb      	ldrb	r3, [r7, #30]
}
 8004e1e:	4618      	mov	r0, r3
 8004e20:	3720      	adds	r7, #32
 8004e22:	46bd      	mov	sp, r7
 8004e24:	bd80      	pop	{r7, pc}
 8004e26:	bf00      	nop
 8004e28:	007a1200 	.word	0x007a1200

08004e2c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b083      	sub	sp, #12
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e38:	f003 0308 	and.w	r3, r3, #8
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d00a      	beq.n	8004e56 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	685b      	ldr	r3, [r3, #4]
 8004e46:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	430a      	orrs	r2, r1
 8004e54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e5a:	f003 0301 	and.w	r3, r3, #1
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d00a      	beq.n	8004e78 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	685b      	ldr	r3, [r3, #4]
 8004e68:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	430a      	orrs	r2, r1
 8004e76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e7c:	f003 0302 	and.w	r3, r3, #2
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d00a      	beq.n	8004e9a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	685b      	ldr	r3, [r3, #4]
 8004e8a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	430a      	orrs	r2, r1
 8004e98:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e9e:	f003 0304 	and.w	r3, r3, #4
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d00a      	beq.n	8004ebc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	430a      	orrs	r2, r1
 8004eba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	f003 0310 	and.w	r3, r3, #16
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d00a      	beq.n	8004ede <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	689b      	ldr	r3, [r3, #8]
 8004ece:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	430a      	orrs	r2, r1
 8004edc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ee2:	f003 0320 	and.w	r3, r3, #32
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00a      	beq.n	8004f00 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	689b      	ldr	r3, [r3, #8]
 8004ef0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	430a      	orrs	r2, r1
 8004efe:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f04:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d01a      	beq.n	8004f42 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	685b      	ldr	r3, [r3, #4]
 8004f12:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	430a      	orrs	r2, r1
 8004f20:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f26:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004f2a:	d10a      	bne.n	8004f42 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	681b      	ldr	r3, [r3, #0]
 8004f30:	685b      	ldr	r3, [r3, #4]
 8004f32:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f3a:	687b      	ldr	r3, [r7, #4]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	430a      	orrs	r2, r1
 8004f40:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f46:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d00a      	beq.n	8004f64 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	430a      	orrs	r2, r1
 8004f62:	605a      	str	r2, [r3, #4]
  }
}
 8004f64:	bf00      	nop
 8004f66:	370c      	adds	r7, #12
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f6e:	4770      	bx	lr

08004f70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004f70:	b580      	push	{r7, lr}
 8004f72:	b098      	sub	sp, #96	@ 0x60
 8004f74:	af02      	add	r7, sp, #8
 8004f76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004f80:	f7fc fa3a 	bl	80013f8 <HAL_GetTick>
 8004f84:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f003 0308 	and.w	r3, r3, #8
 8004f90:	2b08      	cmp	r3, #8
 8004f92:	d12e      	bne.n	8004ff2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004f94:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8004f98:	9300      	str	r3, [sp, #0]
 8004f9a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8004f9c:	2200      	movs	r2, #0
 8004f9e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f88c 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d021      	beq.n	8004ff2 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fb6:	e853 3f00 	ldrex	r3, [r3]
 8004fba:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004fbc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004fbe:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004fc2:	653b      	str	r3, [r7, #80]	@ 0x50
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	461a      	mov	r2, r3
 8004fca:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004fcc:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fce:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004fd0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004fd2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004fd4:	e841 2300 	strex	r3, r2, [r1]
 8004fd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d1e6      	bne.n	8004fae <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	2220      	movs	r2, #32
 8004fe4:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004fee:	2303      	movs	r3, #3
 8004ff0:	e062      	b.n	80050b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f003 0304 	and.w	r3, r3, #4
 8004ffc:	2b04      	cmp	r3, #4
 8004ffe:	d149      	bne.n	8005094 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005000:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005004:	9300      	str	r3, [sp, #0]
 8005006:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005008:	2200      	movs	r2, #0
 800500a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800500e:	6878      	ldr	r0, [r7, #4]
 8005010:	f000 f856 	bl	80050c0 <UART_WaitOnFlagUntilTimeout>
 8005014:	4603      	mov	r3, r0
 8005016:	2b00      	cmp	r3, #0
 8005018:	d03c      	beq.n	8005094 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005020:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005022:	e853 3f00 	ldrex	r3, [r3]
 8005026:	623b      	str	r3, [r7, #32]
   return(result);
 8005028:	6a3b      	ldr	r3, [r7, #32]
 800502a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800502e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	461a      	mov	r2, r3
 8005036:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005038:	633b      	str	r3, [r7, #48]	@ 0x30
 800503a:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800503c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800503e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005040:	e841 2300 	strex	r3, r2, [r1]
 8005044:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005048:	2b00      	cmp	r3, #0
 800504a:	d1e6      	bne.n	800501a <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3308      	adds	r3, #8
 8005052:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005054:	693b      	ldr	r3, [r7, #16]
 8005056:	e853 3f00 	ldrex	r3, [r3]
 800505a:	60fb      	str	r3, [r7, #12]
   return(result);
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	f023 0301 	bic.w	r3, r3, #1
 8005062:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	3308      	adds	r3, #8
 800506a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800506c:	61fa      	str	r2, [r7, #28]
 800506e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005070:	69b9      	ldr	r1, [r7, #24]
 8005072:	69fa      	ldr	r2, [r7, #28]
 8005074:	e841 2300 	strex	r3, r2, [r1]
 8005078:	617b      	str	r3, [r7, #20]
   return(result);
 800507a:	697b      	ldr	r3, [r7, #20]
 800507c:	2b00      	cmp	r3, #0
 800507e:	d1e5      	bne.n	800504c <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2220      	movs	r2, #32
 8005084:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e011      	b.n	80050b8 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2220      	movs	r2, #32
 8005098:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	2220      	movs	r2, #32
 800509e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	2200      	movs	r2, #0
 80050a6:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	2200      	movs	r2, #0
 80050ac:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	2200      	movs	r2, #0
 80050b2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 80050b6:	2300      	movs	r3, #0
}
 80050b8:	4618      	mov	r0, r3
 80050ba:	3758      	adds	r7, #88	@ 0x58
 80050bc:	46bd      	mov	sp, r7
 80050be:	bd80      	pop	{r7, pc}

080050c0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80050c0:	b580      	push	{r7, lr}
 80050c2:	b084      	sub	sp, #16
 80050c4:	af00      	add	r7, sp, #0
 80050c6:	60f8      	str	r0, [r7, #12]
 80050c8:	60b9      	str	r1, [r7, #8]
 80050ca:	603b      	str	r3, [r7, #0]
 80050cc:	4613      	mov	r3, r2
 80050ce:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80050d0:	e04f      	b.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80050d8:	d04b      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050da:	f7fc f98d 	bl	80013f8 <HAL_GetTick>
 80050de:	4602      	mov	r2, r0
 80050e0:	683b      	ldr	r3, [r7, #0]
 80050e2:	1ad3      	subs	r3, r2, r3
 80050e4:	69ba      	ldr	r2, [r7, #24]
 80050e6:	429a      	cmp	r2, r3
 80050e8:	d302      	bcc.n	80050f0 <UART_WaitOnFlagUntilTimeout+0x30>
 80050ea:	69bb      	ldr	r3, [r7, #24]
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d101      	bne.n	80050f4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80050f0:	2303      	movs	r3, #3
 80050f2:	e04e      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	f003 0304 	and.w	r3, r3, #4
 80050fe:	2b00      	cmp	r3, #0
 8005100:	d037      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005102:	68bb      	ldr	r3, [r7, #8]
 8005104:	2b80      	cmp	r3, #128	@ 0x80
 8005106:	d034      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005108:	68bb      	ldr	r3, [r7, #8]
 800510a:	2b40      	cmp	r3, #64	@ 0x40
 800510c:	d031      	beq.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	69db      	ldr	r3, [r3, #28]
 8005114:	f003 0308 	and.w	r3, r3, #8
 8005118:	2b08      	cmp	r3, #8
 800511a:	d110      	bne.n	800513e <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800511c:	68fb      	ldr	r3, [r7, #12]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	2208      	movs	r2, #8
 8005122:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005124:	68f8      	ldr	r0, [r7, #12]
 8005126:	f000 f838 	bl	800519a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	2208      	movs	r2, #8
 800512e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	2200      	movs	r2, #0
 8005136:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 800513a:	2301      	movs	r3, #1
 800513c:	e029      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	69db      	ldr	r3, [r3, #28]
 8005144:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005148:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800514c:	d111      	bne.n	8005172 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005156:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005158:	68f8      	ldr	r0, [r7, #12]
 800515a:	f000 f81e 	bl	800519a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800515e:	68fb      	ldr	r3, [r7, #12]
 8005160:	2220      	movs	r2, #32
 8005162:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800516e:	2303      	movs	r3, #3
 8005170:	e00f      	b.n	8005192 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	69da      	ldr	r2, [r3, #28]
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	4013      	ands	r3, r2
 800517c:	68ba      	ldr	r2, [r7, #8]
 800517e:	429a      	cmp	r2, r3
 8005180:	bf0c      	ite	eq
 8005182:	2301      	moveq	r3, #1
 8005184:	2300      	movne	r3, #0
 8005186:	b2db      	uxtb	r3, r3
 8005188:	461a      	mov	r2, r3
 800518a:	79fb      	ldrb	r3, [r7, #7]
 800518c:	429a      	cmp	r2, r3
 800518e:	d0a0      	beq.n	80050d2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005190:	2300      	movs	r3, #0
}
 8005192:	4618      	mov	r0, r3
 8005194:	3710      	adds	r7, #16
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}

0800519a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800519a:	b480      	push	{r7}
 800519c:	b095      	sub	sp, #84	@ 0x54
 800519e:	af00      	add	r7, sp, #0
 80051a0:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051aa:	e853 3f00 	ldrex	r3, [r3]
 80051ae:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051b2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	461a      	mov	r2, r3
 80051be:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051c0:	643b      	str	r3, [r7, #64]	@ 0x40
 80051c2:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051c4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051c6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051c8:	e841 2300 	strex	r3, r2, [r1]
 80051cc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d1e6      	bne.n	80051a2 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	3308      	adds	r3, #8
 80051da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6a3b      	ldr	r3, [r7, #32]
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80051e4:	69fb      	ldr	r3, [r7, #28]
 80051e6:	f023 0301 	bic.w	r3, r3, #1
 80051ea:	64bb      	str	r3, [r7, #72]	@ 0x48
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	3308      	adds	r3, #8
 80051f2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80051f4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80051f6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80051fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005202:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e5      	bne.n	80051d4 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800520c:	2b01      	cmp	r3, #1
 800520e:	d118      	bne.n	8005242 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	e853 3f00 	ldrex	r3, [r3]
 800521c:	60bb      	str	r3, [r7, #8]
   return(result);
 800521e:	68bb      	ldr	r3, [r7, #8]
 8005220:	f023 0310 	bic.w	r3, r3, #16
 8005224:	647b      	str	r3, [r7, #68]	@ 0x44
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	461a      	mov	r2, r3
 800522c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800522e:	61bb      	str	r3, [r7, #24]
 8005230:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005232:	6979      	ldr	r1, [r7, #20]
 8005234:	69ba      	ldr	r2, [r7, #24]
 8005236:	e841 2300 	strex	r3, r2, [r1]
 800523a:	613b      	str	r3, [r7, #16]
   return(result);
 800523c:	693b      	ldr	r3, [r7, #16]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d1e6      	bne.n	8005210 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	2220      	movs	r2, #32
 8005246:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	2200      	movs	r2, #0
 800524e:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005256:	bf00      	nop
 8005258:	3754      	adds	r7, #84	@ 0x54
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr

08005262 <__cvt>:
 8005262:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005266:	ec57 6b10 	vmov	r6, r7, d0
 800526a:	2f00      	cmp	r7, #0
 800526c:	460c      	mov	r4, r1
 800526e:	4619      	mov	r1, r3
 8005270:	463b      	mov	r3, r7
 8005272:	bfbb      	ittet	lt
 8005274:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005278:	461f      	movlt	r7, r3
 800527a:	2300      	movge	r3, #0
 800527c:	232d      	movlt	r3, #45	@ 0x2d
 800527e:	700b      	strb	r3, [r1, #0]
 8005280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005282:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005286:	4691      	mov	r9, r2
 8005288:	f023 0820 	bic.w	r8, r3, #32
 800528c:	bfbc      	itt	lt
 800528e:	4632      	movlt	r2, r6
 8005290:	4616      	movlt	r6, r2
 8005292:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005296:	d005      	beq.n	80052a4 <__cvt+0x42>
 8005298:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800529c:	d100      	bne.n	80052a0 <__cvt+0x3e>
 800529e:	3401      	adds	r4, #1
 80052a0:	2102      	movs	r1, #2
 80052a2:	e000      	b.n	80052a6 <__cvt+0x44>
 80052a4:	2103      	movs	r1, #3
 80052a6:	ab03      	add	r3, sp, #12
 80052a8:	9301      	str	r3, [sp, #4]
 80052aa:	ab02      	add	r3, sp, #8
 80052ac:	9300      	str	r3, [sp, #0]
 80052ae:	ec47 6b10 	vmov	d0, r6, r7
 80052b2:	4653      	mov	r3, sl
 80052b4:	4622      	mov	r2, r4
 80052b6:	f000 fe4b 	bl	8005f50 <_dtoa_r>
 80052ba:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80052be:	4605      	mov	r5, r0
 80052c0:	d119      	bne.n	80052f6 <__cvt+0x94>
 80052c2:	f019 0f01 	tst.w	r9, #1
 80052c6:	d00e      	beq.n	80052e6 <__cvt+0x84>
 80052c8:	eb00 0904 	add.w	r9, r0, r4
 80052cc:	2200      	movs	r2, #0
 80052ce:	2300      	movs	r3, #0
 80052d0:	4630      	mov	r0, r6
 80052d2:	4639      	mov	r1, r7
 80052d4:	f7fb fc00 	bl	8000ad8 <__aeabi_dcmpeq>
 80052d8:	b108      	cbz	r0, 80052de <__cvt+0x7c>
 80052da:	f8cd 900c 	str.w	r9, [sp, #12]
 80052de:	2230      	movs	r2, #48	@ 0x30
 80052e0:	9b03      	ldr	r3, [sp, #12]
 80052e2:	454b      	cmp	r3, r9
 80052e4:	d31e      	bcc.n	8005324 <__cvt+0xc2>
 80052e6:	9b03      	ldr	r3, [sp, #12]
 80052e8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80052ea:	1b5b      	subs	r3, r3, r5
 80052ec:	4628      	mov	r0, r5
 80052ee:	6013      	str	r3, [r2, #0]
 80052f0:	b004      	add	sp, #16
 80052f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052f6:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80052fa:	eb00 0904 	add.w	r9, r0, r4
 80052fe:	d1e5      	bne.n	80052cc <__cvt+0x6a>
 8005300:	7803      	ldrb	r3, [r0, #0]
 8005302:	2b30      	cmp	r3, #48	@ 0x30
 8005304:	d10a      	bne.n	800531c <__cvt+0xba>
 8005306:	2200      	movs	r2, #0
 8005308:	2300      	movs	r3, #0
 800530a:	4630      	mov	r0, r6
 800530c:	4639      	mov	r1, r7
 800530e:	f7fb fbe3 	bl	8000ad8 <__aeabi_dcmpeq>
 8005312:	b918      	cbnz	r0, 800531c <__cvt+0xba>
 8005314:	f1c4 0401 	rsb	r4, r4, #1
 8005318:	f8ca 4000 	str.w	r4, [sl]
 800531c:	f8da 3000 	ldr.w	r3, [sl]
 8005320:	4499      	add	r9, r3
 8005322:	e7d3      	b.n	80052cc <__cvt+0x6a>
 8005324:	1c59      	adds	r1, r3, #1
 8005326:	9103      	str	r1, [sp, #12]
 8005328:	701a      	strb	r2, [r3, #0]
 800532a:	e7d9      	b.n	80052e0 <__cvt+0x7e>

0800532c <__exponent>:
 800532c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800532e:	2900      	cmp	r1, #0
 8005330:	bfba      	itte	lt
 8005332:	4249      	neglt	r1, r1
 8005334:	232d      	movlt	r3, #45	@ 0x2d
 8005336:	232b      	movge	r3, #43	@ 0x2b
 8005338:	2909      	cmp	r1, #9
 800533a:	7002      	strb	r2, [r0, #0]
 800533c:	7043      	strb	r3, [r0, #1]
 800533e:	dd29      	ble.n	8005394 <__exponent+0x68>
 8005340:	f10d 0307 	add.w	r3, sp, #7
 8005344:	461d      	mov	r5, r3
 8005346:	270a      	movs	r7, #10
 8005348:	461a      	mov	r2, r3
 800534a:	fbb1 f6f7 	udiv	r6, r1, r7
 800534e:	fb07 1416 	mls	r4, r7, r6, r1
 8005352:	3430      	adds	r4, #48	@ 0x30
 8005354:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005358:	460c      	mov	r4, r1
 800535a:	2c63      	cmp	r4, #99	@ 0x63
 800535c:	f103 33ff 	add.w	r3, r3, #4294967295
 8005360:	4631      	mov	r1, r6
 8005362:	dcf1      	bgt.n	8005348 <__exponent+0x1c>
 8005364:	3130      	adds	r1, #48	@ 0x30
 8005366:	1e94      	subs	r4, r2, #2
 8005368:	f803 1c01 	strb.w	r1, [r3, #-1]
 800536c:	1c41      	adds	r1, r0, #1
 800536e:	4623      	mov	r3, r4
 8005370:	42ab      	cmp	r3, r5
 8005372:	d30a      	bcc.n	800538a <__exponent+0x5e>
 8005374:	f10d 0309 	add.w	r3, sp, #9
 8005378:	1a9b      	subs	r3, r3, r2
 800537a:	42ac      	cmp	r4, r5
 800537c:	bf88      	it	hi
 800537e:	2300      	movhi	r3, #0
 8005380:	3302      	adds	r3, #2
 8005382:	4403      	add	r3, r0
 8005384:	1a18      	subs	r0, r3, r0
 8005386:	b003      	add	sp, #12
 8005388:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800538a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800538e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005392:	e7ed      	b.n	8005370 <__exponent+0x44>
 8005394:	2330      	movs	r3, #48	@ 0x30
 8005396:	3130      	adds	r1, #48	@ 0x30
 8005398:	7083      	strb	r3, [r0, #2]
 800539a:	70c1      	strb	r1, [r0, #3]
 800539c:	1d03      	adds	r3, r0, #4
 800539e:	e7f1      	b.n	8005384 <__exponent+0x58>

080053a0 <_printf_float>:
 80053a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053a4:	b08d      	sub	sp, #52	@ 0x34
 80053a6:	460c      	mov	r4, r1
 80053a8:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80053ac:	4616      	mov	r6, r2
 80053ae:	461f      	mov	r7, r3
 80053b0:	4605      	mov	r5, r0
 80053b2:	f000 fccd 	bl	8005d50 <_localeconv_r>
 80053b6:	6803      	ldr	r3, [r0, #0]
 80053b8:	9304      	str	r3, [sp, #16]
 80053ba:	4618      	mov	r0, r3
 80053bc:	f7fa ff60 	bl	8000280 <strlen>
 80053c0:	2300      	movs	r3, #0
 80053c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80053c4:	f8d8 3000 	ldr.w	r3, [r8]
 80053c8:	9005      	str	r0, [sp, #20]
 80053ca:	3307      	adds	r3, #7
 80053cc:	f023 0307 	bic.w	r3, r3, #7
 80053d0:	f103 0208 	add.w	r2, r3, #8
 80053d4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80053d8:	f8d4 b000 	ldr.w	fp, [r4]
 80053dc:	f8c8 2000 	str.w	r2, [r8]
 80053e0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80053e4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80053e8:	9307      	str	r3, [sp, #28]
 80053ea:	f8cd 8018 	str.w	r8, [sp, #24]
 80053ee:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80053f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80053f6:	4b9c      	ldr	r3, [pc, #624]	@ (8005668 <_printf_float+0x2c8>)
 80053f8:	f04f 32ff 	mov.w	r2, #4294967295
 80053fc:	f7fb fb9e 	bl	8000b3c <__aeabi_dcmpun>
 8005400:	bb70      	cbnz	r0, 8005460 <_printf_float+0xc0>
 8005402:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005406:	4b98      	ldr	r3, [pc, #608]	@ (8005668 <_printf_float+0x2c8>)
 8005408:	f04f 32ff 	mov.w	r2, #4294967295
 800540c:	f7fb fb78 	bl	8000b00 <__aeabi_dcmple>
 8005410:	bb30      	cbnz	r0, 8005460 <_printf_float+0xc0>
 8005412:	2200      	movs	r2, #0
 8005414:	2300      	movs	r3, #0
 8005416:	4640      	mov	r0, r8
 8005418:	4649      	mov	r1, r9
 800541a:	f7fb fb67 	bl	8000aec <__aeabi_dcmplt>
 800541e:	b110      	cbz	r0, 8005426 <_printf_float+0x86>
 8005420:	232d      	movs	r3, #45	@ 0x2d
 8005422:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005426:	4a91      	ldr	r2, [pc, #580]	@ (800566c <_printf_float+0x2cc>)
 8005428:	4b91      	ldr	r3, [pc, #580]	@ (8005670 <_printf_float+0x2d0>)
 800542a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800542e:	bf94      	ite	ls
 8005430:	4690      	movls	r8, r2
 8005432:	4698      	movhi	r8, r3
 8005434:	2303      	movs	r3, #3
 8005436:	6123      	str	r3, [r4, #16]
 8005438:	f02b 0304 	bic.w	r3, fp, #4
 800543c:	6023      	str	r3, [r4, #0]
 800543e:	f04f 0900 	mov.w	r9, #0
 8005442:	9700      	str	r7, [sp, #0]
 8005444:	4633      	mov	r3, r6
 8005446:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005448:	4621      	mov	r1, r4
 800544a:	4628      	mov	r0, r5
 800544c:	f000 f9d2 	bl	80057f4 <_printf_common>
 8005450:	3001      	adds	r0, #1
 8005452:	f040 808d 	bne.w	8005570 <_printf_float+0x1d0>
 8005456:	f04f 30ff 	mov.w	r0, #4294967295
 800545a:	b00d      	add	sp, #52	@ 0x34
 800545c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005460:	4642      	mov	r2, r8
 8005462:	464b      	mov	r3, r9
 8005464:	4640      	mov	r0, r8
 8005466:	4649      	mov	r1, r9
 8005468:	f7fb fb68 	bl	8000b3c <__aeabi_dcmpun>
 800546c:	b140      	cbz	r0, 8005480 <_printf_float+0xe0>
 800546e:	464b      	mov	r3, r9
 8005470:	2b00      	cmp	r3, #0
 8005472:	bfbc      	itt	lt
 8005474:	232d      	movlt	r3, #45	@ 0x2d
 8005476:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800547a:	4a7e      	ldr	r2, [pc, #504]	@ (8005674 <_printf_float+0x2d4>)
 800547c:	4b7e      	ldr	r3, [pc, #504]	@ (8005678 <_printf_float+0x2d8>)
 800547e:	e7d4      	b.n	800542a <_printf_float+0x8a>
 8005480:	6863      	ldr	r3, [r4, #4]
 8005482:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005486:	9206      	str	r2, [sp, #24]
 8005488:	1c5a      	adds	r2, r3, #1
 800548a:	d13b      	bne.n	8005504 <_printf_float+0x164>
 800548c:	2306      	movs	r3, #6
 800548e:	6063      	str	r3, [r4, #4]
 8005490:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005494:	2300      	movs	r3, #0
 8005496:	6022      	str	r2, [r4, #0]
 8005498:	9303      	str	r3, [sp, #12]
 800549a:	ab0a      	add	r3, sp, #40	@ 0x28
 800549c:	e9cd a301 	strd	sl, r3, [sp, #4]
 80054a0:	ab09      	add	r3, sp, #36	@ 0x24
 80054a2:	9300      	str	r3, [sp, #0]
 80054a4:	6861      	ldr	r1, [r4, #4]
 80054a6:	ec49 8b10 	vmov	d0, r8, r9
 80054aa:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 80054ae:	4628      	mov	r0, r5
 80054b0:	f7ff fed7 	bl	8005262 <__cvt>
 80054b4:	9b06      	ldr	r3, [sp, #24]
 80054b6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80054b8:	2b47      	cmp	r3, #71	@ 0x47
 80054ba:	4680      	mov	r8, r0
 80054bc:	d129      	bne.n	8005512 <_printf_float+0x172>
 80054be:	1cc8      	adds	r0, r1, #3
 80054c0:	db02      	blt.n	80054c8 <_printf_float+0x128>
 80054c2:	6863      	ldr	r3, [r4, #4]
 80054c4:	4299      	cmp	r1, r3
 80054c6:	dd41      	ble.n	800554c <_printf_float+0x1ac>
 80054c8:	f1aa 0a02 	sub.w	sl, sl, #2
 80054cc:	fa5f fa8a 	uxtb.w	sl, sl
 80054d0:	3901      	subs	r1, #1
 80054d2:	4652      	mov	r2, sl
 80054d4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80054d8:	9109      	str	r1, [sp, #36]	@ 0x24
 80054da:	f7ff ff27 	bl	800532c <__exponent>
 80054de:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80054e0:	1813      	adds	r3, r2, r0
 80054e2:	2a01      	cmp	r2, #1
 80054e4:	4681      	mov	r9, r0
 80054e6:	6123      	str	r3, [r4, #16]
 80054e8:	dc02      	bgt.n	80054f0 <_printf_float+0x150>
 80054ea:	6822      	ldr	r2, [r4, #0]
 80054ec:	07d2      	lsls	r2, r2, #31
 80054ee:	d501      	bpl.n	80054f4 <_printf_float+0x154>
 80054f0:	3301      	adds	r3, #1
 80054f2:	6123      	str	r3, [r4, #16]
 80054f4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d0a2      	beq.n	8005442 <_printf_float+0xa2>
 80054fc:	232d      	movs	r3, #45	@ 0x2d
 80054fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005502:	e79e      	b.n	8005442 <_printf_float+0xa2>
 8005504:	9a06      	ldr	r2, [sp, #24]
 8005506:	2a47      	cmp	r2, #71	@ 0x47
 8005508:	d1c2      	bne.n	8005490 <_printf_float+0xf0>
 800550a:	2b00      	cmp	r3, #0
 800550c:	d1c0      	bne.n	8005490 <_printf_float+0xf0>
 800550e:	2301      	movs	r3, #1
 8005510:	e7bd      	b.n	800548e <_printf_float+0xee>
 8005512:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005516:	d9db      	bls.n	80054d0 <_printf_float+0x130>
 8005518:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800551c:	d118      	bne.n	8005550 <_printf_float+0x1b0>
 800551e:	2900      	cmp	r1, #0
 8005520:	6863      	ldr	r3, [r4, #4]
 8005522:	dd0b      	ble.n	800553c <_printf_float+0x19c>
 8005524:	6121      	str	r1, [r4, #16]
 8005526:	b913      	cbnz	r3, 800552e <_printf_float+0x18e>
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	07d0      	lsls	r0, r2, #31
 800552c:	d502      	bpl.n	8005534 <_printf_float+0x194>
 800552e:	3301      	adds	r3, #1
 8005530:	440b      	add	r3, r1
 8005532:	6123      	str	r3, [r4, #16]
 8005534:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005536:	f04f 0900 	mov.w	r9, #0
 800553a:	e7db      	b.n	80054f4 <_printf_float+0x154>
 800553c:	b913      	cbnz	r3, 8005544 <_printf_float+0x1a4>
 800553e:	6822      	ldr	r2, [r4, #0]
 8005540:	07d2      	lsls	r2, r2, #31
 8005542:	d501      	bpl.n	8005548 <_printf_float+0x1a8>
 8005544:	3302      	adds	r3, #2
 8005546:	e7f4      	b.n	8005532 <_printf_float+0x192>
 8005548:	2301      	movs	r3, #1
 800554a:	e7f2      	b.n	8005532 <_printf_float+0x192>
 800554c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005550:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005552:	4299      	cmp	r1, r3
 8005554:	db05      	blt.n	8005562 <_printf_float+0x1c2>
 8005556:	6823      	ldr	r3, [r4, #0]
 8005558:	6121      	str	r1, [r4, #16]
 800555a:	07d8      	lsls	r0, r3, #31
 800555c:	d5ea      	bpl.n	8005534 <_printf_float+0x194>
 800555e:	1c4b      	adds	r3, r1, #1
 8005560:	e7e7      	b.n	8005532 <_printf_float+0x192>
 8005562:	2900      	cmp	r1, #0
 8005564:	bfd4      	ite	le
 8005566:	f1c1 0202 	rsble	r2, r1, #2
 800556a:	2201      	movgt	r2, #1
 800556c:	4413      	add	r3, r2
 800556e:	e7e0      	b.n	8005532 <_printf_float+0x192>
 8005570:	6823      	ldr	r3, [r4, #0]
 8005572:	055a      	lsls	r2, r3, #21
 8005574:	d407      	bmi.n	8005586 <_printf_float+0x1e6>
 8005576:	6923      	ldr	r3, [r4, #16]
 8005578:	4642      	mov	r2, r8
 800557a:	4631      	mov	r1, r6
 800557c:	4628      	mov	r0, r5
 800557e:	47b8      	blx	r7
 8005580:	3001      	adds	r0, #1
 8005582:	d12b      	bne.n	80055dc <_printf_float+0x23c>
 8005584:	e767      	b.n	8005456 <_printf_float+0xb6>
 8005586:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800558a:	f240 80dd 	bls.w	8005748 <_printf_float+0x3a8>
 800558e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005592:	2200      	movs	r2, #0
 8005594:	2300      	movs	r3, #0
 8005596:	f7fb fa9f 	bl	8000ad8 <__aeabi_dcmpeq>
 800559a:	2800      	cmp	r0, #0
 800559c:	d033      	beq.n	8005606 <_printf_float+0x266>
 800559e:	4a37      	ldr	r2, [pc, #220]	@ (800567c <_printf_float+0x2dc>)
 80055a0:	2301      	movs	r3, #1
 80055a2:	4631      	mov	r1, r6
 80055a4:	4628      	mov	r0, r5
 80055a6:	47b8      	blx	r7
 80055a8:	3001      	adds	r0, #1
 80055aa:	f43f af54 	beq.w	8005456 <_printf_float+0xb6>
 80055ae:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 80055b2:	4543      	cmp	r3, r8
 80055b4:	db02      	blt.n	80055bc <_printf_float+0x21c>
 80055b6:	6823      	ldr	r3, [r4, #0]
 80055b8:	07d8      	lsls	r0, r3, #31
 80055ba:	d50f      	bpl.n	80055dc <_printf_float+0x23c>
 80055bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80055c0:	4631      	mov	r1, r6
 80055c2:	4628      	mov	r0, r5
 80055c4:	47b8      	blx	r7
 80055c6:	3001      	adds	r0, #1
 80055c8:	f43f af45 	beq.w	8005456 <_printf_float+0xb6>
 80055cc:	f04f 0900 	mov.w	r9, #0
 80055d0:	f108 38ff 	add.w	r8, r8, #4294967295
 80055d4:	f104 0a1a 	add.w	sl, r4, #26
 80055d8:	45c8      	cmp	r8, r9
 80055da:	dc09      	bgt.n	80055f0 <_printf_float+0x250>
 80055dc:	6823      	ldr	r3, [r4, #0]
 80055de:	079b      	lsls	r3, r3, #30
 80055e0:	f100 8103 	bmi.w	80057ea <_printf_float+0x44a>
 80055e4:	68e0      	ldr	r0, [r4, #12]
 80055e6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80055e8:	4298      	cmp	r0, r3
 80055ea:	bfb8      	it	lt
 80055ec:	4618      	movlt	r0, r3
 80055ee:	e734      	b.n	800545a <_printf_float+0xba>
 80055f0:	2301      	movs	r3, #1
 80055f2:	4652      	mov	r2, sl
 80055f4:	4631      	mov	r1, r6
 80055f6:	4628      	mov	r0, r5
 80055f8:	47b8      	blx	r7
 80055fa:	3001      	adds	r0, #1
 80055fc:	f43f af2b 	beq.w	8005456 <_printf_float+0xb6>
 8005600:	f109 0901 	add.w	r9, r9, #1
 8005604:	e7e8      	b.n	80055d8 <_printf_float+0x238>
 8005606:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005608:	2b00      	cmp	r3, #0
 800560a:	dc39      	bgt.n	8005680 <_printf_float+0x2e0>
 800560c:	4a1b      	ldr	r2, [pc, #108]	@ (800567c <_printf_float+0x2dc>)
 800560e:	2301      	movs	r3, #1
 8005610:	4631      	mov	r1, r6
 8005612:	4628      	mov	r0, r5
 8005614:	47b8      	blx	r7
 8005616:	3001      	adds	r0, #1
 8005618:	f43f af1d 	beq.w	8005456 <_printf_float+0xb6>
 800561c:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005620:	ea59 0303 	orrs.w	r3, r9, r3
 8005624:	d102      	bne.n	800562c <_printf_float+0x28c>
 8005626:	6823      	ldr	r3, [r4, #0]
 8005628:	07d9      	lsls	r1, r3, #31
 800562a:	d5d7      	bpl.n	80055dc <_printf_float+0x23c>
 800562c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005630:	4631      	mov	r1, r6
 8005632:	4628      	mov	r0, r5
 8005634:	47b8      	blx	r7
 8005636:	3001      	adds	r0, #1
 8005638:	f43f af0d 	beq.w	8005456 <_printf_float+0xb6>
 800563c:	f04f 0a00 	mov.w	sl, #0
 8005640:	f104 0b1a 	add.w	fp, r4, #26
 8005644:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005646:	425b      	negs	r3, r3
 8005648:	4553      	cmp	r3, sl
 800564a:	dc01      	bgt.n	8005650 <_printf_float+0x2b0>
 800564c:	464b      	mov	r3, r9
 800564e:	e793      	b.n	8005578 <_printf_float+0x1d8>
 8005650:	2301      	movs	r3, #1
 8005652:	465a      	mov	r2, fp
 8005654:	4631      	mov	r1, r6
 8005656:	4628      	mov	r0, r5
 8005658:	47b8      	blx	r7
 800565a:	3001      	adds	r0, #1
 800565c:	f43f aefb 	beq.w	8005456 <_printf_float+0xb6>
 8005660:	f10a 0a01 	add.w	sl, sl, #1
 8005664:	e7ee      	b.n	8005644 <_printf_float+0x2a4>
 8005666:	bf00      	nop
 8005668:	7fefffff 	.word	0x7fefffff
 800566c:	08007bf0 	.word	0x08007bf0
 8005670:	08007bf4 	.word	0x08007bf4
 8005674:	08007bf8 	.word	0x08007bf8
 8005678:	08007bfc 	.word	0x08007bfc
 800567c:	08007c00 	.word	0x08007c00
 8005680:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005682:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005686:	4553      	cmp	r3, sl
 8005688:	bfa8      	it	ge
 800568a:	4653      	movge	r3, sl
 800568c:	2b00      	cmp	r3, #0
 800568e:	4699      	mov	r9, r3
 8005690:	dc36      	bgt.n	8005700 <_printf_float+0x360>
 8005692:	f04f 0b00 	mov.w	fp, #0
 8005696:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800569a:	f104 021a 	add.w	r2, r4, #26
 800569e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80056a0:	9306      	str	r3, [sp, #24]
 80056a2:	eba3 0309 	sub.w	r3, r3, r9
 80056a6:	455b      	cmp	r3, fp
 80056a8:	dc31      	bgt.n	800570e <_printf_float+0x36e>
 80056aa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056ac:	459a      	cmp	sl, r3
 80056ae:	dc3a      	bgt.n	8005726 <_printf_float+0x386>
 80056b0:	6823      	ldr	r3, [r4, #0]
 80056b2:	07da      	lsls	r2, r3, #31
 80056b4:	d437      	bmi.n	8005726 <_printf_float+0x386>
 80056b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056b8:	ebaa 0903 	sub.w	r9, sl, r3
 80056bc:	9b06      	ldr	r3, [sp, #24]
 80056be:	ebaa 0303 	sub.w	r3, sl, r3
 80056c2:	4599      	cmp	r9, r3
 80056c4:	bfa8      	it	ge
 80056c6:	4699      	movge	r9, r3
 80056c8:	f1b9 0f00 	cmp.w	r9, #0
 80056cc:	dc33      	bgt.n	8005736 <_printf_float+0x396>
 80056ce:	f04f 0800 	mov.w	r8, #0
 80056d2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80056d6:	f104 0b1a 	add.w	fp, r4, #26
 80056da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80056dc:	ebaa 0303 	sub.w	r3, sl, r3
 80056e0:	eba3 0309 	sub.w	r3, r3, r9
 80056e4:	4543      	cmp	r3, r8
 80056e6:	f77f af79 	ble.w	80055dc <_printf_float+0x23c>
 80056ea:	2301      	movs	r3, #1
 80056ec:	465a      	mov	r2, fp
 80056ee:	4631      	mov	r1, r6
 80056f0:	4628      	mov	r0, r5
 80056f2:	47b8      	blx	r7
 80056f4:	3001      	adds	r0, #1
 80056f6:	f43f aeae 	beq.w	8005456 <_printf_float+0xb6>
 80056fa:	f108 0801 	add.w	r8, r8, #1
 80056fe:	e7ec      	b.n	80056da <_printf_float+0x33a>
 8005700:	4642      	mov	r2, r8
 8005702:	4631      	mov	r1, r6
 8005704:	4628      	mov	r0, r5
 8005706:	47b8      	blx	r7
 8005708:	3001      	adds	r0, #1
 800570a:	d1c2      	bne.n	8005692 <_printf_float+0x2f2>
 800570c:	e6a3      	b.n	8005456 <_printf_float+0xb6>
 800570e:	2301      	movs	r3, #1
 8005710:	4631      	mov	r1, r6
 8005712:	4628      	mov	r0, r5
 8005714:	9206      	str	r2, [sp, #24]
 8005716:	47b8      	blx	r7
 8005718:	3001      	adds	r0, #1
 800571a:	f43f ae9c 	beq.w	8005456 <_printf_float+0xb6>
 800571e:	9a06      	ldr	r2, [sp, #24]
 8005720:	f10b 0b01 	add.w	fp, fp, #1
 8005724:	e7bb      	b.n	800569e <_printf_float+0x2fe>
 8005726:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	d1c0      	bne.n	80056b6 <_printf_float+0x316>
 8005734:	e68f      	b.n	8005456 <_printf_float+0xb6>
 8005736:	9a06      	ldr	r2, [sp, #24]
 8005738:	464b      	mov	r3, r9
 800573a:	4442      	add	r2, r8
 800573c:	4631      	mov	r1, r6
 800573e:	4628      	mov	r0, r5
 8005740:	47b8      	blx	r7
 8005742:	3001      	adds	r0, #1
 8005744:	d1c3      	bne.n	80056ce <_printf_float+0x32e>
 8005746:	e686      	b.n	8005456 <_printf_float+0xb6>
 8005748:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800574c:	f1ba 0f01 	cmp.w	sl, #1
 8005750:	dc01      	bgt.n	8005756 <_printf_float+0x3b6>
 8005752:	07db      	lsls	r3, r3, #31
 8005754:	d536      	bpl.n	80057c4 <_printf_float+0x424>
 8005756:	2301      	movs	r3, #1
 8005758:	4642      	mov	r2, r8
 800575a:	4631      	mov	r1, r6
 800575c:	4628      	mov	r0, r5
 800575e:	47b8      	blx	r7
 8005760:	3001      	adds	r0, #1
 8005762:	f43f ae78 	beq.w	8005456 <_printf_float+0xb6>
 8005766:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800576a:	4631      	mov	r1, r6
 800576c:	4628      	mov	r0, r5
 800576e:	47b8      	blx	r7
 8005770:	3001      	adds	r0, #1
 8005772:	f43f ae70 	beq.w	8005456 <_printf_float+0xb6>
 8005776:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800577a:	2200      	movs	r2, #0
 800577c:	2300      	movs	r3, #0
 800577e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005782:	f7fb f9a9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005786:	b9c0      	cbnz	r0, 80057ba <_printf_float+0x41a>
 8005788:	4653      	mov	r3, sl
 800578a:	f108 0201 	add.w	r2, r8, #1
 800578e:	4631      	mov	r1, r6
 8005790:	4628      	mov	r0, r5
 8005792:	47b8      	blx	r7
 8005794:	3001      	adds	r0, #1
 8005796:	d10c      	bne.n	80057b2 <_printf_float+0x412>
 8005798:	e65d      	b.n	8005456 <_printf_float+0xb6>
 800579a:	2301      	movs	r3, #1
 800579c:	465a      	mov	r2, fp
 800579e:	4631      	mov	r1, r6
 80057a0:	4628      	mov	r0, r5
 80057a2:	47b8      	blx	r7
 80057a4:	3001      	adds	r0, #1
 80057a6:	f43f ae56 	beq.w	8005456 <_printf_float+0xb6>
 80057aa:	f108 0801 	add.w	r8, r8, #1
 80057ae:	45d0      	cmp	r8, sl
 80057b0:	dbf3      	blt.n	800579a <_printf_float+0x3fa>
 80057b2:	464b      	mov	r3, r9
 80057b4:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 80057b8:	e6df      	b.n	800557a <_printf_float+0x1da>
 80057ba:	f04f 0800 	mov.w	r8, #0
 80057be:	f104 0b1a 	add.w	fp, r4, #26
 80057c2:	e7f4      	b.n	80057ae <_printf_float+0x40e>
 80057c4:	2301      	movs	r3, #1
 80057c6:	4642      	mov	r2, r8
 80057c8:	e7e1      	b.n	800578e <_printf_float+0x3ee>
 80057ca:	2301      	movs	r3, #1
 80057cc:	464a      	mov	r2, r9
 80057ce:	4631      	mov	r1, r6
 80057d0:	4628      	mov	r0, r5
 80057d2:	47b8      	blx	r7
 80057d4:	3001      	adds	r0, #1
 80057d6:	f43f ae3e 	beq.w	8005456 <_printf_float+0xb6>
 80057da:	f108 0801 	add.w	r8, r8, #1
 80057de:	68e3      	ldr	r3, [r4, #12]
 80057e0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80057e2:	1a5b      	subs	r3, r3, r1
 80057e4:	4543      	cmp	r3, r8
 80057e6:	dcf0      	bgt.n	80057ca <_printf_float+0x42a>
 80057e8:	e6fc      	b.n	80055e4 <_printf_float+0x244>
 80057ea:	f04f 0800 	mov.w	r8, #0
 80057ee:	f104 0919 	add.w	r9, r4, #25
 80057f2:	e7f4      	b.n	80057de <_printf_float+0x43e>

080057f4 <_printf_common>:
 80057f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80057f8:	4616      	mov	r6, r2
 80057fa:	4698      	mov	r8, r3
 80057fc:	688a      	ldr	r2, [r1, #8]
 80057fe:	690b      	ldr	r3, [r1, #16]
 8005800:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005804:	4293      	cmp	r3, r2
 8005806:	bfb8      	it	lt
 8005808:	4613      	movlt	r3, r2
 800580a:	6033      	str	r3, [r6, #0]
 800580c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005810:	4607      	mov	r7, r0
 8005812:	460c      	mov	r4, r1
 8005814:	b10a      	cbz	r2, 800581a <_printf_common+0x26>
 8005816:	3301      	adds	r3, #1
 8005818:	6033      	str	r3, [r6, #0]
 800581a:	6823      	ldr	r3, [r4, #0]
 800581c:	0699      	lsls	r1, r3, #26
 800581e:	bf42      	ittt	mi
 8005820:	6833      	ldrmi	r3, [r6, #0]
 8005822:	3302      	addmi	r3, #2
 8005824:	6033      	strmi	r3, [r6, #0]
 8005826:	6825      	ldr	r5, [r4, #0]
 8005828:	f015 0506 	ands.w	r5, r5, #6
 800582c:	d106      	bne.n	800583c <_printf_common+0x48>
 800582e:	f104 0a19 	add.w	sl, r4, #25
 8005832:	68e3      	ldr	r3, [r4, #12]
 8005834:	6832      	ldr	r2, [r6, #0]
 8005836:	1a9b      	subs	r3, r3, r2
 8005838:	42ab      	cmp	r3, r5
 800583a:	dc26      	bgt.n	800588a <_printf_common+0x96>
 800583c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005840:	6822      	ldr	r2, [r4, #0]
 8005842:	3b00      	subs	r3, #0
 8005844:	bf18      	it	ne
 8005846:	2301      	movne	r3, #1
 8005848:	0692      	lsls	r2, r2, #26
 800584a:	d42b      	bmi.n	80058a4 <_printf_common+0xb0>
 800584c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005850:	4641      	mov	r1, r8
 8005852:	4638      	mov	r0, r7
 8005854:	47c8      	blx	r9
 8005856:	3001      	adds	r0, #1
 8005858:	d01e      	beq.n	8005898 <_printf_common+0xa4>
 800585a:	6823      	ldr	r3, [r4, #0]
 800585c:	6922      	ldr	r2, [r4, #16]
 800585e:	f003 0306 	and.w	r3, r3, #6
 8005862:	2b04      	cmp	r3, #4
 8005864:	bf02      	ittt	eq
 8005866:	68e5      	ldreq	r5, [r4, #12]
 8005868:	6833      	ldreq	r3, [r6, #0]
 800586a:	1aed      	subeq	r5, r5, r3
 800586c:	68a3      	ldr	r3, [r4, #8]
 800586e:	bf0c      	ite	eq
 8005870:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005874:	2500      	movne	r5, #0
 8005876:	4293      	cmp	r3, r2
 8005878:	bfc4      	itt	gt
 800587a:	1a9b      	subgt	r3, r3, r2
 800587c:	18ed      	addgt	r5, r5, r3
 800587e:	2600      	movs	r6, #0
 8005880:	341a      	adds	r4, #26
 8005882:	42b5      	cmp	r5, r6
 8005884:	d11a      	bne.n	80058bc <_printf_common+0xc8>
 8005886:	2000      	movs	r0, #0
 8005888:	e008      	b.n	800589c <_printf_common+0xa8>
 800588a:	2301      	movs	r3, #1
 800588c:	4652      	mov	r2, sl
 800588e:	4641      	mov	r1, r8
 8005890:	4638      	mov	r0, r7
 8005892:	47c8      	blx	r9
 8005894:	3001      	adds	r0, #1
 8005896:	d103      	bne.n	80058a0 <_printf_common+0xac>
 8005898:	f04f 30ff 	mov.w	r0, #4294967295
 800589c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058a0:	3501      	adds	r5, #1
 80058a2:	e7c6      	b.n	8005832 <_printf_common+0x3e>
 80058a4:	18e1      	adds	r1, r4, r3
 80058a6:	1c5a      	adds	r2, r3, #1
 80058a8:	2030      	movs	r0, #48	@ 0x30
 80058aa:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80058ae:	4422      	add	r2, r4
 80058b0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80058b4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80058b8:	3302      	adds	r3, #2
 80058ba:	e7c7      	b.n	800584c <_printf_common+0x58>
 80058bc:	2301      	movs	r3, #1
 80058be:	4622      	mov	r2, r4
 80058c0:	4641      	mov	r1, r8
 80058c2:	4638      	mov	r0, r7
 80058c4:	47c8      	blx	r9
 80058c6:	3001      	adds	r0, #1
 80058c8:	d0e6      	beq.n	8005898 <_printf_common+0xa4>
 80058ca:	3601      	adds	r6, #1
 80058cc:	e7d9      	b.n	8005882 <_printf_common+0x8e>
	...

080058d0 <_printf_i>:
 80058d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80058d4:	7e0f      	ldrb	r7, [r1, #24]
 80058d6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80058d8:	2f78      	cmp	r7, #120	@ 0x78
 80058da:	4691      	mov	r9, r2
 80058dc:	4680      	mov	r8, r0
 80058de:	460c      	mov	r4, r1
 80058e0:	469a      	mov	sl, r3
 80058e2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80058e6:	d807      	bhi.n	80058f8 <_printf_i+0x28>
 80058e8:	2f62      	cmp	r7, #98	@ 0x62
 80058ea:	d80a      	bhi.n	8005902 <_printf_i+0x32>
 80058ec:	2f00      	cmp	r7, #0
 80058ee:	f000 80d2 	beq.w	8005a96 <_printf_i+0x1c6>
 80058f2:	2f58      	cmp	r7, #88	@ 0x58
 80058f4:	f000 80b9 	beq.w	8005a6a <_printf_i+0x19a>
 80058f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80058fc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005900:	e03a      	b.n	8005978 <_printf_i+0xa8>
 8005902:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005906:	2b15      	cmp	r3, #21
 8005908:	d8f6      	bhi.n	80058f8 <_printf_i+0x28>
 800590a:	a101      	add	r1, pc, #4	@ (adr r1, 8005910 <_printf_i+0x40>)
 800590c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005910:	08005969 	.word	0x08005969
 8005914:	0800597d 	.word	0x0800597d
 8005918:	080058f9 	.word	0x080058f9
 800591c:	080058f9 	.word	0x080058f9
 8005920:	080058f9 	.word	0x080058f9
 8005924:	080058f9 	.word	0x080058f9
 8005928:	0800597d 	.word	0x0800597d
 800592c:	080058f9 	.word	0x080058f9
 8005930:	080058f9 	.word	0x080058f9
 8005934:	080058f9 	.word	0x080058f9
 8005938:	080058f9 	.word	0x080058f9
 800593c:	08005a7d 	.word	0x08005a7d
 8005940:	080059a7 	.word	0x080059a7
 8005944:	08005a37 	.word	0x08005a37
 8005948:	080058f9 	.word	0x080058f9
 800594c:	080058f9 	.word	0x080058f9
 8005950:	08005a9f 	.word	0x08005a9f
 8005954:	080058f9 	.word	0x080058f9
 8005958:	080059a7 	.word	0x080059a7
 800595c:	080058f9 	.word	0x080058f9
 8005960:	080058f9 	.word	0x080058f9
 8005964:	08005a3f 	.word	0x08005a3f
 8005968:	6833      	ldr	r3, [r6, #0]
 800596a:	1d1a      	adds	r2, r3, #4
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	6032      	str	r2, [r6, #0]
 8005970:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005974:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005978:	2301      	movs	r3, #1
 800597a:	e09d      	b.n	8005ab8 <_printf_i+0x1e8>
 800597c:	6833      	ldr	r3, [r6, #0]
 800597e:	6820      	ldr	r0, [r4, #0]
 8005980:	1d19      	adds	r1, r3, #4
 8005982:	6031      	str	r1, [r6, #0]
 8005984:	0606      	lsls	r6, r0, #24
 8005986:	d501      	bpl.n	800598c <_printf_i+0xbc>
 8005988:	681d      	ldr	r5, [r3, #0]
 800598a:	e003      	b.n	8005994 <_printf_i+0xc4>
 800598c:	0645      	lsls	r5, r0, #25
 800598e:	d5fb      	bpl.n	8005988 <_printf_i+0xb8>
 8005990:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005994:	2d00      	cmp	r5, #0
 8005996:	da03      	bge.n	80059a0 <_printf_i+0xd0>
 8005998:	232d      	movs	r3, #45	@ 0x2d
 800599a:	426d      	negs	r5, r5
 800599c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80059a0:	4859      	ldr	r0, [pc, #356]	@ (8005b08 <_printf_i+0x238>)
 80059a2:	230a      	movs	r3, #10
 80059a4:	e011      	b.n	80059ca <_printf_i+0xfa>
 80059a6:	6821      	ldr	r1, [r4, #0]
 80059a8:	6833      	ldr	r3, [r6, #0]
 80059aa:	0608      	lsls	r0, r1, #24
 80059ac:	f853 5b04 	ldr.w	r5, [r3], #4
 80059b0:	d402      	bmi.n	80059b8 <_printf_i+0xe8>
 80059b2:	0649      	lsls	r1, r1, #25
 80059b4:	bf48      	it	mi
 80059b6:	b2ad      	uxthmi	r5, r5
 80059b8:	2f6f      	cmp	r7, #111	@ 0x6f
 80059ba:	4853      	ldr	r0, [pc, #332]	@ (8005b08 <_printf_i+0x238>)
 80059bc:	6033      	str	r3, [r6, #0]
 80059be:	bf14      	ite	ne
 80059c0:	230a      	movne	r3, #10
 80059c2:	2308      	moveq	r3, #8
 80059c4:	2100      	movs	r1, #0
 80059c6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80059ca:	6866      	ldr	r6, [r4, #4]
 80059cc:	60a6      	str	r6, [r4, #8]
 80059ce:	2e00      	cmp	r6, #0
 80059d0:	bfa2      	ittt	ge
 80059d2:	6821      	ldrge	r1, [r4, #0]
 80059d4:	f021 0104 	bicge.w	r1, r1, #4
 80059d8:	6021      	strge	r1, [r4, #0]
 80059da:	b90d      	cbnz	r5, 80059e0 <_printf_i+0x110>
 80059dc:	2e00      	cmp	r6, #0
 80059de:	d04b      	beq.n	8005a78 <_printf_i+0x1a8>
 80059e0:	4616      	mov	r6, r2
 80059e2:	fbb5 f1f3 	udiv	r1, r5, r3
 80059e6:	fb03 5711 	mls	r7, r3, r1, r5
 80059ea:	5dc7      	ldrb	r7, [r0, r7]
 80059ec:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80059f0:	462f      	mov	r7, r5
 80059f2:	42bb      	cmp	r3, r7
 80059f4:	460d      	mov	r5, r1
 80059f6:	d9f4      	bls.n	80059e2 <_printf_i+0x112>
 80059f8:	2b08      	cmp	r3, #8
 80059fa:	d10b      	bne.n	8005a14 <_printf_i+0x144>
 80059fc:	6823      	ldr	r3, [r4, #0]
 80059fe:	07df      	lsls	r7, r3, #31
 8005a00:	d508      	bpl.n	8005a14 <_printf_i+0x144>
 8005a02:	6923      	ldr	r3, [r4, #16]
 8005a04:	6861      	ldr	r1, [r4, #4]
 8005a06:	4299      	cmp	r1, r3
 8005a08:	bfde      	ittt	le
 8005a0a:	2330      	movle	r3, #48	@ 0x30
 8005a0c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005a10:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005a14:	1b92      	subs	r2, r2, r6
 8005a16:	6122      	str	r2, [r4, #16]
 8005a18:	f8cd a000 	str.w	sl, [sp]
 8005a1c:	464b      	mov	r3, r9
 8005a1e:	aa03      	add	r2, sp, #12
 8005a20:	4621      	mov	r1, r4
 8005a22:	4640      	mov	r0, r8
 8005a24:	f7ff fee6 	bl	80057f4 <_printf_common>
 8005a28:	3001      	adds	r0, #1
 8005a2a:	d14a      	bne.n	8005ac2 <_printf_i+0x1f2>
 8005a2c:	f04f 30ff 	mov.w	r0, #4294967295
 8005a30:	b004      	add	sp, #16
 8005a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a36:	6823      	ldr	r3, [r4, #0]
 8005a38:	f043 0320 	orr.w	r3, r3, #32
 8005a3c:	6023      	str	r3, [r4, #0]
 8005a3e:	4833      	ldr	r0, [pc, #204]	@ (8005b0c <_printf_i+0x23c>)
 8005a40:	2778      	movs	r7, #120	@ 0x78
 8005a42:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005a46:	6823      	ldr	r3, [r4, #0]
 8005a48:	6831      	ldr	r1, [r6, #0]
 8005a4a:	061f      	lsls	r7, r3, #24
 8005a4c:	f851 5b04 	ldr.w	r5, [r1], #4
 8005a50:	d402      	bmi.n	8005a58 <_printf_i+0x188>
 8005a52:	065f      	lsls	r7, r3, #25
 8005a54:	bf48      	it	mi
 8005a56:	b2ad      	uxthmi	r5, r5
 8005a58:	6031      	str	r1, [r6, #0]
 8005a5a:	07d9      	lsls	r1, r3, #31
 8005a5c:	bf44      	itt	mi
 8005a5e:	f043 0320 	orrmi.w	r3, r3, #32
 8005a62:	6023      	strmi	r3, [r4, #0]
 8005a64:	b11d      	cbz	r5, 8005a6e <_printf_i+0x19e>
 8005a66:	2310      	movs	r3, #16
 8005a68:	e7ac      	b.n	80059c4 <_printf_i+0xf4>
 8005a6a:	4827      	ldr	r0, [pc, #156]	@ (8005b08 <_printf_i+0x238>)
 8005a6c:	e7e9      	b.n	8005a42 <_printf_i+0x172>
 8005a6e:	6823      	ldr	r3, [r4, #0]
 8005a70:	f023 0320 	bic.w	r3, r3, #32
 8005a74:	6023      	str	r3, [r4, #0]
 8005a76:	e7f6      	b.n	8005a66 <_printf_i+0x196>
 8005a78:	4616      	mov	r6, r2
 8005a7a:	e7bd      	b.n	80059f8 <_printf_i+0x128>
 8005a7c:	6833      	ldr	r3, [r6, #0]
 8005a7e:	6825      	ldr	r5, [r4, #0]
 8005a80:	6961      	ldr	r1, [r4, #20]
 8005a82:	1d18      	adds	r0, r3, #4
 8005a84:	6030      	str	r0, [r6, #0]
 8005a86:	062e      	lsls	r6, r5, #24
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	d501      	bpl.n	8005a90 <_printf_i+0x1c0>
 8005a8c:	6019      	str	r1, [r3, #0]
 8005a8e:	e002      	b.n	8005a96 <_printf_i+0x1c6>
 8005a90:	0668      	lsls	r0, r5, #25
 8005a92:	d5fb      	bpl.n	8005a8c <_printf_i+0x1bc>
 8005a94:	8019      	strh	r1, [r3, #0]
 8005a96:	2300      	movs	r3, #0
 8005a98:	6123      	str	r3, [r4, #16]
 8005a9a:	4616      	mov	r6, r2
 8005a9c:	e7bc      	b.n	8005a18 <_printf_i+0x148>
 8005a9e:	6833      	ldr	r3, [r6, #0]
 8005aa0:	1d1a      	adds	r2, r3, #4
 8005aa2:	6032      	str	r2, [r6, #0]
 8005aa4:	681e      	ldr	r6, [r3, #0]
 8005aa6:	6862      	ldr	r2, [r4, #4]
 8005aa8:	2100      	movs	r1, #0
 8005aaa:	4630      	mov	r0, r6
 8005aac:	f7fa fb98 	bl	80001e0 <memchr>
 8005ab0:	b108      	cbz	r0, 8005ab6 <_printf_i+0x1e6>
 8005ab2:	1b80      	subs	r0, r0, r6
 8005ab4:	6060      	str	r0, [r4, #4]
 8005ab6:	6863      	ldr	r3, [r4, #4]
 8005ab8:	6123      	str	r3, [r4, #16]
 8005aba:	2300      	movs	r3, #0
 8005abc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ac0:	e7aa      	b.n	8005a18 <_printf_i+0x148>
 8005ac2:	6923      	ldr	r3, [r4, #16]
 8005ac4:	4632      	mov	r2, r6
 8005ac6:	4649      	mov	r1, r9
 8005ac8:	4640      	mov	r0, r8
 8005aca:	47d0      	blx	sl
 8005acc:	3001      	adds	r0, #1
 8005ace:	d0ad      	beq.n	8005a2c <_printf_i+0x15c>
 8005ad0:	6823      	ldr	r3, [r4, #0]
 8005ad2:	079b      	lsls	r3, r3, #30
 8005ad4:	d413      	bmi.n	8005afe <_printf_i+0x22e>
 8005ad6:	68e0      	ldr	r0, [r4, #12]
 8005ad8:	9b03      	ldr	r3, [sp, #12]
 8005ada:	4298      	cmp	r0, r3
 8005adc:	bfb8      	it	lt
 8005ade:	4618      	movlt	r0, r3
 8005ae0:	e7a6      	b.n	8005a30 <_printf_i+0x160>
 8005ae2:	2301      	movs	r3, #1
 8005ae4:	4632      	mov	r2, r6
 8005ae6:	4649      	mov	r1, r9
 8005ae8:	4640      	mov	r0, r8
 8005aea:	47d0      	blx	sl
 8005aec:	3001      	adds	r0, #1
 8005aee:	d09d      	beq.n	8005a2c <_printf_i+0x15c>
 8005af0:	3501      	adds	r5, #1
 8005af2:	68e3      	ldr	r3, [r4, #12]
 8005af4:	9903      	ldr	r1, [sp, #12]
 8005af6:	1a5b      	subs	r3, r3, r1
 8005af8:	42ab      	cmp	r3, r5
 8005afa:	dcf2      	bgt.n	8005ae2 <_printf_i+0x212>
 8005afc:	e7eb      	b.n	8005ad6 <_printf_i+0x206>
 8005afe:	2500      	movs	r5, #0
 8005b00:	f104 0619 	add.w	r6, r4, #25
 8005b04:	e7f5      	b.n	8005af2 <_printf_i+0x222>
 8005b06:	bf00      	nop
 8005b08:	08007c02 	.word	0x08007c02
 8005b0c:	08007c13 	.word	0x08007c13

08005b10 <std>:
 8005b10:	2300      	movs	r3, #0
 8005b12:	b510      	push	{r4, lr}
 8005b14:	4604      	mov	r4, r0
 8005b16:	e9c0 3300 	strd	r3, r3, [r0]
 8005b1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005b1e:	6083      	str	r3, [r0, #8]
 8005b20:	8181      	strh	r1, [r0, #12]
 8005b22:	6643      	str	r3, [r0, #100]	@ 0x64
 8005b24:	81c2      	strh	r2, [r0, #14]
 8005b26:	6183      	str	r3, [r0, #24]
 8005b28:	4619      	mov	r1, r3
 8005b2a:	2208      	movs	r2, #8
 8005b2c:	305c      	adds	r0, #92	@ 0x5c
 8005b2e:	f000 f906 	bl	8005d3e <memset>
 8005b32:	4b0d      	ldr	r3, [pc, #52]	@ (8005b68 <std+0x58>)
 8005b34:	6263      	str	r3, [r4, #36]	@ 0x24
 8005b36:	4b0d      	ldr	r3, [pc, #52]	@ (8005b6c <std+0x5c>)
 8005b38:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005b3a:	4b0d      	ldr	r3, [pc, #52]	@ (8005b70 <std+0x60>)
 8005b3c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005b3e:	4b0d      	ldr	r3, [pc, #52]	@ (8005b74 <std+0x64>)
 8005b40:	6323      	str	r3, [r4, #48]	@ 0x30
 8005b42:	4b0d      	ldr	r3, [pc, #52]	@ (8005b78 <std+0x68>)
 8005b44:	6224      	str	r4, [r4, #32]
 8005b46:	429c      	cmp	r4, r3
 8005b48:	d006      	beq.n	8005b58 <std+0x48>
 8005b4a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005b4e:	4294      	cmp	r4, r2
 8005b50:	d002      	beq.n	8005b58 <std+0x48>
 8005b52:	33d0      	adds	r3, #208	@ 0xd0
 8005b54:	429c      	cmp	r4, r3
 8005b56:	d105      	bne.n	8005b64 <std+0x54>
 8005b58:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005b60:	f000 b96a 	b.w	8005e38 <__retarget_lock_init_recursive>
 8005b64:	bd10      	pop	{r4, pc}
 8005b66:	bf00      	nop
 8005b68:	08005cb9 	.word	0x08005cb9
 8005b6c:	08005cdb 	.word	0x08005cdb
 8005b70:	08005d13 	.word	0x08005d13
 8005b74:	08005d37 	.word	0x08005d37
 8005b78:	200002d8 	.word	0x200002d8

08005b7c <stdio_exit_handler>:
 8005b7c:	4a02      	ldr	r2, [pc, #8]	@ (8005b88 <stdio_exit_handler+0xc>)
 8005b7e:	4903      	ldr	r1, [pc, #12]	@ (8005b8c <stdio_exit_handler+0x10>)
 8005b80:	4803      	ldr	r0, [pc, #12]	@ (8005b90 <stdio_exit_handler+0x14>)
 8005b82:	f000 b869 	b.w	8005c58 <_fwalk_sglue>
 8005b86:	bf00      	nop
 8005b88:	2000000c 	.word	0x2000000c
 8005b8c:	08007769 	.word	0x08007769
 8005b90:	2000001c 	.word	0x2000001c

08005b94 <cleanup_stdio>:
 8005b94:	6841      	ldr	r1, [r0, #4]
 8005b96:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc8 <cleanup_stdio+0x34>)
 8005b98:	4299      	cmp	r1, r3
 8005b9a:	b510      	push	{r4, lr}
 8005b9c:	4604      	mov	r4, r0
 8005b9e:	d001      	beq.n	8005ba4 <cleanup_stdio+0x10>
 8005ba0:	f001 fde2 	bl	8007768 <_fflush_r>
 8005ba4:	68a1      	ldr	r1, [r4, #8]
 8005ba6:	4b09      	ldr	r3, [pc, #36]	@ (8005bcc <cleanup_stdio+0x38>)
 8005ba8:	4299      	cmp	r1, r3
 8005baa:	d002      	beq.n	8005bb2 <cleanup_stdio+0x1e>
 8005bac:	4620      	mov	r0, r4
 8005bae:	f001 fddb 	bl	8007768 <_fflush_r>
 8005bb2:	68e1      	ldr	r1, [r4, #12]
 8005bb4:	4b06      	ldr	r3, [pc, #24]	@ (8005bd0 <cleanup_stdio+0x3c>)
 8005bb6:	4299      	cmp	r1, r3
 8005bb8:	d004      	beq.n	8005bc4 <cleanup_stdio+0x30>
 8005bba:	4620      	mov	r0, r4
 8005bbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bc0:	f001 bdd2 	b.w	8007768 <_fflush_r>
 8005bc4:	bd10      	pop	{r4, pc}
 8005bc6:	bf00      	nop
 8005bc8:	200002d8 	.word	0x200002d8
 8005bcc:	20000340 	.word	0x20000340
 8005bd0:	200003a8 	.word	0x200003a8

08005bd4 <global_stdio_init.part.0>:
 8005bd4:	b510      	push	{r4, lr}
 8005bd6:	4b0b      	ldr	r3, [pc, #44]	@ (8005c04 <global_stdio_init.part.0+0x30>)
 8005bd8:	4c0b      	ldr	r4, [pc, #44]	@ (8005c08 <global_stdio_init.part.0+0x34>)
 8005bda:	4a0c      	ldr	r2, [pc, #48]	@ (8005c0c <global_stdio_init.part.0+0x38>)
 8005bdc:	601a      	str	r2, [r3, #0]
 8005bde:	4620      	mov	r0, r4
 8005be0:	2200      	movs	r2, #0
 8005be2:	2104      	movs	r1, #4
 8005be4:	f7ff ff94 	bl	8005b10 <std>
 8005be8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005bec:	2201      	movs	r2, #1
 8005bee:	2109      	movs	r1, #9
 8005bf0:	f7ff ff8e 	bl	8005b10 <std>
 8005bf4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005bf8:	2202      	movs	r2, #2
 8005bfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005bfe:	2112      	movs	r1, #18
 8005c00:	f7ff bf86 	b.w	8005b10 <std>
 8005c04:	20000410 	.word	0x20000410
 8005c08:	200002d8 	.word	0x200002d8
 8005c0c:	08005b7d 	.word	0x08005b7d

08005c10 <__sfp_lock_acquire>:
 8005c10:	4801      	ldr	r0, [pc, #4]	@ (8005c18 <__sfp_lock_acquire+0x8>)
 8005c12:	f000 b912 	b.w	8005e3a <__retarget_lock_acquire_recursive>
 8005c16:	bf00      	nop
 8005c18:	20000419 	.word	0x20000419

08005c1c <__sfp_lock_release>:
 8005c1c:	4801      	ldr	r0, [pc, #4]	@ (8005c24 <__sfp_lock_release+0x8>)
 8005c1e:	f000 b90d 	b.w	8005e3c <__retarget_lock_release_recursive>
 8005c22:	bf00      	nop
 8005c24:	20000419 	.word	0x20000419

08005c28 <__sinit>:
 8005c28:	b510      	push	{r4, lr}
 8005c2a:	4604      	mov	r4, r0
 8005c2c:	f7ff fff0 	bl	8005c10 <__sfp_lock_acquire>
 8005c30:	6a23      	ldr	r3, [r4, #32]
 8005c32:	b11b      	cbz	r3, 8005c3c <__sinit+0x14>
 8005c34:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c38:	f7ff bff0 	b.w	8005c1c <__sfp_lock_release>
 8005c3c:	4b04      	ldr	r3, [pc, #16]	@ (8005c50 <__sinit+0x28>)
 8005c3e:	6223      	str	r3, [r4, #32]
 8005c40:	4b04      	ldr	r3, [pc, #16]	@ (8005c54 <__sinit+0x2c>)
 8005c42:	681b      	ldr	r3, [r3, #0]
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d1f5      	bne.n	8005c34 <__sinit+0xc>
 8005c48:	f7ff ffc4 	bl	8005bd4 <global_stdio_init.part.0>
 8005c4c:	e7f2      	b.n	8005c34 <__sinit+0xc>
 8005c4e:	bf00      	nop
 8005c50:	08005b95 	.word	0x08005b95
 8005c54:	20000410 	.word	0x20000410

08005c58 <_fwalk_sglue>:
 8005c58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005c5c:	4607      	mov	r7, r0
 8005c5e:	4688      	mov	r8, r1
 8005c60:	4614      	mov	r4, r2
 8005c62:	2600      	movs	r6, #0
 8005c64:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005c68:	f1b9 0901 	subs.w	r9, r9, #1
 8005c6c:	d505      	bpl.n	8005c7a <_fwalk_sglue+0x22>
 8005c6e:	6824      	ldr	r4, [r4, #0]
 8005c70:	2c00      	cmp	r4, #0
 8005c72:	d1f7      	bne.n	8005c64 <_fwalk_sglue+0xc>
 8005c74:	4630      	mov	r0, r6
 8005c76:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005c7a:	89ab      	ldrh	r3, [r5, #12]
 8005c7c:	2b01      	cmp	r3, #1
 8005c7e:	d907      	bls.n	8005c90 <_fwalk_sglue+0x38>
 8005c80:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005c84:	3301      	adds	r3, #1
 8005c86:	d003      	beq.n	8005c90 <_fwalk_sglue+0x38>
 8005c88:	4629      	mov	r1, r5
 8005c8a:	4638      	mov	r0, r7
 8005c8c:	47c0      	blx	r8
 8005c8e:	4306      	orrs	r6, r0
 8005c90:	3568      	adds	r5, #104	@ 0x68
 8005c92:	e7e9      	b.n	8005c68 <_fwalk_sglue+0x10>

08005c94 <iprintf>:
 8005c94:	b40f      	push	{r0, r1, r2, r3}
 8005c96:	b507      	push	{r0, r1, r2, lr}
 8005c98:	4906      	ldr	r1, [pc, #24]	@ (8005cb4 <iprintf+0x20>)
 8005c9a:	ab04      	add	r3, sp, #16
 8005c9c:	6808      	ldr	r0, [r1, #0]
 8005c9e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ca2:	6881      	ldr	r1, [r0, #8]
 8005ca4:	9301      	str	r3, [sp, #4]
 8005ca6:	f001 fbc3 	bl	8007430 <_vfiprintf_r>
 8005caa:	b003      	add	sp, #12
 8005cac:	f85d eb04 	ldr.w	lr, [sp], #4
 8005cb0:	b004      	add	sp, #16
 8005cb2:	4770      	bx	lr
 8005cb4:	20000018 	.word	0x20000018

08005cb8 <__sread>:
 8005cb8:	b510      	push	{r4, lr}
 8005cba:	460c      	mov	r4, r1
 8005cbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cc0:	f000 f86c 	bl	8005d9c <_read_r>
 8005cc4:	2800      	cmp	r0, #0
 8005cc6:	bfab      	itete	ge
 8005cc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005cca:	89a3      	ldrhlt	r3, [r4, #12]
 8005ccc:	181b      	addge	r3, r3, r0
 8005cce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005cd2:	bfac      	ite	ge
 8005cd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005cd6:	81a3      	strhlt	r3, [r4, #12]
 8005cd8:	bd10      	pop	{r4, pc}

08005cda <__swrite>:
 8005cda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005cde:	461f      	mov	r7, r3
 8005ce0:	898b      	ldrh	r3, [r1, #12]
 8005ce2:	05db      	lsls	r3, r3, #23
 8005ce4:	4605      	mov	r5, r0
 8005ce6:	460c      	mov	r4, r1
 8005ce8:	4616      	mov	r6, r2
 8005cea:	d505      	bpl.n	8005cf8 <__swrite+0x1e>
 8005cec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005cf0:	2302      	movs	r3, #2
 8005cf2:	2200      	movs	r2, #0
 8005cf4:	f000 f840 	bl	8005d78 <_lseek_r>
 8005cf8:	89a3      	ldrh	r3, [r4, #12]
 8005cfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005cfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005d02:	81a3      	strh	r3, [r4, #12]
 8005d04:	4632      	mov	r2, r6
 8005d06:	463b      	mov	r3, r7
 8005d08:	4628      	mov	r0, r5
 8005d0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005d0e:	f000 b857 	b.w	8005dc0 <_write_r>

08005d12 <__sseek>:
 8005d12:	b510      	push	{r4, lr}
 8005d14:	460c      	mov	r4, r1
 8005d16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d1a:	f000 f82d 	bl	8005d78 <_lseek_r>
 8005d1e:	1c43      	adds	r3, r0, #1
 8005d20:	89a3      	ldrh	r3, [r4, #12]
 8005d22:	bf15      	itete	ne
 8005d24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005d26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005d2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005d2e:	81a3      	strheq	r3, [r4, #12]
 8005d30:	bf18      	it	ne
 8005d32:	81a3      	strhne	r3, [r4, #12]
 8005d34:	bd10      	pop	{r4, pc}

08005d36 <__sclose>:
 8005d36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005d3a:	f000 b80d 	b.w	8005d58 <_close_r>

08005d3e <memset>:
 8005d3e:	4402      	add	r2, r0
 8005d40:	4603      	mov	r3, r0
 8005d42:	4293      	cmp	r3, r2
 8005d44:	d100      	bne.n	8005d48 <memset+0xa>
 8005d46:	4770      	bx	lr
 8005d48:	f803 1b01 	strb.w	r1, [r3], #1
 8005d4c:	e7f9      	b.n	8005d42 <memset+0x4>
	...

08005d50 <_localeconv_r>:
 8005d50:	4800      	ldr	r0, [pc, #0]	@ (8005d54 <_localeconv_r+0x4>)
 8005d52:	4770      	bx	lr
 8005d54:	20000158 	.word	0x20000158

08005d58 <_close_r>:
 8005d58:	b538      	push	{r3, r4, r5, lr}
 8005d5a:	4d06      	ldr	r5, [pc, #24]	@ (8005d74 <_close_r+0x1c>)
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	4604      	mov	r4, r0
 8005d60:	4608      	mov	r0, r1
 8005d62:	602b      	str	r3, [r5, #0]
 8005d64:	f7fb fa48 	bl	80011f8 <_close>
 8005d68:	1c43      	adds	r3, r0, #1
 8005d6a:	d102      	bne.n	8005d72 <_close_r+0x1a>
 8005d6c:	682b      	ldr	r3, [r5, #0]
 8005d6e:	b103      	cbz	r3, 8005d72 <_close_r+0x1a>
 8005d70:	6023      	str	r3, [r4, #0]
 8005d72:	bd38      	pop	{r3, r4, r5, pc}
 8005d74:	20000414 	.word	0x20000414

08005d78 <_lseek_r>:
 8005d78:	b538      	push	{r3, r4, r5, lr}
 8005d7a:	4d07      	ldr	r5, [pc, #28]	@ (8005d98 <_lseek_r+0x20>)
 8005d7c:	4604      	mov	r4, r0
 8005d7e:	4608      	mov	r0, r1
 8005d80:	4611      	mov	r1, r2
 8005d82:	2200      	movs	r2, #0
 8005d84:	602a      	str	r2, [r5, #0]
 8005d86:	461a      	mov	r2, r3
 8005d88:	f7fb fa5d 	bl	8001246 <_lseek>
 8005d8c:	1c43      	adds	r3, r0, #1
 8005d8e:	d102      	bne.n	8005d96 <_lseek_r+0x1e>
 8005d90:	682b      	ldr	r3, [r5, #0]
 8005d92:	b103      	cbz	r3, 8005d96 <_lseek_r+0x1e>
 8005d94:	6023      	str	r3, [r4, #0]
 8005d96:	bd38      	pop	{r3, r4, r5, pc}
 8005d98:	20000414 	.word	0x20000414

08005d9c <_read_r>:
 8005d9c:	b538      	push	{r3, r4, r5, lr}
 8005d9e:	4d07      	ldr	r5, [pc, #28]	@ (8005dbc <_read_r+0x20>)
 8005da0:	4604      	mov	r4, r0
 8005da2:	4608      	mov	r0, r1
 8005da4:	4611      	mov	r1, r2
 8005da6:	2200      	movs	r2, #0
 8005da8:	602a      	str	r2, [r5, #0]
 8005daa:	461a      	mov	r2, r3
 8005dac:	f7fb f9eb 	bl	8001186 <_read>
 8005db0:	1c43      	adds	r3, r0, #1
 8005db2:	d102      	bne.n	8005dba <_read_r+0x1e>
 8005db4:	682b      	ldr	r3, [r5, #0]
 8005db6:	b103      	cbz	r3, 8005dba <_read_r+0x1e>
 8005db8:	6023      	str	r3, [r4, #0]
 8005dba:	bd38      	pop	{r3, r4, r5, pc}
 8005dbc:	20000414 	.word	0x20000414

08005dc0 <_write_r>:
 8005dc0:	b538      	push	{r3, r4, r5, lr}
 8005dc2:	4d07      	ldr	r5, [pc, #28]	@ (8005de0 <_write_r+0x20>)
 8005dc4:	4604      	mov	r4, r0
 8005dc6:	4608      	mov	r0, r1
 8005dc8:	4611      	mov	r1, r2
 8005dca:	2200      	movs	r2, #0
 8005dcc:	602a      	str	r2, [r5, #0]
 8005dce:	461a      	mov	r2, r3
 8005dd0:	f7fb f9f6 	bl	80011c0 <_write>
 8005dd4:	1c43      	adds	r3, r0, #1
 8005dd6:	d102      	bne.n	8005dde <_write_r+0x1e>
 8005dd8:	682b      	ldr	r3, [r5, #0]
 8005dda:	b103      	cbz	r3, 8005dde <_write_r+0x1e>
 8005ddc:	6023      	str	r3, [r4, #0]
 8005dde:	bd38      	pop	{r3, r4, r5, pc}
 8005de0:	20000414 	.word	0x20000414

08005de4 <__errno>:
 8005de4:	4b01      	ldr	r3, [pc, #4]	@ (8005dec <__errno+0x8>)
 8005de6:	6818      	ldr	r0, [r3, #0]
 8005de8:	4770      	bx	lr
 8005dea:	bf00      	nop
 8005dec:	20000018 	.word	0x20000018

08005df0 <__libc_init_array>:
 8005df0:	b570      	push	{r4, r5, r6, lr}
 8005df2:	4d0d      	ldr	r5, [pc, #52]	@ (8005e28 <__libc_init_array+0x38>)
 8005df4:	4c0d      	ldr	r4, [pc, #52]	@ (8005e2c <__libc_init_array+0x3c>)
 8005df6:	1b64      	subs	r4, r4, r5
 8005df8:	10a4      	asrs	r4, r4, #2
 8005dfa:	2600      	movs	r6, #0
 8005dfc:	42a6      	cmp	r6, r4
 8005dfe:	d109      	bne.n	8005e14 <__libc_init_array+0x24>
 8005e00:	4d0b      	ldr	r5, [pc, #44]	@ (8005e30 <__libc_init_array+0x40>)
 8005e02:	4c0c      	ldr	r4, [pc, #48]	@ (8005e34 <__libc_init_array+0x44>)
 8005e04:	f001 febe 	bl	8007b84 <_init>
 8005e08:	1b64      	subs	r4, r4, r5
 8005e0a:	10a4      	asrs	r4, r4, #2
 8005e0c:	2600      	movs	r6, #0
 8005e0e:	42a6      	cmp	r6, r4
 8005e10:	d105      	bne.n	8005e1e <__libc_init_array+0x2e>
 8005e12:	bd70      	pop	{r4, r5, r6, pc}
 8005e14:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e18:	4798      	blx	r3
 8005e1a:	3601      	adds	r6, #1
 8005e1c:	e7ee      	b.n	8005dfc <__libc_init_array+0xc>
 8005e1e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005e22:	4798      	blx	r3
 8005e24:	3601      	adds	r6, #1
 8005e26:	e7f2      	b.n	8005e0e <__libc_init_array+0x1e>
 8005e28:	08007f68 	.word	0x08007f68
 8005e2c:	08007f68 	.word	0x08007f68
 8005e30:	08007f68 	.word	0x08007f68
 8005e34:	08007f6c 	.word	0x08007f6c

08005e38 <__retarget_lock_init_recursive>:
 8005e38:	4770      	bx	lr

08005e3a <__retarget_lock_acquire_recursive>:
 8005e3a:	4770      	bx	lr

08005e3c <__retarget_lock_release_recursive>:
 8005e3c:	4770      	bx	lr

08005e3e <quorem>:
 8005e3e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005e42:	6903      	ldr	r3, [r0, #16]
 8005e44:	690c      	ldr	r4, [r1, #16]
 8005e46:	42a3      	cmp	r3, r4
 8005e48:	4607      	mov	r7, r0
 8005e4a:	db7e      	blt.n	8005f4a <quorem+0x10c>
 8005e4c:	3c01      	subs	r4, #1
 8005e4e:	f101 0814 	add.w	r8, r1, #20
 8005e52:	00a3      	lsls	r3, r4, #2
 8005e54:	f100 0514 	add.w	r5, r0, #20
 8005e58:	9300      	str	r3, [sp, #0]
 8005e5a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005e5e:	9301      	str	r3, [sp, #4]
 8005e60:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005e64:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005e68:	3301      	adds	r3, #1
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005e70:	fbb2 f6f3 	udiv	r6, r2, r3
 8005e74:	d32e      	bcc.n	8005ed4 <quorem+0x96>
 8005e76:	f04f 0a00 	mov.w	sl, #0
 8005e7a:	46c4      	mov	ip, r8
 8005e7c:	46ae      	mov	lr, r5
 8005e7e:	46d3      	mov	fp, sl
 8005e80:	f85c 3b04 	ldr.w	r3, [ip], #4
 8005e84:	b298      	uxth	r0, r3
 8005e86:	fb06 a000 	mla	r0, r6, r0, sl
 8005e8a:	0c02      	lsrs	r2, r0, #16
 8005e8c:	0c1b      	lsrs	r3, r3, #16
 8005e8e:	fb06 2303 	mla	r3, r6, r3, r2
 8005e92:	f8de 2000 	ldr.w	r2, [lr]
 8005e96:	b280      	uxth	r0, r0
 8005e98:	b292      	uxth	r2, r2
 8005e9a:	1a12      	subs	r2, r2, r0
 8005e9c:	445a      	add	r2, fp
 8005e9e:	f8de 0000 	ldr.w	r0, [lr]
 8005ea2:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005ea6:	b29b      	uxth	r3, r3
 8005ea8:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8005eac:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8005eb0:	b292      	uxth	r2, r2
 8005eb2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8005eb6:	45e1      	cmp	r9, ip
 8005eb8:	f84e 2b04 	str.w	r2, [lr], #4
 8005ebc:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8005ec0:	d2de      	bcs.n	8005e80 <quorem+0x42>
 8005ec2:	9b00      	ldr	r3, [sp, #0]
 8005ec4:	58eb      	ldr	r3, [r5, r3]
 8005ec6:	b92b      	cbnz	r3, 8005ed4 <quorem+0x96>
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	3b04      	subs	r3, #4
 8005ecc:	429d      	cmp	r5, r3
 8005ece:	461a      	mov	r2, r3
 8005ed0:	d32f      	bcc.n	8005f32 <quorem+0xf4>
 8005ed2:	613c      	str	r4, [r7, #16]
 8005ed4:	4638      	mov	r0, r7
 8005ed6:	f001 f979 	bl	80071cc <__mcmp>
 8005eda:	2800      	cmp	r0, #0
 8005edc:	db25      	blt.n	8005f2a <quorem+0xec>
 8005ede:	4629      	mov	r1, r5
 8005ee0:	2000      	movs	r0, #0
 8005ee2:	f858 2b04 	ldr.w	r2, [r8], #4
 8005ee6:	f8d1 c000 	ldr.w	ip, [r1]
 8005eea:	fa1f fe82 	uxth.w	lr, r2
 8005eee:	fa1f f38c 	uxth.w	r3, ip
 8005ef2:	eba3 030e 	sub.w	r3, r3, lr
 8005ef6:	4403      	add	r3, r0
 8005ef8:	0c12      	lsrs	r2, r2, #16
 8005efa:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8005efe:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8005f02:	b29b      	uxth	r3, r3
 8005f04:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005f08:	45c1      	cmp	r9, r8
 8005f0a:	f841 3b04 	str.w	r3, [r1], #4
 8005f0e:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005f12:	d2e6      	bcs.n	8005ee2 <quorem+0xa4>
 8005f14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005f18:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005f1c:	b922      	cbnz	r2, 8005f28 <quorem+0xea>
 8005f1e:	3b04      	subs	r3, #4
 8005f20:	429d      	cmp	r5, r3
 8005f22:	461a      	mov	r2, r3
 8005f24:	d30b      	bcc.n	8005f3e <quorem+0x100>
 8005f26:	613c      	str	r4, [r7, #16]
 8005f28:	3601      	adds	r6, #1
 8005f2a:	4630      	mov	r0, r6
 8005f2c:	b003      	add	sp, #12
 8005f2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f32:	6812      	ldr	r2, [r2, #0]
 8005f34:	3b04      	subs	r3, #4
 8005f36:	2a00      	cmp	r2, #0
 8005f38:	d1cb      	bne.n	8005ed2 <quorem+0x94>
 8005f3a:	3c01      	subs	r4, #1
 8005f3c:	e7c6      	b.n	8005ecc <quorem+0x8e>
 8005f3e:	6812      	ldr	r2, [r2, #0]
 8005f40:	3b04      	subs	r3, #4
 8005f42:	2a00      	cmp	r2, #0
 8005f44:	d1ef      	bne.n	8005f26 <quorem+0xe8>
 8005f46:	3c01      	subs	r4, #1
 8005f48:	e7ea      	b.n	8005f20 <quorem+0xe2>
 8005f4a:	2000      	movs	r0, #0
 8005f4c:	e7ee      	b.n	8005f2c <quorem+0xee>
	...

08005f50 <_dtoa_r>:
 8005f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005f54:	69c7      	ldr	r7, [r0, #28]
 8005f56:	b099      	sub	sp, #100	@ 0x64
 8005f58:	ed8d 0b02 	vstr	d0, [sp, #8]
 8005f5c:	ec55 4b10 	vmov	r4, r5, d0
 8005f60:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8005f62:	9109      	str	r1, [sp, #36]	@ 0x24
 8005f64:	4683      	mov	fp, r0
 8005f66:	920e      	str	r2, [sp, #56]	@ 0x38
 8005f68:	9313      	str	r3, [sp, #76]	@ 0x4c
 8005f6a:	b97f      	cbnz	r7, 8005f8c <_dtoa_r+0x3c>
 8005f6c:	2010      	movs	r0, #16
 8005f6e:	f000 fdfd 	bl	8006b6c <malloc>
 8005f72:	4602      	mov	r2, r0
 8005f74:	f8cb 001c 	str.w	r0, [fp, #28]
 8005f78:	b920      	cbnz	r0, 8005f84 <_dtoa_r+0x34>
 8005f7a:	4ba7      	ldr	r3, [pc, #668]	@ (8006218 <_dtoa_r+0x2c8>)
 8005f7c:	21ef      	movs	r1, #239	@ 0xef
 8005f7e:	48a7      	ldr	r0, [pc, #668]	@ (800621c <_dtoa_r+0x2cc>)
 8005f80:	f001 fccc 	bl	800791c <__assert_func>
 8005f84:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8005f88:	6007      	str	r7, [r0, #0]
 8005f8a:	60c7      	str	r7, [r0, #12]
 8005f8c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005f90:	6819      	ldr	r1, [r3, #0]
 8005f92:	b159      	cbz	r1, 8005fac <_dtoa_r+0x5c>
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	604a      	str	r2, [r1, #4]
 8005f98:	2301      	movs	r3, #1
 8005f9a:	4093      	lsls	r3, r2
 8005f9c:	608b      	str	r3, [r1, #8]
 8005f9e:	4658      	mov	r0, fp
 8005fa0:	f000 feda 	bl	8006d58 <_Bfree>
 8005fa4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8005fa8:	2200      	movs	r2, #0
 8005faa:	601a      	str	r2, [r3, #0]
 8005fac:	1e2b      	subs	r3, r5, #0
 8005fae:	bfb9      	ittee	lt
 8005fb0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8005fb4:	9303      	strlt	r3, [sp, #12]
 8005fb6:	2300      	movge	r3, #0
 8005fb8:	6033      	strge	r3, [r6, #0]
 8005fba:	9f03      	ldr	r7, [sp, #12]
 8005fbc:	4b98      	ldr	r3, [pc, #608]	@ (8006220 <_dtoa_r+0x2d0>)
 8005fbe:	bfbc      	itt	lt
 8005fc0:	2201      	movlt	r2, #1
 8005fc2:	6032      	strlt	r2, [r6, #0]
 8005fc4:	43bb      	bics	r3, r7
 8005fc6:	d112      	bne.n	8005fee <_dtoa_r+0x9e>
 8005fc8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8005fca:	f242 730f 	movw	r3, #9999	@ 0x270f
 8005fce:	6013      	str	r3, [r2, #0]
 8005fd0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8005fd4:	4323      	orrs	r3, r4
 8005fd6:	f000 854d 	beq.w	8006a74 <_dtoa_r+0xb24>
 8005fda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8005fdc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006234 <_dtoa_r+0x2e4>
 8005fe0:	2b00      	cmp	r3, #0
 8005fe2:	f000 854f 	beq.w	8006a84 <_dtoa_r+0xb34>
 8005fe6:	f10a 0303 	add.w	r3, sl, #3
 8005fea:	f000 bd49 	b.w	8006a80 <_dtoa_r+0xb30>
 8005fee:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005ff2:	2200      	movs	r2, #0
 8005ff4:	ec51 0b17 	vmov	r0, r1, d7
 8005ff8:	2300      	movs	r3, #0
 8005ffa:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8005ffe:	f7fa fd6b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006002:	4680      	mov	r8, r0
 8006004:	b158      	cbz	r0, 800601e <_dtoa_r+0xce>
 8006006:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8006008:	2301      	movs	r3, #1
 800600a:	6013      	str	r3, [r2, #0]
 800600c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800600e:	b113      	cbz	r3, 8006016 <_dtoa_r+0xc6>
 8006010:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006012:	4b84      	ldr	r3, [pc, #528]	@ (8006224 <_dtoa_r+0x2d4>)
 8006014:	6013      	str	r3, [r2, #0]
 8006016:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006238 <_dtoa_r+0x2e8>
 800601a:	f000 bd33 	b.w	8006a84 <_dtoa_r+0xb34>
 800601e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006022:	aa16      	add	r2, sp, #88	@ 0x58
 8006024:	a917      	add	r1, sp, #92	@ 0x5c
 8006026:	4658      	mov	r0, fp
 8006028:	f001 f980 	bl	800732c <__d2b>
 800602c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006030:	4681      	mov	r9, r0
 8006032:	2e00      	cmp	r6, #0
 8006034:	d077      	beq.n	8006126 <_dtoa_r+0x1d6>
 8006036:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006038:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800603c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006040:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006044:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006048:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800604c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006050:	4619      	mov	r1, r3
 8006052:	2200      	movs	r2, #0
 8006054:	4b74      	ldr	r3, [pc, #464]	@ (8006228 <_dtoa_r+0x2d8>)
 8006056:	f7fa f91f 	bl	8000298 <__aeabi_dsub>
 800605a:	a369      	add	r3, pc, #420	@ (adr r3, 8006200 <_dtoa_r+0x2b0>)
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f7fa fad2 	bl	8000608 <__aeabi_dmul>
 8006064:	a368      	add	r3, pc, #416	@ (adr r3, 8006208 <_dtoa_r+0x2b8>)
 8006066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800606a:	f7fa f917 	bl	800029c <__adddf3>
 800606e:	4604      	mov	r4, r0
 8006070:	4630      	mov	r0, r6
 8006072:	460d      	mov	r5, r1
 8006074:	f7fa fa5e 	bl	8000534 <__aeabi_i2d>
 8006078:	a365      	add	r3, pc, #404	@ (adr r3, 8006210 <_dtoa_r+0x2c0>)
 800607a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800607e:	f7fa fac3 	bl	8000608 <__aeabi_dmul>
 8006082:	4602      	mov	r2, r0
 8006084:	460b      	mov	r3, r1
 8006086:	4620      	mov	r0, r4
 8006088:	4629      	mov	r1, r5
 800608a:	f7fa f907 	bl	800029c <__adddf3>
 800608e:	4604      	mov	r4, r0
 8006090:	460d      	mov	r5, r1
 8006092:	f7fa fd69 	bl	8000b68 <__aeabi_d2iz>
 8006096:	2200      	movs	r2, #0
 8006098:	4607      	mov	r7, r0
 800609a:	2300      	movs	r3, #0
 800609c:	4620      	mov	r0, r4
 800609e:	4629      	mov	r1, r5
 80060a0:	f7fa fd24 	bl	8000aec <__aeabi_dcmplt>
 80060a4:	b140      	cbz	r0, 80060b8 <_dtoa_r+0x168>
 80060a6:	4638      	mov	r0, r7
 80060a8:	f7fa fa44 	bl	8000534 <__aeabi_i2d>
 80060ac:	4622      	mov	r2, r4
 80060ae:	462b      	mov	r3, r5
 80060b0:	f7fa fd12 	bl	8000ad8 <__aeabi_dcmpeq>
 80060b4:	b900      	cbnz	r0, 80060b8 <_dtoa_r+0x168>
 80060b6:	3f01      	subs	r7, #1
 80060b8:	2f16      	cmp	r7, #22
 80060ba:	d851      	bhi.n	8006160 <_dtoa_r+0x210>
 80060bc:	4b5b      	ldr	r3, [pc, #364]	@ (800622c <_dtoa_r+0x2dc>)
 80060be:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80060c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060c6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80060ca:	f7fa fd0f 	bl	8000aec <__aeabi_dcmplt>
 80060ce:	2800      	cmp	r0, #0
 80060d0:	d048      	beq.n	8006164 <_dtoa_r+0x214>
 80060d2:	3f01      	subs	r7, #1
 80060d4:	2300      	movs	r3, #0
 80060d6:	9312      	str	r3, [sp, #72]	@ 0x48
 80060d8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80060da:	1b9b      	subs	r3, r3, r6
 80060dc:	1e5a      	subs	r2, r3, #1
 80060de:	bf44      	itt	mi
 80060e0:	f1c3 0801 	rsbmi	r8, r3, #1
 80060e4:	2300      	movmi	r3, #0
 80060e6:	9208      	str	r2, [sp, #32]
 80060e8:	bf54      	ite	pl
 80060ea:	f04f 0800 	movpl.w	r8, #0
 80060ee:	9308      	strmi	r3, [sp, #32]
 80060f0:	2f00      	cmp	r7, #0
 80060f2:	db39      	blt.n	8006168 <_dtoa_r+0x218>
 80060f4:	9b08      	ldr	r3, [sp, #32]
 80060f6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80060f8:	443b      	add	r3, r7
 80060fa:	9308      	str	r3, [sp, #32]
 80060fc:	2300      	movs	r3, #0
 80060fe:	930a      	str	r3, [sp, #40]	@ 0x28
 8006100:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006102:	2b09      	cmp	r3, #9
 8006104:	d864      	bhi.n	80061d0 <_dtoa_r+0x280>
 8006106:	2b05      	cmp	r3, #5
 8006108:	bfc4      	itt	gt
 800610a:	3b04      	subgt	r3, #4
 800610c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800610e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006110:	f1a3 0302 	sub.w	r3, r3, #2
 8006114:	bfcc      	ite	gt
 8006116:	2400      	movgt	r4, #0
 8006118:	2401      	movle	r4, #1
 800611a:	2b03      	cmp	r3, #3
 800611c:	d863      	bhi.n	80061e6 <_dtoa_r+0x296>
 800611e:	e8df f003 	tbb	[pc, r3]
 8006122:	372a      	.short	0x372a
 8006124:	5535      	.short	0x5535
 8006126:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800612a:	441e      	add	r6, r3
 800612c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006130:	2b20      	cmp	r3, #32
 8006132:	bfc1      	itttt	gt
 8006134:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006138:	409f      	lslgt	r7, r3
 800613a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800613e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006142:	bfd6      	itet	le
 8006144:	f1c3 0320 	rsble	r3, r3, #32
 8006148:	ea47 0003 	orrgt.w	r0, r7, r3
 800614c:	fa04 f003 	lslle.w	r0, r4, r3
 8006150:	f7fa f9e0 	bl	8000514 <__aeabi_ui2d>
 8006154:	2201      	movs	r2, #1
 8006156:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800615a:	3e01      	subs	r6, #1
 800615c:	9214      	str	r2, [sp, #80]	@ 0x50
 800615e:	e777      	b.n	8006050 <_dtoa_r+0x100>
 8006160:	2301      	movs	r3, #1
 8006162:	e7b8      	b.n	80060d6 <_dtoa_r+0x186>
 8006164:	9012      	str	r0, [sp, #72]	@ 0x48
 8006166:	e7b7      	b.n	80060d8 <_dtoa_r+0x188>
 8006168:	427b      	negs	r3, r7
 800616a:	930a      	str	r3, [sp, #40]	@ 0x28
 800616c:	2300      	movs	r3, #0
 800616e:	eba8 0807 	sub.w	r8, r8, r7
 8006172:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006174:	e7c4      	b.n	8006100 <_dtoa_r+0x1b0>
 8006176:	2300      	movs	r3, #0
 8006178:	930b      	str	r3, [sp, #44]	@ 0x2c
 800617a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800617c:	2b00      	cmp	r3, #0
 800617e:	dc35      	bgt.n	80061ec <_dtoa_r+0x29c>
 8006180:	2301      	movs	r3, #1
 8006182:	9300      	str	r3, [sp, #0]
 8006184:	9307      	str	r3, [sp, #28]
 8006186:	461a      	mov	r2, r3
 8006188:	920e      	str	r2, [sp, #56]	@ 0x38
 800618a:	e00b      	b.n	80061a4 <_dtoa_r+0x254>
 800618c:	2301      	movs	r3, #1
 800618e:	e7f3      	b.n	8006178 <_dtoa_r+0x228>
 8006190:	2300      	movs	r3, #0
 8006192:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006194:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006196:	18fb      	adds	r3, r7, r3
 8006198:	9300      	str	r3, [sp, #0]
 800619a:	3301      	adds	r3, #1
 800619c:	2b01      	cmp	r3, #1
 800619e:	9307      	str	r3, [sp, #28]
 80061a0:	bfb8      	it	lt
 80061a2:	2301      	movlt	r3, #1
 80061a4:	f8db 001c 	ldr.w	r0, [fp, #28]
 80061a8:	2100      	movs	r1, #0
 80061aa:	2204      	movs	r2, #4
 80061ac:	f102 0514 	add.w	r5, r2, #20
 80061b0:	429d      	cmp	r5, r3
 80061b2:	d91f      	bls.n	80061f4 <_dtoa_r+0x2a4>
 80061b4:	6041      	str	r1, [r0, #4]
 80061b6:	4658      	mov	r0, fp
 80061b8:	f000 fd8e 	bl	8006cd8 <_Balloc>
 80061bc:	4682      	mov	sl, r0
 80061be:	2800      	cmp	r0, #0
 80061c0:	d13c      	bne.n	800623c <_dtoa_r+0x2ec>
 80061c2:	4b1b      	ldr	r3, [pc, #108]	@ (8006230 <_dtoa_r+0x2e0>)
 80061c4:	4602      	mov	r2, r0
 80061c6:	f240 11af 	movw	r1, #431	@ 0x1af
 80061ca:	e6d8      	b.n	8005f7e <_dtoa_r+0x2e>
 80061cc:	2301      	movs	r3, #1
 80061ce:	e7e0      	b.n	8006192 <_dtoa_r+0x242>
 80061d0:	2401      	movs	r4, #1
 80061d2:	2300      	movs	r3, #0
 80061d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80061d6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80061d8:	f04f 33ff 	mov.w	r3, #4294967295
 80061dc:	9300      	str	r3, [sp, #0]
 80061de:	9307      	str	r3, [sp, #28]
 80061e0:	2200      	movs	r2, #0
 80061e2:	2312      	movs	r3, #18
 80061e4:	e7d0      	b.n	8006188 <_dtoa_r+0x238>
 80061e6:	2301      	movs	r3, #1
 80061e8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80061ea:	e7f5      	b.n	80061d8 <_dtoa_r+0x288>
 80061ec:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80061ee:	9300      	str	r3, [sp, #0]
 80061f0:	9307      	str	r3, [sp, #28]
 80061f2:	e7d7      	b.n	80061a4 <_dtoa_r+0x254>
 80061f4:	3101      	adds	r1, #1
 80061f6:	0052      	lsls	r2, r2, #1
 80061f8:	e7d8      	b.n	80061ac <_dtoa_r+0x25c>
 80061fa:	bf00      	nop
 80061fc:	f3af 8000 	nop.w
 8006200:	636f4361 	.word	0x636f4361
 8006204:	3fd287a7 	.word	0x3fd287a7
 8006208:	8b60c8b3 	.word	0x8b60c8b3
 800620c:	3fc68a28 	.word	0x3fc68a28
 8006210:	509f79fb 	.word	0x509f79fb
 8006214:	3fd34413 	.word	0x3fd34413
 8006218:	08007c31 	.word	0x08007c31
 800621c:	08007c48 	.word	0x08007c48
 8006220:	7ff00000 	.word	0x7ff00000
 8006224:	08007c01 	.word	0x08007c01
 8006228:	3ff80000 	.word	0x3ff80000
 800622c:	08007d40 	.word	0x08007d40
 8006230:	08007ca0 	.word	0x08007ca0
 8006234:	08007c2d 	.word	0x08007c2d
 8006238:	08007c00 	.word	0x08007c00
 800623c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006240:	6018      	str	r0, [r3, #0]
 8006242:	9b07      	ldr	r3, [sp, #28]
 8006244:	2b0e      	cmp	r3, #14
 8006246:	f200 80a4 	bhi.w	8006392 <_dtoa_r+0x442>
 800624a:	2c00      	cmp	r4, #0
 800624c:	f000 80a1 	beq.w	8006392 <_dtoa_r+0x442>
 8006250:	2f00      	cmp	r7, #0
 8006252:	dd33      	ble.n	80062bc <_dtoa_r+0x36c>
 8006254:	4bad      	ldr	r3, [pc, #692]	@ (800650c <_dtoa_r+0x5bc>)
 8006256:	f007 020f 	and.w	r2, r7, #15
 800625a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800625e:	ed93 7b00 	vldr	d7, [r3]
 8006262:	05f8      	lsls	r0, r7, #23
 8006264:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006268:	ea4f 1427 	mov.w	r4, r7, asr #4
 800626c:	d516      	bpl.n	800629c <_dtoa_r+0x34c>
 800626e:	4ba8      	ldr	r3, [pc, #672]	@ (8006510 <_dtoa_r+0x5c0>)
 8006270:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006274:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006278:	f7fa faf0 	bl	800085c <__aeabi_ddiv>
 800627c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006280:	f004 040f 	and.w	r4, r4, #15
 8006284:	2603      	movs	r6, #3
 8006286:	4da2      	ldr	r5, [pc, #648]	@ (8006510 <_dtoa_r+0x5c0>)
 8006288:	b954      	cbnz	r4, 80062a0 <_dtoa_r+0x350>
 800628a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800628e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006292:	f7fa fae3 	bl	800085c <__aeabi_ddiv>
 8006296:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800629a:	e028      	b.n	80062ee <_dtoa_r+0x39e>
 800629c:	2602      	movs	r6, #2
 800629e:	e7f2      	b.n	8006286 <_dtoa_r+0x336>
 80062a0:	07e1      	lsls	r1, r4, #31
 80062a2:	d508      	bpl.n	80062b6 <_dtoa_r+0x366>
 80062a4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062a8:	e9d5 2300 	ldrd	r2, r3, [r5]
 80062ac:	f7fa f9ac 	bl	8000608 <__aeabi_dmul>
 80062b0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062b4:	3601      	adds	r6, #1
 80062b6:	1064      	asrs	r4, r4, #1
 80062b8:	3508      	adds	r5, #8
 80062ba:	e7e5      	b.n	8006288 <_dtoa_r+0x338>
 80062bc:	f000 80d2 	beq.w	8006464 <_dtoa_r+0x514>
 80062c0:	427c      	negs	r4, r7
 80062c2:	4b92      	ldr	r3, [pc, #584]	@ (800650c <_dtoa_r+0x5bc>)
 80062c4:	4d92      	ldr	r5, [pc, #584]	@ (8006510 <_dtoa_r+0x5c0>)
 80062c6:	f004 020f 	and.w	r2, r4, #15
 80062ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80062ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062d2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80062d6:	f7fa f997 	bl	8000608 <__aeabi_dmul>
 80062da:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80062de:	1124      	asrs	r4, r4, #4
 80062e0:	2300      	movs	r3, #0
 80062e2:	2602      	movs	r6, #2
 80062e4:	2c00      	cmp	r4, #0
 80062e6:	f040 80b2 	bne.w	800644e <_dtoa_r+0x4fe>
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d1d3      	bne.n	8006296 <_dtoa_r+0x346>
 80062ee:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80062f0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	f000 80b7 	beq.w	8006468 <_dtoa_r+0x518>
 80062fa:	4b86      	ldr	r3, [pc, #536]	@ (8006514 <_dtoa_r+0x5c4>)
 80062fc:	2200      	movs	r2, #0
 80062fe:	4620      	mov	r0, r4
 8006300:	4629      	mov	r1, r5
 8006302:	f7fa fbf3 	bl	8000aec <__aeabi_dcmplt>
 8006306:	2800      	cmp	r0, #0
 8006308:	f000 80ae 	beq.w	8006468 <_dtoa_r+0x518>
 800630c:	9b07      	ldr	r3, [sp, #28]
 800630e:	2b00      	cmp	r3, #0
 8006310:	f000 80aa 	beq.w	8006468 <_dtoa_r+0x518>
 8006314:	9b00      	ldr	r3, [sp, #0]
 8006316:	2b00      	cmp	r3, #0
 8006318:	dd37      	ble.n	800638a <_dtoa_r+0x43a>
 800631a:	1e7b      	subs	r3, r7, #1
 800631c:	9304      	str	r3, [sp, #16]
 800631e:	4620      	mov	r0, r4
 8006320:	4b7d      	ldr	r3, [pc, #500]	@ (8006518 <_dtoa_r+0x5c8>)
 8006322:	2200      	movs	r2, #0
 8006324:	4629      	mov	r1, r5
 8006326:	f7fa f96f 	bl	8000608 <__aeabi_dmul>
 800632a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800632e:	9c00      	ldr	r4, [sp, #0]
 8006330:	3601      	adds	r6, #1
 8006332:	4630      	mov	r0, r6
 8006334:	f7fa f8fe 	bl	8000534 <__aeabi_i2d>
 8006338:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800633c:	f7fa f964 	bl	8000608 <__aeabi_dmul>
 8006340:	4b76      	ldr	r3, [pc, #472]	@ (800651c <_dtoa_r+0x5cc>)
 8006342:	2200      	movs	r2, #0
 8006344:	f7f9 ffaa 	bl	800029c <__adddf3>
 8006348:	4605      	mov	r5, r0
 800634a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800634e:	2c00      	cmp	r4, #0
 8006350:	f040 808d 	bne.w	800646e <_dtoa_r+0x51e>
 8006354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006358:	4b71      	ldr	r3, [pc, #452]	@ (8006520 <_dtoa_r+0x5d0>)
 800635a:	2200      	movs	r2, #0
 800635c:	f7f9 ff9c 	bl	8000298 <__aeabi_dsub>
 8006360:	4602      	mov	r2, r0
 8006362:	460b      	mov	r3, r1
 8006364:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006368:	462a      	mov	r2, r5
 800636a:	4633      	mov	r3, r6
 800636c:	f7fa fbdc 	bl	8000b28 <__aeabi_dcmpgt>
 8006370:	2800      	cmp	r0, #0
 8006372:	f040 828b 	bne.w	800688c <_dtoa_r+0x93c>
 8006376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800637a:	462a      	mov	r2, r5
 800637c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006380:	f7fa fbb4 	bl	8000aec <__aeabi_dcmplt>
 8006384:	2800      	cmp	r0, #0
 8006386:	f040 8128 	bne.w	80065da <_dtoa_r+0x68a>
 800638a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800638e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006392:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006394:	2b00      	cmp	r3, #0
 8006396:	f2c0 815a 	blt.w	800664e <_dtoa_r+0x6fe>
 800639a:	2f0e      	cmp	r7, #14
 800639c:	f300 8157 	bgt.w	800664e <_dtoa_r+0x6fe>
 80063a0:	4b5a      	ldr	r3, [pc, #360]	@ (800650c <_dtoa_r+0x5bc>)
 80063a2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80063a6:	ed93 7b00 	vldr	d7, [r3]
 80063aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063ac:	2b00      	cmp	r3, #0
 80063ae:	ed8d 7b00 	vstr	d7, [sp]
 80063b2:	da03      	bge.n	80063bc <_dtoa_r+0x46c>
 80063b4:	9b07      	ldr	r3, [sp, #28]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	f340 8101 	ble.w	80065be <_dtoa_r+0x66e>
 80063bc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80063c0:	4656      	mov	r6, sl
 80063c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063c6:	4620      	mov	r0, r4
 80063c8:	4629      	mov	r1, r5
 80063ca:	f7fa fa47 	bl	800085c <__aeabi_ddiv>
 80063ce:	f7fa fbcb 	bl	8000b68 <__aeabi_d2iz>
 80063d2:	4680      	mov	r8, r0
 80063d4:	f7fa f8ae 	bl	8000534 <__aeabi_i2d>
 80063d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80063dc:	f7fa f914 	bl	8000608 <__aeabi_dmul>
 80063e0:	4602      	mov	r2, r0
 80063e2:	460b      	mov	r3, r1
 80063e4:	4620      	mov	r0, r4
 80063e6:	4629      	mov	r1, r5
 80063e8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80063ec:	f7f9 ff54 	bl	8000298 <__aeabi_dsub>
 80063f0:	f806 4b01 	strb.w	r4, [r6], #1
 80063f4:	9d07      	ldr	r5, [sp, #28]
 80063f6:	eba6 040a 	sub.w	r4, r6, sl
 80063fa:	42a5      	cmp	r5, r4
 80063fc:	4602      	mov	r2, r0
 80063fe:	460b      	mov	r3, r1
 8006400:	f040 8117 	bne.w	8006632 <_dtoa_r+0x6e2>
 8006404:	f7f9 ff4a 	bl	800029c <__adddf3>
 8006408:	e9dd 2300 	ldrd	r2, r3, [sp]
 800640c:	4604      	mov	r4, r0
 800640e:	460d      	mov	r5, r1
 8006410:	f7fa fb8a 	bl	8000b28 <__aeabi_dcmpgt>
 8006414:	2800      	cmp	r0, #0
 8006416:	f040 80f9 	bne.w	800660c <_dtoa_r+0x6bc>
 800641a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800641e:	4620      	mov	r0, r4
 8006420:	4629      	mov	r1, r5
 8006422:	f7fa fb59 	bl	8000ad8 <__aeabi_dcmpeq>
 8006426:	b118      	cbz	r0, 8006430 <_dtoa_r+0x4e0>
 8006428:	f018 0f01 	tst.w	r8, #1
 800642c:	f040 80ee 	bne.w	800660c <_dtoa_r+0x6bc>
 8006430:	4649      	mov	r1, r9
 8006432:	4658      	mov	r0, fp
 8006434:	f000 fc90 	bl	8006d58 <_Bfree>
 8006438:	2300      	movs	r3, #0
 800643a:	7033      	strb	r3, [r6, #0]
 800643c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800643e:	3701      	adds	r7, #1
 8006440:	601f      	str	r7, [r3, #0]
 8006442:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006444:	2b00      	cmp	r3, #0
 8006446:	f000 831d 	beq.w	8006a84 <_dtoa_r+0xb34>
 800644a:	601e      	str	r6, [r3, #0]
 800644c:	e31a      	b.n	8006a84 <_dtoa_r+0xb34>
 800644e:	07e2      	lsls	r2, r4, #31
 8006450:	d505      	bpl.n	800645e <_dtoa_r+0x50e>
 8006452:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006456:	f7fa f8d7 	bl	8000608 <__aeabi_dmul>
 800645a:	3601      	adds	r6, #1
 800645c:	2301      	movs	r3, #1
 800645e:	1064      	asrs	r4, r4, #1
 8006460:	3508      	adds	r5, #8
 8006462:	e73f      	b.n	80062e4 <_dtoa_r+0x394>
 8006464:	2602      	movs	r6, #2
 8006466:	e742      	b.n	80062ee <_dtoa_r+0x39e>
 8006468:	9c07      	ldr	r4, [sp, #28]
 800646a:	9704      	str	r7, [sp, #16]
 800646c:	e761      	b.n	8006332 <_dtoa_r+0x3e2>
 800646e:	4b27      	ldr	r3, [pc, #156]	@ (800650c <_dtoa_r+0x5bc>)
 8006470:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006472:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006476:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800647a:	4454      	add	r4, sl
 800647c:	2900      	cmp	r1, #0
 800647e:	d053      	beq.n	8006528 <_dtoa_r+0x5d8>
 8006480:	4928      	ldr	r1, [pc, #160]	@ (8006524 <_dtoa_r+0x5d4>)
 8006482:	2000      	movs	r0, #0
 8006484:	f7fa f9ea 	bl	800085c <__aeabi_ddiv>
 8006488:	4633      	mov	r3, r6
 800648a:	462a      	mov	r2, r5
 800648c:	f7f9 ff04 	bl	8000298 <__aeabi_dsub>
 8006490:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006494:	4656      	mov	r6, sl
 8006496:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800649a:	f7fa fb65 	bl	8000b68 <__aeabi_d2iz>
 800649e:	4605      	mov	r5, r0
 80064a0:	f7fa f848 	bl	8000534 <__aeabi_i2d>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80064ac:	f7f9 fef4 	bl	8000298 <__aeabi_dsub>
 80064b0:	3530      	adds	r5, #48	@ 0x30
 80064b2:	4602      	mov	r2, r0
 80064b4:	460b      	mov	r3, r1
 80064b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80064ba:	f806 5b01 	strb.w	r5, [r6], #1
 80064be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064c2:	f7fa fb13 	bl	8000aec <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	d171      	bne.n	80065ae <_dtoa_r+0x65e>
 80064ca:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064ce:	4911      	ldr	r1, [pc, #68]	@ (8006514 <_dtoa_r+0x5c4>)
 80064d0:	2000      	movs	r0, #0
 80064d2:	f7f9 fee1 	bl	8000298 <__aeabi_dsub>
 80064d6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80064da:	f7fa fb07 	bl	8000aec <__aeabi_dcmplt>
 80064de:	2800      	cmp	r0, #0
 80064e0:	f040 8095 	bne.w	800660e <_dtoa_r+0x6be>
 80064e4:	42a6      	cmp	r6, r4
 80064e6:	f43f af50 	beq.w	800638a <_dtoa_r+0x43a>
 80064ea:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80064ee:	4b0a      	ldr	r3, [pc, #40]	@ (8006518 <_dtoa_r+0x5c8>)
 80064f0:	2200      	movs	r2, #0
 80064f2:	f7fa f889 	bl	8000608 <__aeabi_dmul>
 80064f6:	4b08      	ldr	r3, [pc, #32]	@ (8006518 <_dtoa_r+0x5c8>)
 80064f8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80064fc:	2200      	movs	r2, #0
 80064fe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006502:	f7fa f881 	bl	8000608 <__aeabi_dmul>
 8006506:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800650a:	e7c4      	b.n	8006496 <_dtoa_r+0x546>
 800650c:	08007d40 	.word	0x08007d40
 8006510:	08007d18 	.word	0x08007d18
 8006514:	3ff00000 	.word	0x3ff00000
 8006518:	40240000 	.word	0x40240000
 800651c:	401c0000 	.word	0x401c0000
 8006520:	40140000 	.word	0x40140000
 8006524:	3fe00000 	.word	0x3fe00000
 8006528:	4631      	mov	r1, r6
 800652a:	4628      	mov	r0, r5
 800652c:	f7fa f86c 	bl	8000608 <__aeabi_dmul>
 8006530:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006534:	9415      	str	r4, [sp, #84]	@ 0x54
 8006536:	4656      	mov	r6, sl
 8006538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800653c:	f7fa fb14 	bl	8000b68 <__aeabi_d2iz>
 8006540:	4605      	mov	r5, r0
 8006542:	f7f9 fff7 	bl	8000534 <__aeabi_i2d>
 8006546:	4602      	mov	r2, r0
 8006548:	460b      	mov	r3, r1
 800654a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800654e:	f7f9 fea3 	bl	8000298 <__aeabi_dsub>
 8006552:	3530      	adds	r5, #48	@ 0x30
 8006554:	f806 5b01 	strb.w	r5, [r6], #1
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	42a6      	cmp	r6, r4
 800655e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006562:	f04f 0200 	mov.w	r2, #0
 8006566:	d124      	bne.n	80065b2 <_dtoa_r+0x662>
 8006568:	4bac      	ldr	r3, [pc, #688]	@ (800681c <_dtoa_r+0x8cc>)
 800656a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800656e:	f7f9 fe95 	bl	800029c <__adddf3>
 8006572:	4602      	mov	r2, r0
 8006574:	460b      	mov	r3, r1
 8006576:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800657a:	f7fa fad5 	bl	8000b28 <__aeabi_dcmpgt>
 800657e:	2800      	cmp	r0, #0
 8006580:	d145      	bne.n	800660e <_dtoa_r+0x6be>
 8006582:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006586:	49a5      	ldr	r1, [pc, #660]	@ (800681c <_dtoa_r+0x8cc>)
 8006588:	2000      	movs	r0, #0
 800658a:	f7f9 fe85 	bl	8000298 <__aeabi_dsub>
 800658e:	4602      	mov	r2, r0
 8006590:	460b      	mov	r3, r1
 8006592:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006596:	f7fa faa9 	bl	8000aec <__aeabi_dcmplt>
 800659a:	2800      	cmp	r0, #0
 800659c:	f43f aef5 	beq.w	800638a <_dtoa_r+0x43a>
 80065a0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80065a2:	1e73      	subs	r3, r6, #1
 80065a4:	9315      	str	r3, [sp, #84]	@ 0x54
 80065a6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80065aa:	2b30      	cmp	r3, #48	@ 0x30
 80065ac:	d0f8      	beq.n	80065a0 <_dtoa_r+0x650>
 80065ae:	9f04      	ldr	r7, [sp, #16]
 80065b0:	e73e      	b.n	8006430 <_dtoa_r+0x4e0>
 80065b2:	4b9b      	ldr	r3, [pc, #620]	@ (8006820 <_dtoa_r+0x8d0>)
 80065b4:	f7fa f828 	bl	8000608 <__aeabi_dmul>
 80065b8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80065bc:	e7bc      	b.n	8006538 <_dtoa_r+0x5e8>
 80065be:	d10c      	bne.n	80065da <_dtoa_r+0x68a>
 80065c0:	4b98      	ldr	r3, [pc, #608]	@ (8006824 <_dtoa_r+0x8d4>)
 80065c2:	2200      	movs	r2, #0
 80065c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065c8:	f7fa f81e 	bl	8000608 <__aeabi_dmul>
 80065cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80065d0:	f7fa faa0 	bl	8000b14 <__aeabi_dcmpge>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f000 8157 	beq.w	8006888 <_dtoa_r+0x938>
 80065da:	2400      	movs	r4, #0
 80065dc:	4625      	mov	r5, r4
 80065de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80065e0:	43db      	mvns	r3, r3
 80065e2:	9304      	str	r3, [sp, #16]
 80065e4:	4656      	mov	r6, sl
 80065e6:	2700      	movs	r7, #0
 80065e8:	4621      	mov	r1, r4
 80065ea:	4658      	mov	r0, fp
 80065ec:	f000 fbb4 	bl	8006d58 <_Bfree>
 80065f0:	2d00      	cmp	r5, #0
 80065f2:	d0dc      	beq.n	80065ae <_dtoa_r+0x65e>
 80065f4:	b12f      	cbz	r7, 8006602 <_dtoa_r+0x6b2>
 80065f6:	42af      	cmp	r7, r5
 80065f8:	d003      	beq.n	8006602 <_dtoa_r+0x6b2>
 80065fa:	4639      	mov	r1, r7
 80065fc:	4658      	mov	r0, fp
 80065fe:	f000 fbab 	bl	8006d58 <_Bfree>
 8006602:	4629      	mov	r1, r5
 8006604:	4658      	mov	r0, fp
 8006606:	f000 fba7 	bl	8006d58 <_Bfree>
 800660a:	e7d0      	b.n	80065ae <_dtoa_r+0x65e>
 800660c:	9704      	str	r7, [sp, #16]
 800660e:	4633      	mov	r3, r6
 8006610:	461e      	mov	r6, r3
 8006612:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006616:	2a39      	cmp	r2, #57	@ 0x39
 8006618:	d107      	bne.n	800662a <_dtoa_r+0x6da>
 800661a:	459a      	cmp	sl, r3
 800661c:	d1f8      	bne.n	8006610 <_dtoa_r+0x6c0>
 800661e:	9a04      	ldr	r2, [sp, #16]
 8006620:	3201      	adds	r2, #1
 8006622:	9204      	str	r2, [sp, #16]
 8006624:	2230      	movs	r2, #48	@ 0x30
 8006626:	f88a 2000 	strb.w	r2, [sl]
 800662a:	781a      	ldrb	r2, [r3, #0]
 800662c:	3201      	adds	r2, #1
 800662e:	701a      	strb	r2, [r3, #0]
 8006630:	e7bd      	b.n	80065ae <_dtoa_r+0x65e>
 8006632:	4b7b      	ldr	r3, [pc, #492]	@ (8006820 <_dtoa_r+0x8d0>)
 8006634:	2200      	movs	r2, #0
 8006636:	f7f9 ffe7 	bl	8000608 <__aeabi_dmul>
 800663a:	2200      	movs	r2, #0
 800663c:	2300      	movs	r3, #0
 800663e:	4604      	mov	r4, r0
 8006640:	460d      	mov	r5, r1
 8006642:	f7fa fa49 	bl	8000ad8 <__aeabi_dcmpeq>
 8006646:	2800      	cmp	r0, #0
 8006648:	f43f aebb 	beq.w	80063c2 <_dtoa_r+0x472>
 800664c:	e6f0      	b.n	8006430 <_dtoa_r+0x4e0>
 800664e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006650:	2a00      	cmp	r2, #0
 8006652:	f000 80db 	beq.w	800680c <_dtoa_r+0x8bc>
 8006656:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006658:	2a01      	cmp	r2, #1
 800665a:	f300 80bf 	bgt.w	80067dc <_dtoa_r+0x88c>
 800665e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006660:	2a00      	cmp	r2, #0
 8006662:	f000 80b7 	beq.w	80067d4 <_dtoa_r+0x884>
 8006666:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800666a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800666c:	4646      	mov	r6, r8
 800666e:	9a08      	ldr	r2, [sp, #32]
 8006670:	2101      	movs	r1, #1
 8006672:	441a      	add	r2, r3
 8006674:	4658      	mov	r0, fp
 8006676:	4498      	add	r8, r3
 8006678:	9208      	str	r2, [sp, #32]
 800667a:	f000 fc21 	bl	8006ec0 <__i2b>
 800667e:	4605      	mov	r5, r0
 8006680:	b15e      	cbz	r6, 800669a <_dtoa_r+0x74a>
 8006682:	9b08      	ldr	r3, [sp, #32]
 8006684:	2b00      	cmp	r3, #0
 8006686:	dd08      	ble.n	800669a <_dtoa_r+0x74a>
 8006688:	42b3      	cmp	r3, r6
 800668a:	9a08      	ldr	r2, [sp, #32]
 800668c:	bfa8      	it	ge
 800668e:	4633      	movge	r3, r6
 8006690:	eba8 0803 	sub.w	r8, r8, r3
 8006694:	1af6      	subs	r6, r6, r3
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	9308      	str	r3, [sp, #32]
 800669a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800669c:	b1f3      	cbz	r3, 80066dc <_dtoa_r+0x78c>
 800669e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	f000 80b7 	beq.w	8006814 <_dtoa_r+0x8c4>
 80066a6:	b18c      	cbz	r4, 80066cc <_dtoa_r+0x77c>
 80066a8:	4629      	mov	r1, r5
 80066aa:	4622      	mov	r2, r4
 80066ac:	4658      	mov	r0, fp
 80066ae:	f000 fcc7 	bl	8007040 <__pow5mult>
 80066b2:	464a      	mov	r2, r9
 80066b4:	4601      	mov	r1, r0
 80066b6:	4605      	mov	r5, r0
 80066b8:	4658      	mov	r0, fp
 80066ba:	f000 fc17 	bl	8006eec <__multiply>
 80066be:	4649      	mov	r1, r9
 80066c0:	9004      	str	r0, [sp, #16]
 80066c2:	4658      	mov	r0, fp
 80066c4:	f000 fb48 	bl	8006d58 <_Bfree>
 80066c8:	9b04      	ldr	r3, [sp, #16]
 80066ca:	4699      	mov	r9, r3
 80066cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80066ce:	1b1a      	subs	r2, r3, r4
 80066d0:	d004      	beq.n	80066dc <_dtoa_r+0x78c>
 80066d2:	4649      	mov	r1, r9
 80066d4:	4658      	mov	r0, fp
 80066d6:	f000 fcb3 	bl	8007040 <__pow5mult>
 80066da:	4681      	mov	r9, r0
 80066dc:	2101      	movs	r1, #1
 80066de:	4658      	mov	r0, fp
 80066e0:	f000 fbee 	bl	8006ec0 <__i2b>
 80066e4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80066e6:	4604      	mov	r4, r0
 80066e8:	2b00      	cmp	r3, #0
 80066ea:	f000 81cf 	beq.w	8006a8c <_dtoa_r+0xb3c>
 80066ee:	461a      	mov	r2, r3
 80066f0:	4601      	mov	r1, r0
 80066f2:	4658      	mov	r0, fp
 80066f4:	f000 fca4 	bl	8007040 <__pow5mult>
 80066f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80066fa:	2b01      	cmp	r3, #1
 80066fc:	4604      	mov	r4, r0
 80066fe:	f300 8095 	bgt.w	800682c <_dtoa_r+0x8dc>
 8006702:	9b02      	ldr	r3, [sp, #8]
 8006704:	2b00      	cmp	r3, #0
 8006706:	f040 8087 	bne.w	8006818 <_dtoa_r+0x8c8>
 800670a:	9b03      	ldr	r3, [sp, #12]
 800670c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006710:	2b00      	cmp	r3, #0
 8006712:	f040 8089 	bne.w	8006828 <_dtoa_r+0x8d8>
 8006716:	9b03      	ldr	r3, [sp, #12]
 8006718:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800671c:	0d1b      	lsrs	r3, r3, #20
 800671e:	051b      	lsls	r3, r3, #20
 8006720:	b12b      	cbz	r3, 800672e <_dtoa_r+0x7de>
 8006722:	9b08      	ldr	r3, [sp, #32]
 8006724:	3301      	adds	r3, #1
 8006726:	9308      	str	r3, [sp, #32]
 8006728:	f108 0801 	add.w	r8, r8, #1
 800672c:	2301      	movs	r3, #1
 800672e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006730:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006732:	2b00      	cmp	r3, #0
 8006734:	f000 81b0 	beq.w	8006a98 <_dtoa_r+0xb48>
 8006738:	6923      	ldr	r3, [r4, #16]
 800673a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800673e:	6918      	ldr	r0, [r3, #16]
 8006740:	f000 fb72 	bl	8006e28 <__hi0bits>
 8006744:	f1c0 0020 	rsb	r0, r0, #32
 8006748:	9b08      	ldr	r3, [sp, #32]
 800674a:	4418      	add	r0, r3
 800674c:	f010 001f 	ands.w	r0, r0, #31
 8006750:	d077      	beq.n	8006842 <_dtoa_r+0x8f2>
 8006752:	f1c0 0320 	rsb	r3, r0, #32
 8006756:	2b04      	cmp	r3, #4
 8006758:	dd6b      	ble.n	8006832 <_dtoa_r+0x8e2>
 800675a:	9b08      	ldr	r3, [sp, #32]
 800675c:	f1c0 001c 	rsb	r0, r0, #28
 8006760:	4403      	add	r3, r0
 8006762:	4480      	add	r8, r0
 8006764:	4406      	add	r6, r0
 8006766:	9308      	str	r3, [sp, #32]
 8006768:	f1b8 0f00 	cmp.w	r8, #0
 800676c:	dd05      	ble.n	800677a <_dtoa_r+0x82a>
 800676e:	4649      	mov	r1, r9
 8006770:	4642      	mov	r2, r8
 8006772:	4658      	mov	r0, fp
 8006774:	f000 fcbe 	bl	80070f4 <__lshift>
 8006778:	4681      	mov	r9, r0
 800677a:	9b08      	ldr	r3, [sp, #32]
 800677c:	2b00      	cmp	r3, #0
 800677e:	dd05      	ble.n	800678c <_dtoa_r+0x83c>
 8006780:	4621      	mov	r1, r4
 8006782:	461a      	mov	r2, r3
 8006784:	4658      	mov	r0, fp
 8006786:	f000 fcb5 	bl	80070f4 <__lshift>
 800678a:	4604      	mov	r4, r0
 800678c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800678e:	2b00      	cmp	r3, #0
 8006790:	d059      	beq.n	8006846 <_dtoa_r+0x8f6>
 8006792:	4621      	mov	r1, r4
 8006794:	4648      	mov	r0, r9
 8006796:	f000 fd19 	bl	80071cc <__mcmp>
 800679a:	2800      	cmp	r0, #0
 800679c:	da53      	bge.n	8006846 <_dtoa_r+0x8f6>
 800679e:	1e7b      	subs	r3, r7, #1
 80067a0:	9304      	str	r3, [sp, #16]
 80067a2:	4649      	mov	r1, r9
 80067a4:	2300      	movs	r3, #0
 80067a6:	220a      	movs	r2, #10
 80067a8:	4658      	mov	r0, fp
 80067aa:	f000 faf7 	bl	8006d9c <__multadd>
 80067ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80067b0:	4681      	mov	r9, r0
 80067b2:	2b00      	cmp	r3, #0
 80067b4:	f000 8172 	beq.w	8006a9c <_dtoa_r+0xb4c>
 80067b8:	2300      	movs	r3, #0
 80067ba:	4629      	mov	r1, r5
 80067bc:	220a      	movs	r2, #10
 80067be:	4658      	mov	r0, fp
 80067c0:	f000 faec 	bl	8006d9c <__multadd>
 80067c4:	9b00      	ldr	r3, [sp, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	4605      	mov	r5, r0
 80067ca:	dc67      	bgt.n	800689c <_dtoa_r+0x94c>
 80067cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067ce:	2b02      	cmp	r3, #2
 80067d0:	dc41      	bgt.n	8006856 <_dtoa_r+0x906>
 80067d2:	e063      	b.n	800689c <_dtoa_r+0x94c>
 80067d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80067d6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80067da:	e746      	b.n	800666a <_dtoa_r+0x71a>
 80067dc:	9b07      	ldr	r3, [sp, #28]
 80067de:	1e5c      	subs	r4, r3, #1
 80067e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80067e2:	42a3      	cmp	r3, r4
 80067e4:	bfbf      	itttt	lt
 80067e6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80067e8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80067ea:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80067ec:	1ae3      	sublt	r3, r4, r3
 80067ee:	bfb4      	ite	lt
 80067f0:	18d2      	addlt	r2, r2, r3
 80067f2:	1b1c      	subge	r4, r3, r4
 80067f4:	9b07      	ldr	r3, [sp, #28]
 80067f6:	bfbc      	itt	lt
 80067f8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80067fa:	2400      	movlt	r4, #0
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	bfb5      	itete	lt
 8006800:	eba8 0603 	sublt.w	r6, r8, r3
 8006804:	9b07      	ldrge	r3, [sp, #28]
 8006806:	2300      	movlt	r3, #0
 8006808:	4646      	movge	r6, r8
 800680a:	e730      	b.n	800666e <_dtoa_r+0x71e>
 800680c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800680e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006810:	4646      	mov	r6, r8
 8006812:	e735      	b.n	8006680 <_dtoa_r+0x730>
 8006814:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006816:	e75c      	b.n	80066d2 <_dtoa_r+0x782>
 8006818:	2300      	movs	r3, #0
 800681a:	e788      	b.n	800672e <_dtoa_r+0x7de>
 800681c:	3fe00000 	.word	0x3fe00000
 8006820:	40240000 	.word	0x40240000
 8006824:	40140000 	.word	0x40140000
 8006828:	9b02      	ldr	r3, [sp, #8]
 800682a:	e780      	b.n	800672e <_dtoa_r+0x7de>
 800682c:	2300      	movs	r3, #0
 800682e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006830:	e782      	b.n	8006738 <_dtoa_r+0x7e8>
 8006832:	d099      	beq.n	8006768 <_dtoa_r+0x818>
 8006834:	9a08      	ldr	r2, [sp, #32]
 8006836:	331c      	adds	r3, #28
 8006838:	441a      	add	r2, r3
 800683a:	4498      	add	r8, r3
 800683c:	441e      	add	r6, r3
 800683e:	9208      	str	r2, [sp, #32]
 8006840:	e792      	b.n	8006768 <_dtoa_r+0x818>
 8006842:	4603      	mov	r3, r0
 8006844:	e7f6      	b.n	8006834 <_dtoa_r+0x8e4>
 8006846:	9b07      	ldr	r3, [sp, #28]
 8006848:	9704      	str	r7, [sp, #16]
 800684a:	2b00      	cmp	r3, #0
 800684c:	dc20      	bgt.n	8006890 <_dtoa_r+0x940>
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006852:	2b02      	cmp	r3, #2
 8006854:	dd1e      	ble.n	8006894 <_dtoa_r+0x944>
 8006856:	9b00      	ldr	r3, [sp, #0]
 8006858:	2b00      	cmp	r3, #0
 800685a:	f47f aec0 	bne.w	80065de <_dtoa_r+0x68e>
 800685e:	4621      	mov	r1, r4
 8006860:	2205      	movs	r2, #5
 8006862:	4658      	mov	r0, fp
 8006864:	f000 fa9a 	bl	8006d9c <__multadd>
 8006868:	4601      	mov	r1, r0
 800686a:	4604      	mov	r4, r0
 800686c:	4648      	mov	r0, r9
 800686e:	f000 fcad 	bl	80071cc <__mcmp>
 8006872:	2800      	cmp	r0, #0
 8006874:	f77f aeb3 	ble.w	80065de <_dtoa_r+0x68e>
 8006878:	4656      	mov	r6, sl
 800687a:	2331      	movs	r3, #49	@ 0x31
 800687c:	f806 3b01 	strb.w	r3, [r6], #1
 8006880:	9b04      	ldr	r3, [sp, #16]
 8006882:	3301      	adds	r3, #1
 8006884:	9304      	str	r3, [sp, #16]
 8006886:	e6ae      	b.n	80065e6 <_dtoa_r+0x696>
 8006888:	9c07      	ldr	r4, [sp, #28]
 800688a:	9704      	str	r7, [sp, #16]
 800688c:	4625      	mov	r5, r4
 800688e:	e7f3      	b.n	8006878 <_dtoa_r+0x928>
 8006890:	9b07      	ldr	r3, [sp, #28]
 8006892:	9300      	str	r3, [sp, #0]
 8006894:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006896:	2b00      	cmp	r3, #0
 8006898:	f000 8104 	beq.w	8006aa4 <_dtoa_r+0xb54>
 800689c:	2e00      	cmp	r6, #0
 800689e:	dd05      	ble.n	80068ac <_dtoa_r+0x95c>
 80068a0:	4629      	mov	r1, r5
 80068a2:	4632      	mov	r2, r6
 80068a4:	4658      	mov	r0, fp
 80068a6:	f000 fc25 	bl	80070f4 <__lshift>
 80068aa:	4605      	mov	r5, r0
 80068ac:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d05a      	beq.n	8006968 <_dtoa_r+0xa18>
 80068b2:	6869      	ldr	r1, [r5, #4]
 80068b4:	4658      	mov	r0, fp
 80068b6:	f000 fa0f 	bl	8006cd8 <_Balloc>
 80068ba:	4606      	mov	r6, r0
 80068bc:	b928      	cbnz	r0, 80068ca <_dtoa_r+0x97a>
 80068be:	4b84      	ldr	r3, [pc, #528]	@ (8006ad0 <_dtoa_r+0xb80>)
 80068c0:	4602      	mov	r2, r0
 80068c2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80068c6:	f7ff bb5a 	b.w	8005f7e <_dtoa_r+0x2e>
 80068ca:	692a      	ldr	r2, [r5, #16]
 80068cc:	3202      	adds	r2, #2
 80068ce:	0092      	lsls	r2, r2, #2
 80068d0:	f105 010c 	add.w	r1, r5, #12
 80068d4:	300c      	adds	r0, #12
 80068d6:	f001 f813 	bl	8007900 <memcpy>
 80068da:	2201      	movs	r2, #1
 80068dc:	4631      	mov	r1, r6
 80068de:	4658      	mov	r0, fp
 80068e0:	f000 fc08 	bl	80070f4 <__lshift>
 80068e4:	f10a 0301 	add.w	r3, sl, #1
 80068e8:	9307      	str	r3, [sp, #28]
 80068ea:	9b00      	ldr	r3, [sp, #0]
 80068ec:	4453      	add	r3, sl
 80068ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068f0:	9b02      	ldr	r3, [sp, #8]
 80068f2:	f003 0301 	and.w	r3, r3, #1
 80068f6:	462f      	mov	r7, r5
 80068f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80068fa:	4605      	mov	r5, r0
 80068fc:	9b07      	ldr	r3, [sp, #28]
 80068fe:	4621      	mov	r1, r4
 8006900:	3b01      	subs	r3, #1
 8006902:	4648      	mov	r0, r9
 8006904:	9300      	str	r3, [sp, #0]
 8006906:	f7ff fa9a 	bl	8005e3e <quorem>
 800690a:	4639      	mov	r1, r7
 800690c:	9002      	str	r0, [sp, #8]
 800690e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006912:	4648      	mov	r0, r9
 8006914:	f000 fc5a 	bl	80071cc <__mcmp>
 8006918:	462a      	mov	r2, r5
 800691a:	9008      	str	r0, [sp, #32]
 800691c:	4621      	mov	r1, r4
 800691e:	4658      	mov	r0, fp
 8006920:	f000 fc70 	bl	8007204 <__mdiff>
 8006924:	68c2      	ldr	r2, [r0, #12]
 8006926:	4606      	mov	r6, r0
 8006928:	bb02      	cbnz	r2, 800696c <_dtoa_r+0xa1c>
 800692a:	4601      	mov	r1, r0
 800692c:	4648      	mov	r0, r9
 800692e:	f000 fc4d 	bl	80071cc <__mcmp>
 8006932:	4602      	mov	r2, r0
 8006934:	4631      	mov	r1, r6
 8006936:	4658      	mov	r0, fp
 8006938:	920e      	str	r2, [sp, #56]	@ 0x38
 800693a:	f000 fa0d 	bl	8006d58 <_Bfree>
 800693e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006940:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006942:	9e07      	ldr	r6, [sp, #28]
 8006944:	ea43 0102 	orr.w	r1, r3, r2
 8006948:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800694a:	4319      	orrs	r1, r3
 800694c:	d110      	bne.n	8006970 <_dtoa_r+0xa20>
 800694e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006952:	d029      	beq.n	80069a8 <_dtoa_r+0xa58>
 8006954:	9b08      	ldr	r3, [sp, #32]
 8006956:	2b00      	cmp	r3, #0
 8006958:	dd02      	ble.n	8006960 <_dtoa_r+0xa10>
 800695a:	9b02      	ldr	r3, [sp, #8]
 800695c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006960:	9b00      	ldr	r3, [sp, #0]
 8006962:	f883 8000 	strb.w	r8, [r3]
 8006966:	e63f      	b.n	80065e8 <_dtoa_r+0x698>
 8006968:	4628      	mov	r0, r5
 800696a:	e7bb      	b.n	80068e4 <_dtoa_r+0x994>
 800696c:	2201      	movs	r2, #1
 800696e:	e7e1      	b.n	8006934 <_dtoa_r+0x9e4>
 8006970:	9b08      	ldr	r3, [sp, #32]
 8006972:	2b00      	cmp	r3, #0
 8006974:	db04      	blt.n	8006980 <_dtoa_r+0xa30>
 8006976:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006978:	430b      	orrs	r3, r1
 800697a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800697c:	430b      	orrs	r3, r1
 800697e:	d120      	bne.n	80069c2 <_dtoa_r+0xa72>
 8006980:	2a00      	cmp	r2, #0
 8006982:	dded      	ble.n	8006960 <_dtoa_r+0xa10>
 8006984:	4649      	mov	r1, r9
 8006986:	2201      	movs	r2, #1
 8006988:	4658      	mov	r0, fp
 800698a:	f000 fbb3 	bl	80070f4 <__lshift>
 800698e:	4621      	mov	r1, r4
 8006990:	4681      	mov	r9, r0
 8006992:	f000 fc1b 	bl	80071cc <__mcmp>
 8006996:	2800      	cmp	r0, #0
 8006998:	dc03      	bgt.n	80069a2 <_dtoa_r+0xa52>
 800699a:	d1e1      	bne.n	8006960 <_dtoa_r+0xa10>
 800699c:	f018 0f01 	tst.w	r8, #1
 80069a0:	d0de      	beq.n	8006960 <_dtoa_r+0xa10>
 80069a2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069a6:	d1d8      	bne.n	800695a <_dtoa_r+0xa0a>
 80069a8:	9a00      	ldr	r2, [sp, #0]
 80069aa:	2339      	movs	r3, #57	@ 0x39
 80069ac:	7013      	strb	r3, [r2, #0]
 80069ae:	4633      	mov	r3, r6
 80069b0:	461e      	mov	r6, r3
 80069b2:	3b01      	subs	r3, #1
 80069b4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80069b8:	2a39      	cmp	r2, #57	@ 0x39
 80069ba:	d052      	beq.n	8006a62 <_dtoa_r+0xb12>
 80069bc:	3201      	adds	r2, #1
 80069be:	701a      	strb	r2, [r3, #0]
 80069c0:	e612      	b.n	80065e8 <_dtoa_r+0x698>
 80069c2:	2a00      	cmp	r2, #0
 80069c4:	dd07      	ble.n	80069d6 <_dtoa_r+0xa86>
 80069c6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80069ca:	d0ed      	beq.n	80069a8 <_dtoa_r+0xa58>
 80069cc:	9a00      	ldr	r2, [sp, #0]
 80069ce:	f108 0301 	add.w	r3, r8, #1
 80069d2:	7013      	strb	r3, [r2, #0]
 80069d4:	e608      	b.n	80065e8 <_dtoa_r+0x698>
 80069d6:	9b07      	ldr	r3, [sp, #28]
 80069d8:	9a07      	ldr	r2, [sp, #28]
 80069da:	f803 8c01 	strb.w	r8, [r3, #-1]
 80069de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80069e0:	4293      	cmp	r3, r2
 80069e2:	d028      	beq.n	8006a36 <_dtoa_r+0xae6>
 80069e4:	4649      	mov	r1, r9
 80069e6:	2300      	movs	r3, #0
 80069e8:	220a      	movs	r2, #10
 80069ea:	4658      	mov	r0, fp
 80069ec:	f000 f9d6 	bl	8006d9c <__multadd>
 80069f0:	42af      	cmp	r7, r5
 80069f2:	4681      	mov	r9, r0
 80069f4:	f04f 0300 	mov.w	r3, #0
 80069f8:	f04f 020a 	mov.w	r2, #10
 80069fc:	4639      	mov	r1, r7
 80069fe:	4658      	mov	r0, fp
 8006a00:	d107      	bne.n	8006a12 <_dtoa_r+0xac2>
 8006a02:	f000 f9cb 	bl	8006d9c <__multadd>
 8006a06:	4607      	mov	r7, r0
 8006a08:	4605      	mov	r5, r0
 8006a0a:	9b07      	ldr	r3, [sp, #28]
 8006a0c:	3301      	adds	r3, #1
 8006a0e:	9307      	str	r3, [sp, #28]
 8006a10:	e774      	b.n	80068fc <_dtoa_r+0x9ac>
 8006a12:	f000 f9c3 	bl	8006d9c <__multadd>
 8006a16:	4629      	mov	r1, r5
 8006a18:	4607      	mov	r7, r0
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	220a      	movs	r2, #10
 8006a1e:	4658      	mov	r0, fp
 8006a20:	f000 f9bc 	bl	8006d9c <__multadd>
 8006a24:	4605      	mov	r5, r0
 8006a26:	e7f0      	b.n	8006a0a <_dtoa_r+0xaba>
 8006a28:	9b00      	ldr	r3, [sp, #0]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	bfcc      	ite	gt
 8006a2e:	461e      	movgt	r6, r3
 8006a30:	2601      	movle	r6, #1
 8006a32:	4456      	add	r6, sl
 8006a34:	2700      	movs	r7, #0
 8006a36:	4649      	mov	r1, r9
 8006a38:	2201      	movs	r2, #1
 8006a3a:	4658      	mov	r0, fp
 8006a3c:	f000 fb5a 	bl	80070f4 <__lshift>
 8006a40:	4621      	mov	r1, r4
 8006a42:	4681      	mov	r9, r0
 8006a44:	f000 fbc2 	bl	80071cc <__mcmp>
 8006a48:	2800      	cmp	r0, #0
 8006a4a:	dcb0      	bgt.n	80069ae <_dtoa_r+0xa5e>
 8006a4c:	d102      	bne.n	8006a54 <_dtoa_r+0xb04>
 8006a4e:	f018 0f01 	tst.w	r8, #1
 8006a52:	d1ac      	bne.n	80069ae <_dtoa_r+0xa5e>
 8006a54:	4633      	mov	r3, r6
 8006a56:	461e      	mov	r6, r3
 8006a58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006a5c:	2a30      	cmp	r2, #48	@ 0x30
 8006a5e:	d0fa      	beq.n	8006a56 <_dtoa_r+0xb06>
 8006a60:	e5c2      	b.n	80065e8 <_dtoa_r+0x698>
 8006a62:	459a      	cmp	sl, r3
 8006a64:	d1a4      	bne.n	80069b0 <_dtoa_r+0xa60>
 8006a66:	9b04      	ldr	r3, [sp, #16]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	9304      	str	r3, [sp, #16]
 8006a6c:	2331      	movs	r3, #49	@ 0x31
 8006a6e:	f88a 3000 	strb.w	r3, [sl]
 8006a72:	e5b9      	b.n	80065e8 <_dtoa_r+0x698>
 8006a74:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006a76:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006ad4 <_dtoa_r+0xb84>
 8006a7a:	b11b      	cbz	r3, 8006a84 <_dtoa_r+0xb34>
 8006a7c:	f10a 0308 	add.w	r3, sl, #8
 8006a80:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006a82:	6013      	str	r3, [r2, #0]
 8006a84:	4650      	mov	r0, sl
 8006a86:	b019      	add	sp, #100	@ 0x64
 8006a88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006a8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a8e:	2b01      	cmp	r3, #1
 8006a90:	f77f ae37 	ble.w	8006702 <_dtoa_r+0x7b2>
 8006a94:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8006a98:	2001      	movs	r0, #1
 8006a9a:	e655      	b.n	8006748 <_dtoa_r+0x7f8>
 8006a9c:	9b00      	ldr	r3, [sp, #0]
 8006a9e:	2b00      	cmp	r3, #0
 8006aa0:	f77f aed6 	ble.w	8006850 <_dtoa_r+0x900>
 8006aa4:	4656      	mov	r6, sl
 8006aa6:	4621      	mov	r1, r4
 8006aa8:	4648      	mov	r0, r9
 8006aaa:	f7ff f9c8 	bl	8005e3e <quorem>
 8006aae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ab2:	f806 8b01 	strb.w	r8, [r6], #1
 8006ab6:	9b00      	ldr	r3, [sp, #0]
 8006ab8:	eba6 020a 	sub.w	r2, r6, sl
 8006abc:	4293      	cmp	r3, r2
 8006abe:	ddb3      	ble.n	8006a28 <_dtoa_r+0xad8>
 8006ac0:	4649      	mov	r1, r9
 8006ac2:	2300      	movs	r3, #0
 8006ac4:	220a      	movs	r2, #10
 8006ac6:	4658      	mov	r0, fp
 8006ac8:	f000 f968 	bl	8006d9c <__multadd>
 8006acc:	4681      	mov	r9, r0
 8006ace:	e7ea      	b.n	8006aa6 <_dtoa_r+0xb56>
 8006ad0:	08007ca0 	.word	0x08007ca0
 8006ad4:	08007c24 	.word	0x08007c24

08006ad8 <_free_r>:
 8006ad8:	b538      	push	{r3, r4, r5, lr}
 8006ada:	4605      	mov	r5, r0
 8006adc:	2900      	cmp	r1, #0
 8006ade:	d041      	beq.n	8006b64 <_free_r+0x8c>
 8006ae0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ae4:	1f0c      	subs	r4, r1, #4
 8006ae6:	2b00      	cmp	r3, #0
 8006ae8:	bfb8      	it	lt
 8006aea:	18e4      	addlt	r4, r4, r3
 8006aec:	f000 f8e8 	bl	8006cc0 <__malloc_lock>
 8006af0:	4a1d      	ldr	r2, [pc, #116]	@ (8006b68 <_free_r+0x90>)
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	b933      	cbnz	r3, 8006b04 <_free_r+0x2c>
 8006af6:	6063      	str	r3, [r4, #4]
 8006af8:	6014      	str	r4, [r2, #0]
 8006afa:	4628      	mov	r0, r5
 8006afc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006b00:	f000 b8e4 	b.w	8006ccc <__malloc_unlock>
 8006b04:	42a3      	cmp	r3, r4
 8006b06:	d908      	bls.n	8006b1a <_free_r+0x42>
 8006b08:	6820      	ldr	r0, [r4, #0]
 8006b0a:	1821      	adds	r1, r4, r0
 8006b0c:	428b      	cmp	r3, r1
 8006b0e:	bf01      	itttt	eq
 8006b10:	6819      	ldreq	r1, [r3, #0]
 8006b12:	685b      	ldreq	r3, [r3, #4]
 8006b14:	1809      	addeq	r1, r1, r0
 8006b16:	6021      	streq	r1, [r4, #0]
 8006b18:	e7ed      	b.n	8006af6 <_free_r+0x1e>
 8006b1a:	461a      	mov	r2, r3
 8006b1c:	685b      	ldr	r3, [r3, #4]
 8006b1e:	b10b      	cbz	r3, 8006b24 <_free_r+0x4c>
 8006b20:	42a3      	cmp	r3, r4
 8006b22:	d9fa      	bls.n	8006b1a <_free_r+0x42>
 8006b24:	6811      	ldr	r1, [r2, #0]
 8006b26:	1850      	adds	r0, r2, r1
 8006b28:	42a0      	cmp	r0, r4
 8006b2a:	d10b      	bne.n	8006b44 <_free_r+0x6c>
 8006b2c:	6820      	ldr	r0, [r4, #0]
 8006b2e:	4401      	add	r1, r0
 8006b30:	1850      	adds	r0, r2, r1
 8006b32:	4283      	cmp	r3, r0
 8006b34:	6011      	str	r1, [r2, #0]
 8006b36:	d1e0      	bne.n	8006afa <_free_r+0x22>
 8006b38:	6818      	ldr	r0, [r3, #0]
 8006b3a:	685b      	ldr	r3, [r3, #4]
 8006b3c:	6053      	str	r3, [r2, #4]
 8006b3e:	4408      	add	r0, r1
 8006b40:	6010      	str	r0, [r2, #0]
 8006b42:	e7da      	b.n	8006afa <_free_r+0x22>
 8006b44:	d902      	bls.n	8006b4c <_free_r+0x74>
 8006b46:	230c      	movs	r3, #12
 8006b48:	602b      	str	r3, [r5, #0]
 8006b4a:	e7d6      	b.n	8006afa <_free_r+0x22>
 8006b4c:	6820      	ldr	r0, [r4, #0]
 8006b4e:	1821      	adds	r1, r4, r0
 8006b50:	428b      	cmp	r3, r1
 8006b52:	bf04      	itt	eq
 8006b54:	6819      	ldreq	r1, [r3, #0]
 8006b56:	685b      	ldreq	r3, [r3, #4]
 8006b58:	6063      	str	r3, [r4, #4]
 8006b5a:	bf04      	itt	eq
 8006b5c:	1809      	addeq	r1, r1, r0
 8006b5e:	6021      	streq	r1, [r4, #0]
 8006b60:	6054      	str	r4, [r2, #4]
 8006b62:	e7ca      	b.n	8006afa <_free_r+0x22>
 8006b64:	bd38      	pop	{r3, r4, r5, pc}
 8006b66:	bf00      	nop
 8006b68:	20000420 	.word	0x20000420

08006b6c <malloc>:
 8006b6c:	4b02      	ldr	r3, [pc, #8]	@ (8006b78 <malloc+0xc>)
 8006b6e:	4601      	mov	r1, r0
 8006b70:	6818      	ldr	r0, [r3, #0]
 8006b72:	f000 b825 	b.w	8006bc0 <_malloc_r>
 8006b76:	bf00      	nop
 8006b78:	20000018 	.word	0x20000018

08006b7c <sbrk_aligned>:
 8006b7c:	b570      	push	{r4, r5, r6, lr}
 8006b7e:	4e0f      	ldr	r6, [pc, #60]	@ (8006bbc <sbrk_aligned+0x40>)
 8006b80:	460c      	mov	r4, r1
 8006b82:	6831      	ldr	r1, [r6, #0]
 8006b84:	4605      	mov	r5, r0
 8006b86:	b911      	cbnz	r1, 8006b8e <sbrk_aligned+0x12>
 8006b88:	f000 feaa 	bl	80078e0 <_sbrk_r>
 8006b8c:	6030      	str	r0, [r6, #0]
 8006b8e:	4621      	mov	r1, r4
 8006b90:	4628      	mov	r0, r5
 8006b92:	f000 fea5 	bl	80078e0 <_sbrk_r>
 8006b96:	1c43      	adds	r3, r0, #1
 8006b98:	d103      	bne.n	8006ba2 <sbrk_aligned+0x26>
 8006b9a:	f04f 34ff 	mov.w	r4, #4294967295
 8006b9e:	4620      	mov	r0, r4
 8006ba0:	bd70      	pop	{r4, r5, r6, pc}
 8006ba2:	1cc4      	adds	r4, r0, #3
 8006ba4:	f024 0403 	bic.w	r4, r4, #3
 8006ba8:	42a0      	cmp	r0, r4
 8006baa:	d0f8      	beq.n	8006b9e <sbrk_aligned+0x22>
 8006bac:	1a21      	subs	r1, r4, r0
 8006bae:	4628      	mov	r0, r5
 8006bb0:	f000 fe96 	bl	80078e0 <_sbrk_r>
 8006bb4:	3001      	adds	r0, #1
 8006bb6:	d1f2      	bne.n	8006b9e <sbrk_aligned+0x22>
 8006bb8:	e7ef      	b.n	8006b9a <sbrk_aligned+0x1e>
 8006bba:	bf00      	nop
 8006bbc:	2000041c 	.word	0x2000041c

08006bc0 <_malloc_r>:
 8006bc0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006bc4:	1ccd      	adds	r5, r1, #3
 8006bc6:	f025 0503 	bic.w	r5, r5, #3
 8006bca:	3508      	adds	r5, #8
 8006bcc:	2d0c      	cmp	r5, #12
 8006bce:	bf38      	it	cc
 8006bd0:	250c      	movcc	r5, #12
 8006bd2:	2d00      	cmp	r5, #0
 8006bd4:	4606      	mov	r6, r0
 8006bd6:	db01      	blt.n	8006bdc <_malloc_r+0x1c>
 8006bd8:	42a9      	cmp	r1, r5
 8006bda:	d904      	bls.n	8006be6 <_malloc_r+0x26>
 8006bdc:	230c      	movs	r3, #12
 8006bde:	6033      	str	r3, [r6, #0]
 8006be0:	2000      	movs	r0, #0
 8006be2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006be6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006cbc <_malloc_r+0xfc>
 8006bea:	f000 f869 	bl	8006cc0 <__malloc_lock>
 8006bee:	f8d8 3000 	ldr.w	r3, [r8]
 8006bf2:	461c      	mov	r4, r3
 8006bf4:	bb44      	cbnz	r4, 8006c48 <_malloc_r+0x88>
 8006bf6:	4629      	mov	r1, r5
 8006bf8:	4630      	mov	r0, r6
 8006bfa:	f7ff ffbf 	bl	8006b7c <sbrk_aligned>
 8006bfe:	1c43      	adds	r3, r0, #1
 8006c00:	4604      	mov	r4, r0
 8006c02:	d158      	bne.n	8006cb6 <_malloc_r+0xf6>
 8006c04:	f8d8 4000 	ldr.w	r4, [r8]
 8006c08:	4627      	mov	r7, r4
 8006c0a:	2f00      	cmp	r7, #0
 8006c0c:	d143      	bne.n	8006c96 <_malloc_r+0xd6>
 8006c0e:	2c00      	cmp	r4, #0
 8006c10:	d04b      	beq.n	8006caa <_malloc_r+0xea>
 8006c12:	6823      	ldr	r3, [r4, #0]
 8006c14:	4639      	mov	r1, r7
 8006c16:	4630      	mov	r0, r6
 8006c18:	eb04 0903 	add.w	r9, r4, r3
 8006c1c:	f000 fe60 	bl	80078e0 <_sbrk_r>
 8006c20:	4581      	cmp	r9, r0
 8006c22:	d142      	bne.n	8006caa <_malloc_r+0xea>
 8006c24:	6821      	ldr	r1, [r4, #0]
 8006c26:	1a6d      	subs	r5, r5, r1
 8006c28:	4629      	mov	r1, r5
 8006c2a:	4630      	mov	r0, r6
 8006c2c:	f7ff ffa6 	bl	8006b7c <sbrk_aligned>
 8006c30:	3001      	adds	r0, #1
 8006c32:	d03a      	beq.n	8006caa <_malloc_r+0xea>
 8006c34:	6823      	ldr	r3, [r4, #0]
 8006c36:	442b      	add	r3, r5
 8006c38:	6023      	str	r3, [r4, #0]
 8006c3a:	f8d8 3000 	ldr.w	r3, [r8]
 8006c3e:	685a      	ldr	r2, [r3, #4]
 8006c40:	bb62      	cbnz	r2, 8006c9c <_malloc_r+0xdc>
 8006c42:	f8c8 7000 	str.w	r7, [r8]
 8006c46:	e00f      	b.n	8006c68 <_malloc_r+0xa8>
 8006c48:	6822      	ldr	r2, [r4, #0]
 8006c4a:	1b52      	subs	r2, r2, r5
 8006c4c:	d420      	bmi.n	8006c90 <_malloc_r+0xd0>
 8006c4e:	2a0b      	cmp	r2, #11
 8006c50:	d917      	bls.n	8006c82 <_malloc_r+0xc2>
 8006c52:	1961      	adds	r1, r4, r5
 8006c54:	42a3      	cmp	r3, r4
 8006c56:	6025      	str	r5, [r4, #0]
 8006c58:	bf18      	it	ne
 8006c5a:	6059      	strne	r1, [r3, #4]
 8006c5c:	6863      	ldr	r3, [r4, #4]
 8006c5e:	bf08      	it	eq
 8006c60:	f8c8 1000 	streq.w	r1, [r8]
 8006c64:	5162      	str	r2, [r4, r5]
 8006c66:	604b      	str	r3, [r1, #4]
 8006c68:	4630      	mov	r0, r6
 8006c6a:	f000 f82f 	bl	8006ccc <__malloc_unlock>
 8006c6e:	f104 000b 	add.w	r0, r4, #11
 8006c72:	1d23      	adds	r3, r4, #4
 8006c74:	f020 0007 	bic.w	r0, r0, #7
 8006c78:	1ac2      	subs	r2, r0, r3
 8006c7a:	bf1c      	itt	ne
 8006c7c:	1a1b      	subne	r3, r3, r0
 8006c7e:	50a3      	strne	r3, [r4, r2]
 8006c80:	e7af      	b.n	8006be2 <_malloc_r+0x22>
 8006c82:	6862      	ldr	r2, [r4, #4]
 8006c84:	42a3      	cmp	r3, r4
 8006c86:	bf0c      	ite	eq
 8006c88:	f8c8 2000 	streq.w	r2, [r8]
 8006c8c:	605a      	strne	r2, [r3, #4]
 8006c8e:	e7eb      	b.n	8006c68 <_malloc_r+0xa8>
 8006c90:	4623      	mov	r3, r4
 8006c92:	6864      	ldr	r4, [r4, #4]
 8006c94:	e7ae      	b.n	8006bf4 <_malloc_r+0x34>
 8006c96:	463c      	mov	r4, r7
 8006c98:	687f      	ldr	r7, [r7, #4]
 8006c9a:	e7b6      	b.n	8006c0a <_malloc_r+0x4a>
 8006c9c:	461a      	mov	r2, r3
 8006c9e:	685b      	ldr	r3, [r3, #4]
 8006ca0:	42a3      	cmp	r3, r4
 8006ca2:	d1fb      	bne.n	8006c9c <_malloc_r+0xdc>
 8006ca4:	2300      	movs	r3, #0
 8006ca6:	6053      	str	r3, [r2, #4]
 8006ca8:	e7de      	b.n	8006c68 <_malloc_r+0xa8>
 8006caa:	230c      	movs	r3, #12
 8006cac:	6033      	str	r3, [r6, #0]
 8006cae:	4630      	mov	r0, r6
 8006cb0:	f000 f80c 	bl	8006ccc <__malloc_unlock>
 8006cb4:	e794      	b.n	8006be0 <_malloc_r+0x20>
 8006cb6:	6005      	str	r5, [r0, #0]
 8006cb8:	e7d6      	b.n	8006c68 <_malloc_r+0xa8>
 8006cba:	bf00      	nop
 8006cbc:	20000420 	.word	0x20000420

08006cc0 <__malloc_lock>:
 8006cc0:	4801      	ldr	r0, [pc, #4]	@ (8006cc8 <__malloc_lock+0x8>)
 8006cc2:	f7ff b8ba 	b.w	8005e3a <__retarget_lock_acquire_recursive>
 8006cc6:	bf00      	nop
 8006cc8:	20000418 	.word	0x20000418

08006ccc <__malloc_unlock>:
 8006ccc:	4801      	ldr	r0, [pc, #4]	@ (8006cd4 <__malloc_unlock+0x8>)
 8006cce:	f7ff b8b5 	b.w	8005e3c <__retarget_lock_release_recursive>
 8006cd2:	bf00      	nop
 8006cd4:	20000418 	.word	0x20000418

08006cd8 <_Balloc>:
 8006cd8:	b570      	push	{r4, r5, r6, lr}
 8006cda:	69c6      	ldr	r6, [r0, #28]
 8006cdc:	4604      	mov	r4, r0
 8006cde:	460d      	mov	r5, r1
 8006ce0:	b976      	cbnz	r6, 8006d00 <_Balloc+0x28>
 8006ce2:	2010      	movs	r0, #16
 8006ce4:	f7ff ff42 	bl	8006b6c <malloc>
 8006ce8:	4602      	mov	r2, r0
 8006cea:	61e0      	str	r0, [r4, #28]
 8006cec:	b920      	cbnz	r0, 8006cf8 <_Balloc+0x20>
 8006cee:	4b18      	ldr	r3, [pc, #96]	@ (8006d50 <_Balloc+0x78>)
 8006cf0:	4818      	ldr	r0, [pc, #96]	@ (8006d54 <_Balloc+0x7c>)
 8006cf2:	216b      	movs	r1, #107	@ 0x6b
 8006cf4:	f000 fe12 	bl	800791c <__assert_func>
 8006cf8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006cfc:	6006      	str	r6, [r0, #0]
 8006cfe:	60c6      	str	r6, [r0, #12]
 8006d00:	69e6      	ldr	r6, [r4, #28]
 8006d02:	68f3      	ldr	r3, [r6, #12]
 8006d04:	b183      	cbz	r3, 8006d28 <_Balloc+0x50>
 8006d06:	69e3      	ldr	r3, [r4, #28]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006d0e:	b9b8      	cbnz	r0, 8006d40 <_Balloc+0x68>
 8006d10:	2101      	movs	r1, #1
 8006d12:	fa01 f605 	lsl.w	r6, r1, r5
 8006d16:	1d72      	adds	r2, r6, #5
 8006d18:	0092      	lsls	r2, r2, #2
 8006d1a:	4620      	mov	r0, r4
 8006d1c:	f000 fe1c 	bl	8007958 <_calloc_r>
 8006d20:	b160      	cbz	r0, 8006d3c <_Balloc+0x64>
 8006d22:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006d26:	e00e      	b.n	8006d46 <_Balloc+0x6e>
 8006d28:	2221      	movs	r2, #33	@ 0x21
 8006d2a:	2104      	movs	r1, #4
 8006d2c:	4620      	mov	r0, r4
 8006d2e:	f000 fe13 	bl	8007958 <_calloc_r>
 8006d32:	69e3      	ldr	r3, [r4, #28]
 8006d34:	60f0      	str	r0, [r6, #12]
 8006d36:	68db      	ldr	r3, [r3, #12]
 8006d38:	2b00      	cmp	r3, #0
 8006d3a:	d1e4      	bne.n	8006d06 <_Balloc+0x2e>
 8006d3c:	2000      	movs	r0, #0
 8006d3e:	bd70      	pop	{r4, r5, r6, pc}
 8006d40:	6802      	ldr	r2, [r0, #0]
 8006d42:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006d46:	2300      	movs	r3, #0
 8006d48:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006d4c:	e7f7      	b.n	8006d3e <_Balloc+0x66>
 8006d4e:	bf00      	nop
 8006d50:	08007c31 	.word	0x08007c31
 8006d54:	08007cb1 	.word	0x08007cb1

08006d58 <_Bfree>:
 8006d58:	b570      	push	{r4, r5, r6, lr}
 8006d5a:	69c6      	ldr	r6, [r0, #28]
 8006d5c:	4605      	mov	r5, r0
 8006d5e:	460c      	mov	r4, r1
 8006d60:	b976      	cbnz	r6, 8006d80 <_Bfree+0x28>
 8006d62:	2010      	movs	r0, #16
 8006d64:	f7ff ff02 	bl	8006b6c <malloc>
 8006d68:	4602      	mov	r2, r0
 8006d6a:	61e8      	str	r0, [r5, #28]
 8006d6c:	b920      	cbnz	r0, 8006d78 <_Bfree+0x20>
 8006d6e:	4b09      	ldr	r3, [pc, #36]	@ (8006d94 <_Bfree+0x3c>)
 8006d70:	4809      	ldr	r0, [pc, #36]	@ (8006d98 <_Bfree+0x40>)
 8006d72:	218f      	movs	r1, #143	@ 0x8f
 8006d74:	f000 fdd2 	bl	800791c <__assert_func>
 8006d78:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006d7c:	6006      	str	r6, [r0, #0]
 8006d7e:	60c6      	str	r6, [r0, #12]
 8006d80:	b13c      	cbz	r4, 8006d92 <_Bfree+0x3a>
 8006d82:	69eb      	ldr	r3, [r5, #28]
 8006d84:	6862      	ldr	r2, [r4, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006d8c:	6021      	str	r1, [r4, #0]
 8006d8e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006d92:	bd70      	pop	{r4, r5, r6, pc}
 8006d94:	08007c31 	.word	0x08007c31
 8006d98:	08007cb1 	.word	0x08007cb1

08006d9c <__multadd>:
 8006d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006da0:	690d      	ldr	r5, [r1, #16]
 8006da2:	4607      	mov	r7, r0
 8006da4:	460c      	mov	r4, r1
 8006da6:	461e      	mov	r6, r3
 8006da8:	f101 0c14 	add.w	ip, r1, #20
 8006dac:	2000      	movs	r0, #0
 8006dae:	f8dc 3000 	ldr.w	r3, [ip]
 8006db2:	b299      	uxth	r1, r3
 8006db4:	fb02 6101 	mla	r1, r2, r1, r6
 8006db8:	0c1e      	lsrs	r6, r3, #16
 8006dba:	0c0b      	lsrs	r3, r1, #16
 8006dbc:	fb02 3306 	mla	r3, r2, r6, r3
 8006dc0:	b289      	uxth	r1, r1
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006dc8:	4285      	cmp	r5, r0
 8006dca:	f84c 1b04 	str.w	r1, [ip], #4
 8006dce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006dd2:	dcec      	bgt.n	8006dae <__multadd+0x12>
 8006dd4:	b30e      	cbz	r6, 8006e1a <__multadd+0x7e>
 8006dd6:	68a3      	ldr	r3, [r4, #8]
 8006dd8:	42ab      	cmp	r3, r5
 8006dda:	dc19      	bgt.n	8006e10 <__multadd+0x74>
 8006ddc:	6861      	ldr	r1, [r4, #4]
 8006dde:	4638      	mov	r0, r7
 8006de0:	3101      	adds	r1, #1
 8006de2:	f7ff ff79 	bl	8006cd8 <_Balloc>
 8006de6:	4680      	mov	r8, r0
 8006de8:	b928      	cbnz	r0, 8006df6 <__multadd+0x5a>
 8006dea:	4602      	mov	r2, r0
 8006dec:	4b0c      	ldr	r3, [pc, #48]	@ (8006e20 <__multadd+0x84>)
 8006dee:	480d      	ldr	r0, [pc, #52]	@ (8006e24 <__multadd+0x88>)
 8006df0:	21ba      	movs	r1, #186	@ 0xba
 8006df2:	f000 fd93 	bl	800791c <__assert_func>
 8006df6:	6922      	ldr	r2, [r4, #16]
 8006df8:	3202      	adds	r2, #2
 8006dfa:	f104 010c 	add.w	r1, r4, #12
 8006dfe:	0092      	lsls	r2, r2, #2
 8006e00:	300c      	adds	r0, #12
 8006e02:	f000 fd7d 	bl	8007900 <memcpy>
 8006e06:	4621      	mov	r1, r4
 8006e08:	4638      	mov	r0, r7
 8006e0a:	f7ff ffa5 	bl	8006d58 <_Bfree>
 8006e0e:	4644      	mov	r4, r8
 8006e10:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006e14:	3501      	adds	r5, #1
 8006e16:	615e      	str	r6, [r3, #20]
 8006e18:	6125      	str	r5, [r4, #16]
 8006e1a:	4620      	mov	r0, r4
 8006e1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006e20:	08007ca0 	.word	0x08007ca0
 8006e24:	08007cb1 	.word	0x08007cb1

08006e28 <__hi0bits>:
 8006e28:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	bf36      	itet	cc
 8006e30:	0403      	lslcc	r3, r0, #16
 8006e32:	2000      	movcs	r0, #0
 8006e34:	2010      	movcc	r0, #16
 8006e36:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006e3a:	bf3c      	itt	cc
 8006e3c:	021b      	lslcc	r3, r3, #8
 8006e3e:	3008      	addcc	r0, #8
 8006e40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8006e44:	bf3c      	itt	cc
 8006e46:	011b      	lslcc	r3, r3, #4
 8006e48:	3004      	addcc	r0, #4
 8006e4a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006e4e:	bf3c      	itt	cc
 8006e50:	009b      	lslcc	r3, r3, #2
 8006e52:	3002      	addcc	r0, #2
 8006e54:	2b00      	cmp	r3, #0
 8006e56:	db05      	blt.n	8006e64 <__hi0bits+0x3c>
 8006e58:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8006e5c:	f100 0001 	add.w	r0, r0, #1
 8006e60:	bf08      	it	eq
 8006e62:	2020      	moveq	r0, #32
 8006e64:	4770      	bx	lr

08006e66 <__lo0bits>:
 8006e66:	6803      	ldr	r3, [r0, #0]
 8006e68:	4602      	mov	r2, r0
 8006e6a:	f013 0007 	ands.w	r0, r3, #7
 8006e6e:	d00b      	beq.n	8006e88 <__lo0bits+0x22>
 8006e70:	07d9      	lsls	r1, r3, #31
 8006e72:	d421      	bmi.n	8006eb8 <__lo0bits+0x52>
 8006e74:	0798      	lsls	r0, r3, #30
 8006e76:	bf49      	itett	mi
 8006e78:	085b      	lsrmi	r3, r3, #1
 8006e7a:	089b      	lsrpl	r3, r3, #2
 8006e7c:	2001      	movmi	r0, #1
 8006e7e:	6013      	strmi	r3, [r2, #0]
 8006e80:	bf5c      	itt	pl
 8006e82:	6013      	strpl	r3, [r2, #0]
 8006e84:	2002      	movpl	r0, #2
 8006e86:	4770      	bx	lr
 8006e88:	b299      	uxth	r1, r3
 8006e8a:	b909      	cbnz	r1, 8006e90 <__lo0bits+0x2a>
 8006e8c:	0c1b      	lsrs	r3, r3, #16
 8006e8e:	2010      	movs	r0, #16
 8006e90:	b2d9      	uxtb	r1, r3
 8006e92:	b909      	cbnz	r1, 8006e98 <__lo0bits+0x32>
 8006e94:	3008      	adds	r0, #8
 8006e96:	0a1b      	lsrs	r3, r3, #8
 8006e98:	0719      	lsls	r1, r3, #28
 8006e9a:	bf04      	itt	eq
 8006e9c:	091b      	lsreq	r3, r3, #4
 8006e9e:	3004      	addeq	r0, #4
 8006ea0:	0799      	lsls	r1, r3, #30
 8006ea2:	bf04      	itt	eq
 8006ea4:	089b      	lsreq	r3, r3, #2
 8006ea6:	3002      	addeq	r0, #2
 8006ea8:	07d9      	lsls	r1, r3, #31
 8006eaa:	d403      	bmi.n	8006eb4 <__lo0bits+0x4e>
 8006eac:	085b      	lsrs	r3, r3, #1
 8006eae:	f100 0001 	add.w	r0, r0, #1
 8006eb2:	d003      	beq.n	8006ebc <__lo0bits+0x56>
 8006eb4:	6013      	str	r3, [r2, #0]
 8006eb6:	4770      	bx	lr
 8006eb8:	2000      	movs	r0, #0
 8006eba:	4770      	bx	lr
 8006ebc:	2020      	movs	r0, #32
 8006ebe:	4770      	bx	lr

08006ec0 <__i2b>:
 8006ec0:	b510      	push	{r4, lr}
 8006ec2:	460c      	mov	r4, r1
 8006ec4:	2101      	movs	r1, #1
 8006ec6:	f7ff ff07 	bl	8006cd8 <_Balloc>
 8006eca:	4602      	mov	r2, r0
 8006ecc:	b928      	cbnz	r0, 8006eda <__i2b+0x1a>
 8006ece:	4b05      	ldr	r3, [pc, #20]	@ (8006ee4 <__i2b+0x24>)
 8006ed0:	4805      	ldr	r0, [pc, #20]	@ (8006ee8 <__i2b+0x28>)
 8006ed2:	f240 1145 	movw	r1, #325	@ 0x145
 8006ed6:	f000 fd21 	bl	800791c <__assert_func>
 8006eda:	2301      	movs	r3, #1
 8006edc:	6144      	str	r4, [r0, #20]
 8006ede:	6103      	str	r3, [r0, #16]
 8006ee0:	bd10      	pop	{r4, pc}
 8006ee2:	bf00      	nop
 8006ee4:	08007ca0 	.word	0x08007ca0
 8006ee8:	08007cb1 	.word	0x08007cb1

08006eec <__multiply>:
 8006eec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ef0:	4614      	mov	r4, r2
 8006ef2:	690a      	ldr	r2, [r1, #16]
 8006ef4:	6923      	ldr	r3, [r4, #16]
 8006ef6:	429a      	cmp	r2, r3
 8006ef8:	bfa8      	it	ge
 8006efa:	4623      	movge	r3, r4
 8006efc:	460f      	mov	r7, r1
 8006efe:	bfa4      	itt	ge
 8006f00:	460c      	movge	r4, r1
 8006f02:	461f      	movge	r7, r3
 8006f04:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8006f08:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8006f0c:	68a3      	ldr	r3, [r4, #8]
 8006f0e:	6861      	ldr	r1, [r4, #4]
 8006f10:	eb0a 0609 	add.w	r6, sl, r9
 8006f14:	42b3      	cmp	r3, r6
 8006f16:	b085      	sub	sp, #20
 8006f18:	bfb8      	it	lt
 8006f1a:	3101      	addlt	r1, #1
 8006f1c:	f7ff fedc 	bl	8006cd8 <_Balloc>
 8006f20:	b930      	cbnz	r0, 8006f30 <__multiply+0x44>
 8006f22:	4602      	mov	r2, r0
 8006f24:	4b44      	ldr	r3, [pc, #272]	@ (8007038 <__multiply+0x14c>)
 8006f26:	4845      	ldr	r0, [pc, #276]	@ (800703c <__multiply+0x150>)
 8006f28:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8006f2c:	f000 fcf6 	bl	800791c <__assert_func>
 8006f30:	f100 0514 	add.w	r5, r0, #20
 8006f34:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006f38:	462b      	mov	r3, r5
 8006f3a:	2200      	movs	r2, #0
 8006f3c:	4543      	cmp	r3, r8
 8006f3e:	d321      	bcc.n	8006f84 <__multiply+0x98>
 8006f40:	f107 0114 	add.w	r1, r7, #20
 8006f44:	f104 0214 	add.w	r2, r4, #20
 8006f48:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8006f4c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8006f50:	9302      	str	r3, [sp, #8]
 8006f52:	1b13      	subs	r3, r2, r4
 8006f54:	3b15      	subs	r3, #21
 8006f56:	f023 0303 	bic.w	r3, r3, #3
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	f104 0715 	add.w	r7, r4, #21
 8006f60:	42ba      	cmp	r2, r7
 8006f62:	bf38      	it	cc
 8006f64:	2304      	movcc	r3, #4
 8006f66:	9301      	str	r3, [sp, #4]
 8006f68:	9b02      	ldr	r3, [sp, #8]
 8006f6a:	9103      	str	r1, [sp, #12]
 8006f6c:	428b      	cmp	r3, r1
 8006f6e:	d80c      	bhi.n	8006f8a <__multiply+0x9e>
 8006f70:	2e00      	cmp	r6, #0
 8006f72:	dd03      	ble.n	8006f7c <__multiply+0x90>
 8006f74:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d05b      	beq.n	8007034 <__multiply+0x148>
 8006f7c:	6106      	str	r6, [r0, #16]
 8006f7e:	b005      	add	sp, #20
 8006f80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f84:	f843 2b04 	str.w	r2, [r3], #4
 8006f88:	e7d8      	b.n	8006f3c <__multiply+0x50>
 8006f8a:	f8b1 a000 	ldrh.w	sl, [r1]
 8006f8e:	f1ba 0f00 	cmp.w	sl, #0
 8006f92:	d024      	beq.n	8006fde <__multiply+0xf2>
 8006f94:	f104 0e14 	add.w	lr, r4, #20
 8006f98:	46a9      	mov	r9, r5
 8006f9a:	f04f 0c00 	mov.w	ip, #0
 8006f9e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8006fa2:	f8d9 3000 	ldr.w	r3, [r9]
 8006fa6:	fa1f fb87 	uxth.w	fp, r7
 8006faa:	b29b      	uxth	r3, r3
 8006fac:	fb0a 330b 	mla	r3, sl, fp, r3
 8006fb0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8006fb4:	f8d9 7000 	ldr.w	r7, [r9]
 8006fb8:	4463      	add	r3, ip
 8006fba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006fbe:	fb0a c70b 	mla	r7, sl, fp, ip
 8006fc2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8006fc6:	b29b      	uxth	r3, r3
 8006fc8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8006fcc:	4572      	cmp	r2, lr
 8006fce:	f849 3b04 	str.w	r3, [r9], #4
 8006fd2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8006fd6:	d8e2      	bhi.n	8006f9e <__multiply+0xb2>
 8006fd8:	9b01      	ldr	r3, [sp, #4]
 8006fda:	f845 c003 	str.w	ip, [r5, r3]
 8006fde:	9b03      	ldr	r3, [sp, #12]
 8006fe0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 8006fe4:	3104      	adds	r1, #4
 8006fe6:	f1b9 0f00 	cmp.w	r9, #0
 8006fea:	d021      	beq.n	8007030 <__multiply+0x144>
 8006fec:	682b      	ldr	r3, [r5, #0]
 8006fee:	f104 0c14 	add.w	ip, r4, #20
 8006ff2:	46ae      	mov	lr, r5
 8006ff4:	f04f 0a00 	mov.w	sl, #0
 8006ff8:	f8bc b000 	ldrh.w	fp, [ip]
 8006ffc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 8007000:	fb09 770b 	mla	r7, r9, fp, r7
 8007004:	4457      	add	r7, sl
 8007006:	b29b      	uxth	r3, r3
 8007008:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800700c:	f84e 3b04 	str.w	r3, [lr], #4
 8007010:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007014:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007018:	f8be 3000 	ldrh.w	r3, [lr]
 800701c:	fb09 330a 	mla	r3, r9, sl, r3
 8007020:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007024:	4562      	cmp	r2, ip
 8007026:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800702a:	d8e5      	bhi.n	8006ff8 <__multiply+0x10c>
 800702c:	9f01      	ldr	r7, [sp, #4]
 800702e:	51eb      	str	r3, [r5, r7]
 8007030:	3504      	adds	r5, #4
 8007032:	e799      	b.n	8006f68 <__multiply+0x7c>
 8007034:	3e01      	subs	r6, #1
 8007036:	e79b      	b.n	8006f70 <__multiply+0x84>
 8007038:	08007ca0 	.word	0x08007ca0
 800703c:	08007cb1 	.word	0x08007cb1

08007040 <__pow5mult>:
 8007040:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007044:	4615      	mov	r5, r2
 8007046:	f012 0203 	ands.w	r2, r2, #3
 800704a:	4607      	mov	r7, r0
 800704c:	460e      	mov	r6, r1
 800704e:	d007      	beq.n	8007060 <__pow5mult+0x20>
 8007050:	4c25      	ldr	r4, [pc, #148]	@ (80070e8 <__pow5mult+0xa8>)
 8007052:	3a01      	subs	r2, #1
 8007054:	2300      	movs	r3, #0
 8007056:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800705a:	f7ff fe9f 	bl	8006d9c <__multadd>
 800705e:	4606      	mov	r6, r0
 8007060:	10ad      	asrs	r5, r5, #2
 8007062:	d03d      	beq.n	80070e0 <__pow5mult+0xa0>
 8007064:	69fc      	ldr	r4, [r7, #28]
 8007066:	b97c      	cbnz	r4, 8007088 <__pow5mult+0x48>
 8007068:	2010      	movs	r0, #16
 800706a:	f7ff fd7f 	bl	8006b6c <malloc>
 800706e:	4602      	mov	r2, r0
 8007070:	61f8      	str	r0, [r7, #28]
 8007072:	b928      	cbnz	r0, 8007080 <__pow5mult+0x40>
 8007074:	4b1d      	ldr	r3, [pc, #116]	@ (80070ec <__pow5mult+0xac>)
 8007076:	481e      	ldr	r0, [pc, #120]	@ (80070f0 <__pow5mult+0xb0>)
 8007078:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800707c:	f000 fc4e 	bl	800791c <__assert_func>
 8007080:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007084:	6004      	str	r4, [r0, #0]
 8007086:	60c4      	str	r4, [r0, #12]
 8007088:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800708c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007090:	b94c      	cbnz	r4, 80070a6 <__pow5mult+0x66>
 8007092:	f240 2171 	movw	r1, #625	@ 0x271
 8007096:	4638      	mov	r0, r7
 8007098:	f7ff ff12 	bl	8006ec0 <__i2b>
 800709c:	2300      	movs	r3, #0
 800709e:	f8c8 0008 	str.w	r0, [r8, #8]
 80070a2:	4604      	mov	r4, r0
 80070a4:	6003      	str	r3, [r0, #0]
 80070a6:	f04f 0900 	mov.w	r9, #0
 80070aa:	07eb      	lsls	r3, r5, #31
 80070ac:	d50a      	bpl.n	80070c4 <__pow5mult+0x84>
 80070ae:	4631      	mov	r1, r6
 80070b0:	4622      	mov	r2, r4
 80070b2:	4638      	mov	r0, r7
 80070b4:	f7ff ff1a 	bl	8006eec <__multiply>
 80070b8:	4631      	mov	r1, r6
 80070ba:	4680      	mov	r8, r0
 80070bc:	4638      	mov	r0, r7
 80070be:	f7ff fe4b 	bl	8006d58 <_Bfree>
 80070c2:	4646      	mov	r6, r8
 80070c4:	106d      	asrs	r5, r5, #1
 80070c6:	d00b      	beq.n	80070e0 <__pow5mult+0xa0>
 80070c8:	6820      	ldr	r0, [r4, #0]
 80070ca:	b938      	cbnz	r0, 80070dc <__pow5mult+0x9c>
 80070cc:	4622      	mov	r2, r4
 80070ce:	4621      	mov	r1, r4
 80070d0:	4638      	mov	r0, r7
 80070d2:	f7ff ff0b 	bl	8006eec <__multiply>
 80070d6:	6020      	str	r0, [r4, #0]
 80070d8:	f8c0 9000 	str.w	r9, [r0]
 80070dc:	4604      	mov	r4, r0
 80070de:	e7e4      	b.n	80070aa <__pow5mult+0x6a>
 80070e0:	4630      	mov	r0, r6
 80070e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070e6:	bf00      	nop
 80070e8:	08007d0c 	.word	0x08007d0c
 80070ec:	08007c31 	.word	0x08007c31
 80070f0:	08007cb1 	.word	0x08007cb1

080070f4 <__lshift>:
 80070f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80070f8:	460c      	mov	r4, r1
 80070fa:	6849      	ldr	r1, [r1, #4]
 80070fc:	6923      	ldr	r3, [r4, #16]
 80070fe:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8007102:	68a3      	ldr	r3, [r4, #8]
 8007104:	4607      	mov	r7, r0
 8007106:	4691      	mov	r9, r2
 8007108:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800710c:	f108 0601 	add.w	r6, r8, #1
 8007110:	42b3      	cmp	r3, r6
 8007112:	db0b      	blt.n	800712c <__lshift+0x38>
 8007114:	4638      	mov	r0, r7
 8007116:	f7ff fddf 	bl	8006cd8 <_Balloc>
 800711a:	4605      	mov	r5, r0
 800711c:	b948      	cbnz	r0, 8007132 <__lshift+0x3e>
 800711e:	4602      	mov	r2, r0
 8007120:	4b28      	ldr	r3, [pc, #160]	@ (80071c4 <__lshift+0xd0>)
 8007122:	4829      	ldr	r0, [pc, #164]	@ (80071c8 <__lshift+0xd4>)
 8007124:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007128:	f000 fbf8 	bl	800791c <__assert_func>
 800712c:	3101      	adds	r1, #1
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	e7ee      	b.n	8007110 <__lshift+0x1c>
 8007132:	2300      	movs	r3, #0
 8007134:	f100 0114 	add.w	r1, r0, #20
 8007138:	f100 0210 	add.w	r2, r0, #16
 800713c:	4618      	mov	r0, r3
 800713e:	4553      	cmp	r3, sl
 8007140:	db33      	blt.n	80071aa <__lshift+0xb6>
 8007142:	6920      	ldr	r0, [r4, #16]
 8007144:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007148:	f104 0314 	add.w	r3, r4, #20
 800714c:	f019 091f 	ands.w	r9, r9, #31
 8007150:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007154:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007158:	d02b      	beq.n	80071b2 <__lshift+0xbe>
 800715a:	f1c9 0e20 	rsb	lr, r9, #32
 800715e:	468a      	mov	sl, r1
 8007160:	2200      	movs	r2, #0
 8007162:	6818      	ldr	r0, [r3, #0]
 8007164:	fa00 f009 	lsl.w	r0, r0, r9
 8007168:	4310      	orrs	r0, r2
 800716a:	f84a 0b04 	str.w	r0, [sl], #4
 800716e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007172:	459c      	cmp	ip, r3
 8007174:	fa22 f20e 	lsr.w	r2, r2, lr
 8007178:	d8f3      	bhi.n	8007162 <__lshift+0x6e>
 800717a:	ebac 0304 	sub.w	r3, ip, r4
 800717e:	3b15      	subs	r3, #21
 8007180:	f023 0303 	bic.w	r3, r3, #3
 8007184:	3304      	adds	r3, #4
 8007186:	f104 0015 	add.w	r0, r4, #21
 800718a:	4584      	cmp	ip, r0
 800718c:	bf38      	it	cc
 800718e:	2304      	movcc	r3, #4
 8007190:	50ca      	str	r2, [r1, r3]
 8007192:	b10a      	cbz	r2, 8007198 <__lshift+0xa4>
 8007194:	f108 0602 	add.w	r6, r8, #2
 8007198:	3e01      	subs	r6, #1
 800719a:	4638      	mov	r0, r7
 800719c:	612e      	str	r6, [r5, #16]
 800719e:	4621      	mov	r1, r4
 80071a0:	f7ff fdda 	bl	8006d58 <_Bfree>
 80071a4:	4628      	mov	r0, r5
 80071a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80071aa:	f842 0f04 	str.w	r0, [r2, #4]!
 80071ae:	3301      	adds	r3, #1
 80071b0:	e7c5      	b.n	800713e <__lshift+0x4a>
 80071b2:	3904      	subs	r1, #4
 80071b4:	f853 2b04 	ldr.w	r2, [r3], #4
 80071b8:	f841 2f04 	str.w	r2, [r1, #4]!
 80071bc:	459c      	cmp	ip, r3
 80071be:	d8f9      	bhi.n	80071b4 <__lshift+0xc0>
 80071c0:	e7ea      	b.n	8007198 <__lshift+0xa4>
 80071c2:	bf00      	nop
 80071c4:	08007ca0 	.word	0x08007ca0
 80071c8:	08007cb1 	.word	0x08007cb1

080071cc <__mcmp>:
 80071cc:	690a      	ldr	r2, [r1, #16]
 80071ce:	4603      	mov	r3, r0
 80071d0:	6900      	ldr	r0, [r0, #16]
 80071d2:	1a80      	subs	r0, r0, r2
 80071d4:	b530      	push	{r4, r5, lr}
 80071d6:	d10e      	bne.n	80071f6 <__mcmp+0x2a>
 80071d8:	3314      	adds	r3, #20
 80071da:	3114      	adds	r1, #20
 80071dc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80071e0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80071e4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80071e8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80071ec:	4295      	cmp	r5, r2
 80071ee:	d003      	beq.n	80071f8 <__mcmp+0x2c>
 80071f0:	d205      	bcs.n	80071fe <__mcmp+0x32>
 80071f2:	f04f 30ff 	mov.w	r0, #4294967295
 80071f6:	bd30      	pop	{r4, r5, pc}
 80071f8:	42a3      	cmp	r3, r4
 80071fa:	d3f3      	bcc.n	80071e4 <__mcmp+0x18>
 80071fc:	e7fb      	b.n	80071f6 <__mcmp+0x2a>
 80071fe:	2001      	movs	r0, #1
 8007200:	e7f9      	b.n	80071f6 <__mcmp+0x2a>
	...

08007204 <__mdiff>:
 8007204:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007208:	4689      	mov	r9, r1
 800720a:	4606      	mov	r6, r0
 800720c:	4611      	mov	r1, r2
 800720e:	4648      	mov	r0, r9
 8007210:	4614      	mov	r4, r2
 8007212:	f7ff ffdb 	bl	80071cc <__mcmp>
 8007216:	1e05      	subs	r5, r0, #0
 8007218:	d112      	bne.n	8007240 <__mdiff+0x3c>
 800721a:	4629      	mov	r1, r5
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff fd5b 	bl	8006cd8 <_Balloc>
 8007222:	4602      	mov	r2, r0
 8007224:	b928      	cbnz	r0, 8007232 <__mdiff+0x2e>
 8007226:	4b3f      	ldr	r3, [pc, #252]	@ (8007324 <__mdiff+0x120>)
 8007228:	f240 2137 	movw	r1, #567	@ 0x237
 800722c:	483e      	ldr	r0, [pc, #248]	@ (8007328 <__mdiff+0x124>)
 800722e:	f000 fb75 	bl	800791c <__assert_func>
 8007232:	2301      	movs	r3, #1
 8007234:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007238:	4610      	mov	r0, r2
 800723a:	b003      	add	sp, #12
 800723c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007240:	bfbc      	itt	lt
 8007242:	464b      	movlt	r3, r9
 8007244:	46a1      	movlt	r9, r4
 8007246:	4630      	mov	r0, r6
 8007248:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800724c:	bfba      	itte	lt
 800724e:	461c      	movlt	r4, r3
 8007250:	2501      	movlt	r5, #1
 8007252:	2500      	movge	r5, #0
 8007254:	f7ff fd40 	bl	8006cd8 <_Balloc>
 8007258:	4602      	mov	r2, r0
 800725a:	b918      	cbnz	r0, 8007264 <__mdiff+0x60>
 800725c:	4b31      	ldr	r3, [pc, #196]	@ (8007324 <__mdiff+0x120>)
 800725e:	f240 2145 	movw	r1, #581	@ 0x245
 8007262:	e7e3      	b.n	800722c <__mdiff+0x28>
 8007264:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007268:	6926      	ldr	r6, [r4, #16]
 800726a:	60c5      	str	r5, [r0, #12]
 800726c:	f109 0310 	add.w	r3, r9, #16
 8007270:	f109 0514 	add.w	r5, r9, #20
 8007274:	f104 0e14 	add.w	lr, r4, #20
 8007278:	f100 0b14 	add.w	fp, r0, #20
 800727c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007280:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007284:	9301      	str	r3, [sp, #4]
 8007286:	46d9      	mov	r9, fp
 8007288:	f04f 0c00 	mov.w	ip, #0
 800728c:	9b01      	ldr	r3, [sp, #4]
 800728e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007292:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007296:	9301      	str	r3, [sp, #4]
 8007298:	fa1f f38a 	uxth.w	r3, sl
 800729c:	4619      	mov	r1, r3
 800729e:	b283      	uxth	r3, r0
 80072a0:	1acb      	subs	r3, r1, r3
 80072a2:	0c00      	lsrs	r0, r0, #16
 80072a4:	4463      	add	r3, ip
 80072a6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80072aa:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80072ae:	b29b      	uxth	r3, r3
 80072b0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80072b4:	4576      	cmp	r6, lr
 80072b6:	f849 3b04 	str.w	r3, [r9], #4
 80072ba:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80072be:	d8e5      	bhi.n	800728c <__mdiff+0x88>
 80072c0:	1b33      	subs	r3, r6, r4
 80072c2:	3b15      	subs	r3, #21
 80072c4:	f023 0303 	bic.w	r3, r3, #3
 80072c8:	3415      	adds	r4, #21
 80072ca:	3304      	adds	r3, #4
 80072cc:	42a6      	cmp	r6, r4
 80072ce:	bf38      	it	cc
 80072d0:	2304      	movcc	r3, #4
 80072d2:	441d      	add	r5, r3
 80072d4:	445b      	add	r3, fp
 80072d6:	461e      	mov	r6, r3
 80072d8:	462c      	mov	r4, r5
 80072da:	4544      	cmp	r4, r8
 80072dc:	d30e      	bcc.n	80072fc <__mdiff+0xf8>
 80072de:	f108 0103 	add.w	r1, r8, #3
 80072e2:	1b49      	subs	r1, r1, r5
 80072e4:	f021 0103 	bic.w	r1, r1, #3
 80072e8:	3d03      	subs	r5, #3
 80072ea:	45a8      	cmp	r8, r5
 80072ec:	bf38      	it	cc
 80072ee:	2100      	movcc	r1, #0
 80072f0:	440b      	add	r3, r1
 80072f2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80072f6:	b191      	cbz	r1, 800731e <__mdiff+0x11a>
 80072f8:	6117      	str	r7, [r2, #16]
 80072fa:	e79d      	b.n	8007238 <__mdiff+0x34>
 80072fc:	f854 1b04 	ldr.w	r1, [r4], #4
 8007300:	46e6      	mov	lr, ip
 8007302:	0c08      	lsrs	r0, r1, #16
 8007304:	fa1c fc81 	uxtah	ip, ip, r1
 8007308:	4471      	add	r1, lr
 800730a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800730e:	b289      	uxth	r1, r1
 8007310:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007314:	f846 1b04 	str.w	r1, [r6], #4
 8007318:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800731c:	e7dd      	b.n	80072da <__mdiff+0xd6>
 800731e:	3f01      	subs	r7, #1
 8007320:	e7e7      	b.n	80072f2 <__mdiff+0xee>
 8007322:	bf00      	nop
 8007324:	08007ca0 	.word	0x08007ca0
 8007328:	08007cb1 	.word	0x08007cb1

0800732c <__d2b>:
 800732c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007330:	460f      	mov	r7, r1
 8007332:	2101      	movs	r1, #1
 8007334:	ec59 8b10 	vmov	r8, r9, d0
 8007338:	4616      	mov	r6, r2
 800733a:	f7ff fccd 	bl	8006cd8 <_Balloc>
 800733e:	4604      	mov	r4, r0
 8007340:	b930      	cbnz	r0, 8007350 <__d2b+0x24>
 8007342:	4602      	mov	r2, r0
 8007344:	4b23      	ldr	r3, [pc, #140]	@ (80073d4 <__d2b+0xa8>)
 8007346:	4824      	ldr	r0, [pc, #144]	@ (80073d8 <__d2b+0xac>)
 8007348:	f240 310f 	movw	r1, #783	@ 0x30f
 800734c:	f000 fae6 	bl	800791c <__assert_func>
 8007350:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007354:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007358:	b10d      	cbz	r5, 800735e <__d2b+0x32>
 800735a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800735e:	9301      	str	r3, [sp, #4]
 8007360:	f1b8 0300 	subs.w	r3, r8, #0
 8007364:	d023      	beq.n	80073ae <__d2b+0x82>
 8007366:	4668      	mov	r0, sp
 8007368:	9300      	str	r3, [sp, #0]
 800736a:	f7ff fd7c 	bl	8006e66 <__lo0bits>
 800736e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007372:	b1d0      	cbz	r0, 80073aa <__d2b+0x7e>
 8007374:	f1c0 0320 	rsb	r3, r0, #32
 8007378:	fa02 f303 	lsl.w	r3, r2, r3
 800737c:	430b      	orrs	r3, r1
 800737e:	40c2      	lsrs	r2, r0
 8007380:	6163      	str	r3, [r4, #20]
 8007382:	9201      	str	r2, [sp, #4]
 8007384:	9b01      	ldr	r3, [sp, #4]
 8007386:	61a3      	str	r3, [r4, #24]
 8007388:	2b00      	cmp	r3, #0
 800738a:	bf0c      	ite	eq
 800738c:	2201      	moveq	r2, #1
 800738e:	2202      	movne	r2, #2
 8007390:	6122      	str	r2, [r4, #16]
 8007392:	b1a5      	cbz	r5, 80073be <__d2b+0x92>
 8007394:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007398:	4405      	add	r5, r0
 800739a:	603d      	str	r5, [r7, #0]
 800739c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80073a0:	6030      	str	r0, [r6, #0]
 80073a2:	4620      	mov	r0, r4
 80073a4:	b003      	add	sp, #12
 80073a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80073aa:	6161      	str	r1, [r4, #20]
 80073ac:	e7ea      	b.n	8007384 <__d2b+0x58>
 80073ae:	a801      	add	r0, sp, #4
 80073b0:	f7ff fd59 	bl	8006e66 <__lo0bits>
 80073b4:	9b01      	ldr	r3, [sp, #4]
 80073b6:	6163      	str	r3, [r4, #20]
 80073b8:	3020      	adds	r0, #32
 80073ba:	2201      	movs	r2, #1
 80073bc:	e7e8      	b.n	8007390 <__d2b+0x64>
 80073be:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80073c2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80073c6:	6038      	str	r0, [r7, #0]
 80073c8:	6918      	ldr	r0, [r3, #16]
 80073ca:	f7ff fd2d 	bl	8006e28 <__hi0bits>
 80073ce:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80073d2:	e7e5      	b.n	80073a0 <__d2b+0x74>
 80073d4:	08007ca0 	.word	0x08007ca0
 80073d8:	08007cb1 	.word	0x08007cb1

080073dc <__sfputc_r>:
 80073dc:	6893      	ldr	r3, [r2, #8]
 80073de:	3b01      	subs	r3, #1
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	b410      	push	{r4}
 80073e4:	6093      	str	r3, [r2, #8]
 80073e6:	da08      	bge.n	80073fa <__sfputc_r+0x1e>
 80073e8:	6994      	ldr	r4, [r2, #24]
 80073ea:	42a3      	cmp	r3, r4
 80073ec:	db01      	blt.n	80073f2 <__sfputc_r+0x16>
 80073ee:	290a      	cmp	r1, #10
 80073f0:	d103      	bne.n	80073fa <__sfputc_r+0x1e>
 80073f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073f6:	f000 b9df 	b.w	80077b8 <__swbuf_r>
 80073fa:	6813      	ldr	r3, [r2, #0]
 80073fc:	1c58      	adds	r0, r3, #1
 80073fe:	6010      	str	r0, [r2, #0]
 8007400:	7019      	strb	r1, [r3, #0]
 8007402:	4608      	mov	r0, r1
 8007404:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007408:	4770      	bx	lr

0800740a <__sfputs_r>:
 800740a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740c:	4606      	mov	r6, r0
 800740e:	460f      	mov	r7, r1
 8007410:	4614      	mov	r4, r2
 8007412:	18d5      	adds	r5, r2, r3
 8007414:	42ac      	cmp	r4, r5
 8007416:	d101      	bne.n	800741c <__sfputs_r+0x12>
 8007418:	2000      	movs	r0, #0
 800741a:	e007      	b.n	800742c <__sfputs_r+0x22>
 800741c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007420:	463a      	mov	r2, r7
 8007422:	4630      	mov	r0, r6
 8007424:	f7ff ffda 	bl	80073dc <__sfputc_r>
 8007428:	1c43      	adds	r3, r0, #1
 800742a:	d1f3      	bne.n	8007414 <__sfputs_r+0xa>
 800742c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007430 <_vfiprintf_r>:
 8007430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007434:	460d      	mov	r5, r1
 8007436:	b09d      	sub	sp, #116	@ 0x74
 8007438:	4614      	mov	r4, r2
 800743a:	4698      	mov	r8, r3
 800743c:	4606      	mov	r6, r0
 800743e:	b118      	cbz	r0, 8007448 <_vfiprintf_r+0x18>
 8007440:	6a03      	ldr	r3, [r0, #32]
 8007442:	b90b      	cbnz	r3, 8007448 <_vfiprintf_r+0x18>
 8007444:	f7fe fbf0 	bl	8005c28 <__sinit>
 8007448:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800744a:	07d9      	lsls	r1, r3, #31
 800744c:	d405      	bmi.n	800745a <_vfiprintf_r+0x2a>
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	059a      	lsls	r2, r3, #22
 8007452:	d402      	bmi.n	800745a <_vfiprintf_r+0x2a>
 8007454:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007456:	f7fe fcf0 	bl	8005e3a <__retarget_lock_acquire_recursive>
 800745a:	89ab      	ldrh	r3, [r5, #12]
 800745c:	071b      	lsls	r3, r3, #28
 800745e:	d501      	bpl.n	8007464 <_vfiprintf_r+0x34>
 8007460:	692b      	ldr	r3, [r5, #16]
 8007462:	b99b      	cbnz	r3, 800748c <_vfiprintf_r+0x5c>
 8007464:	4629      	mov	r1, r5
 8007466:	4630      	mov	r0, r6
 8007468:	f000 f9e4 	bl	8007834 <__swsetup_r>
 800746c:	b170      	cbz	r0, 800748c <_vfiprintf_r+0x5c>
 800746e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007470:	07dc      	lsls	r4, r3, #31
 8007472:	d504      	bpl.n	800747e <_vfiprintf_r+0x4e>
 8007474:	f04f 30ff 	mov.w	r0, #4294967295
 8007478:	b01d      	add	sp, #116	@ 0x74
 800747a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800747e:	89ab      	ldrh	r3, [r5, #12]
 8007480:	0598      	lsls	r0, r3, #22
 8007482:	d4f7      	bmi.n	8007474 <_vfiprintf_r+0x44>
 8007484:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007486:	f7fe fcd9 	bl	8005e3c <__retarget_lock_release_recursive>
 800748a:	e7f3      	b.n	8007474 <_vfiprintf_r+0x44>
 800748c:	2300      	movs	r3, #0
 800748e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007490:	2320      	movs	r3, #32
 8007492:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007496:	f8cd 800c 	str.w	r8, [sp, #12]
 800749a:	2330      	movs	r3, #48	@ 0x30
 800749c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800764c <_vfiprintf_r+0x21c>
 80074a0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80074a4:	f04f 0901 	mov.w	r9, #1
 80074a8:	4623      	mov	r3, r4
 80074aa:	469a      	mov	sl, r3
 80074ac:	f813 2b01 	ldrb.w	r2, [r3], #1
 80074b0:	b10a      	cbz	r2, 80074b6 <_vfiprintf_r+0x86>
 80074b2:	2a25      	cmp	r2, #37	@ 0x25
 80074b4:	d1f9      	bne.n	80074aa <_vfiprintf_r+0x7a>
 80074b6:	ebba 0b04 	subs.w	fp, sl, r4
 80074ba:	d00b      	beq.n	80074d4 <_vfiprintf_r+0xa4>
 80074bc:	465b      	mov	r3, fp
 80074be:	4622      	mov	r2, r4
 80074c0:	4629      	mov	r1, r5
 80074c2:	4630      	mov	r0, r6
 80074c4:	f7ff ffa1 	bl	800740a <__sfputs_r>
 80074c8:	3001      	adds	r0, #1
 80074ca:	f000 80a7 	beq.w	800761c <_vfiprintf_r+0x1ec>
 80074ce:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80074d0:	445a      	add	r2, fp
 80074d2:	9209      	str	r2, [sp, #36]	@ 0x24
 80074d4:	f89a 3000 	ldrb.w	r3, [sl]
 80074d8:	2b00      	cmp	r3, #0
 80074da:	f000 809f 	beq.w	800761c <_vfiprintf_r+0x1ec>
 80074de:	2300      	movs	r3, #0
 80074e0:	f04f 32ff 	mov.w	r2, #4294967295
 80074e4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80074e8:	f10a 0a01 	add.w	sl, sl, #1
 80074ec:	9304      	str	r3, [sp, #16]
 80074ee:	9307      	str	r3, [sp, #28]
 80074f0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80074f4:	931a      	str	r3, [sp, #104]	@ 0x68
 80074f6:	4654      	mov	r4, sl
 80074f8:	2205      	movs	r2, #5
 80074fa:	f814 1b01 	ldrb.w	r1, [r4], #1
 80074fe:	4853      	ldr	r0, [pc, #332]	@ (800764c <_vfiprintf_r+0x21c>)
 8007500:	f7f8 fe6e 	bl	80001e0 <memchr>
 8007504:	9a04      	ldr	r2, [sp, #16]
 8007506:	b9d8      	cbnz	r0, 8007540 <_vfiprintf_r+0x110>
 8007508:	06d1      	lsls	r1, r2, #27
 800750a:	bf44      	itt	mi
 800750c:	2320      	movmi	r3, #32
 800750e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007512:	0713      	lsls	r3, r2, #28
 8007514:	bf44      	itt	mi
 8007516:	232b      	movmi	r3, #43	@ 0x2b
 8007518:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800751c:	f89a 3000 	ldrb.w	r3, [sl]
 8007520:	2b2a      	cmp	r3, #42	@ 0x2a
 8007522:	d015      	beq.n	8007550 <_vfiprintf_r+0x120>
 8007524:	9a07      	ldr	r2, [sp, #28]
 8007526:	4654      	mov	r4, sl
 8007528:	2000      	movs	r0, #0
 800752a:	f04f 0c0a 	mov.w	ip, #10
 800752e:	4621      	mov	r1, r4
 8007530:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007534:	3b30      	subs	r3, #48	@ 0x30
 8007536:	2b09      	cmp	r3, #9
 8007538:	d94b      	bls.n	80075d2 <_vfiprintf_r+0x1a2>
 800753a:	b1b0      	cbz	r0, 800756a <_vfiprintf_r+0x13a>
 800753c:	9207      	str	r2, [sp, #28]
 800753e:	e014      	b.n	800756a <_vfiprintf_r+0x13a>
 8007540:	eba0 0308 	sub.w	r3, r0, r8
 8007544:	fa09 f303 	lsl.w	r3, r9, r3
 8007548:	4313      	orrs	r3, r2
 800754a:	9304      	str	r3, [sp, #16]
 800754c:	46a2      	mov	sl, r4
 800754e:	e7d2      	b.n	80074f6 <_vfiprintf_r+0xc6>
 8007550:	9b03      	ldr	r3, [sp, #12]
 8007552:	1d19      	adds	r1, r3, #4
 8007554:	681b      	ldr	r3, [r3, #0]
 8007556:	9103      	str	r1, [sp, #12]
 8007558:	2b00      	cmp	r3, #0
 800755a:	bfbb      	ittet	lt
 800755c:	425b      	neglt	r3, r3
 800755e:	f042 0202 	orrlt.w	r2, r2, #2
 8007562:	9307      	strge	r3, [sp, #28]
 8007564:	9307      	strlt	r3, [sp, #28]
 8007566:	bfb8      	it	lt
 8007568:	9204      	strlt	r2, [sp, #16]
 800756a:	7823      	ldrb	r3, [r4, #0]
 800756c:	2b2e      	cmp	r3, #46	@ 0x2e
 800756e:	d10a      	bne.n	8007586 <_vfiprintf_r+0x156>
 8007570:	7863      	ldrb	r3, [r4, #1]
 8007572:	2b2a      	cmp	r3, #42	@ 0x2a
 8007574:	d132      	bne.n	80075dc <_vfiprintf_r+0x1ac>
 8007576:	9b03      	ldr	r3, [sp, #12]
 8007578:	1d1a      	adds	r2, r3, #4
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	9203      	str	r2, [sp, #12]
 800757e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007582:	3402      	adds	r4, #2
 8007584:	9305      	str	r3, [sp, #20]
 8007586:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800765c <_vfiprintf_r+0x22c>
 800758a:	7821      	ldrb	r1, [r4, #0]
 800758c:	2203      	movs	r2, #3
 800758e:	4650      	mov	r0, sl
 8007590:	f7f8 fe26 	bl	80001e0 <memchr>
 8007594:	b138      	cbz	r0, 80075a6 <_vfiprintf_r+0x176>
 8007596:	9b04      	ldr	r3, [sp, #16]
 8007598:	eba0 000a 	sub.w	r0, r0, sl
 800759c:	2240      	movs	r2, #64	@ 0x40
 800759e:	4082      	lsls	r2, r0
 80075a0:	4313      	orrs	r3, r2
 80075a2:	3401      	adds	r4, #1
 80075a4:	9304      	str	r3, [sp, #16]
 80075a6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075aa:	4829      	ldr	r0, [pc, #164]	@ (8007650 <_vfiprintf_r+0x220>)
 80075ac:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80075b0:	2206      	movs	r2, #6
 80075b2:	f7f8 fe15 	bl	80001e0 <memchr>
 80075b6:	2800      	cmp	r0, #0
 80075b8:	d03f      	beq.n	800763a <_vfiprintf_r+0x20a>
 80075ba:	4b26      	ldr	r3, [pc, #152]	@ (8007654 <_vfiprintf_r+0x224>)
 80075bc:	bb1b      	cbnz	r3, 8007606 <_vfiprintf_r+0x1d6>
 80075be:	9b03      	ldr	r3, [sp, #12]
 80075c0:	3307      	adds	r3, #7
 80075c2:	f023 0307 	bic.w	r3, r3, #7
 80075c6:	3308      	adds	r3, #8
 80075c8:	9303      	str	r3, [sp, #12]
 80075ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80075cc:	443b      	add	r3, r7
 80075ce:	9309      	str	r3, [sp, #36]	@ 0x24
 80075d0:	e76a      	b.n	80074a8 <_vfiprintf_r+0x78>
 80075d2:	fb0c 3202 	mla	r2, ip, r2, r3
 80075d6:	460c      	mov	r4, r1
 80075d8:	2001      	movs	r0, #1
 80075da:	e7a8      	b.n	800752e <_vfiprintf_r+0xfe>
 80075dc:	2300      	movs	r3, #0
 80075de:	3401      	adds	r4, #1
 80075e0:	9305      	str	r3, [sp, #20]
 80075e2:	4619      	mov	r1, r3
 80075e4:	f04f 0c0a 	mov.w	ip, #10
 80075e8:	4620      	mov	r0, r4
 80075ea:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075ee:	3a30      	subs	r2, #48	@ 0x30
 80075f0:	2a09      	cmp	r2, #9
 80075f2:	d903      	bls.n	80075fc <_vfiprintf_r+0x1cc>
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d0c6      	beq.n	8007586 <_vfiprintf_r+0x156>
 80075f8:	9105      	str	r1, [sp, #20]
 80075fa:	e7c4      	b.n	8007586 <_vfiprintf_r+0x156>
 80075fc:	fb0c 2101 	mla	r1, ip, r1, r2
 8007600:	4604      	mov	r4, r0
 8007602:	2301      	movs	r3, #1
 8007604:	e7f0      	b.n	80075e8 <_vfiprintf_r+0x1b8>
 8007606:	ab03      	add	r3, sp, #12
 8007608:	9300      	str	r3, [sp, #0]
 800760a:	462a      	mov	r2, r5
 800760c:	4b12      	ldr	r3, [pc, #72]	@ (8007658 <_vfiprintf_r+0x228>)
 800760e:	a904      	add	r1, sp, #16
 8007610:	4630      	mov	r0, r6
 8007612:	f7fd fec5 	bl	80053a0 <_printf_float>
 8007616:	4607      	mov	r7, r0
 8007618:	1c78      	adds	r0, r7, #1
 800761a:	d1d6      	bne.n	80075ca <_vfiprintf_r+0x19a>
 800761c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800761e:	07d9      	lsls	r1, r3, #31
 8007620:	d405      	bmi.n	800762e <_vfiprintf_r+0x1fe>
 8007622:	89ab      	ldrh	r3, [r5, #12]
 8007624:	059a      	lsls	r2, r3, #22
 8007626:	d402      	bmi.n	800762e <_vfiprintf_r+0x1fe>
 8007628:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800762a:	f7fe fc07 	bl	8005e3c <__retarget_lock_release_recursive>
 800762e:	89ab      	ldrh	r3, [r5, #12]
 8007630:	065b      	lsls	r3, r3, #25
 8007632:	f53f af1f 	bmi.w	8007474 <_vfiprintf_r+0x44>
 8007636:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007638:	e71e      	b.n	8007478 <_vfiprintf_r+0x48>
 800763a:	ab03      	add	r3, sp, #12
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	462a      	mov	r2, r5
 8007640:	4b05      	ldr	r3, [pc, #20]	@ (8007658 <_vfiprintf_r+0x228>)
 8007642:	a904      	add	r1, sp, #16
 8007644:	4630      	mov	r0, r6
 8007646:	f7fe f943 	bl	80058d0 <_printf_i>
 800764a:	e7e4      	b.n	8007616 <_vfiprintf_r+0x1e6>
 800764c:	08007e08 	.word	0x08007e08
 8007650:	08007e12 	.word	0x08007e12
 8007654:	080053a1 	.word	0x080053a1
 8007658:	0800740b 	.word	0x0800740b
 800765c:	08007e0e 	.word	0x08007e0e

08007660 <__sflush_r>:
 8007660:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007664:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007668:	0716      	lsls	r6, r2, #28
 800766a:	4605      	mov	r5, r0
 800766c:	460c      	mov	r4, r1
 800766e:	d454      	bmi.n	800771a <__sflush_r+0xba>
 8007670:	684b      	ldr	r3, [r1, #4]
 8007672:	2b00      	cmp	r3, #0
 8007674:	dc02      	bgt.n	800767c <__sflush_r+0x1c>
 8007676:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007678:	2b00      	cmp	r3, #0
 800767a:	dd48      	ble.n	800770e <__sflush_r+0xae>
 800767c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800767e:	2e00      	cmp	r6, #0
 8007680:	d045      	beq.n	800770e <__sflush_r+0xae>
 8007682:	2300      	movs	r3, #0
 8007684:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007688:	682f      	ldr	r7, [r5, #0]
 800768a:	6a21      	ldr	r1, [r4, #32]
 800768c:	602b      	str	r3, [r5, #0]
 800768e:	d030      	beq.n	80076f2 <__sflush_r+0x92>
 8007690:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007692:	89a3      	ldrh	r3, [r4, #12]
 8007694:	0759      	lsls	r1, r3, #29
 8007696:	d505      	bpl.n	80076a4 <__sflush_r+0x44>
 8007698:	6863      	ldr	r3, [r4, #4]
 800769a:	1ad2      	subs	r2, r2, r3
 800769c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800769e:	b10b      	cbz	r3, 80076a4 <__sflush_r+0x44>
 80076a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80076a2:	1ad2      	subs	r2, r2, r3
 80076a4:	2300      	movs	r3, #0
 80076a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80076a8:	6a21      	ldr	r1, [r4, #32]
 80076aa:	4628      	mov	r0, r5
 80076ac:	47b0      	blx	r6
 80076ae:	1c43      	adds	r3, r0, #1
 80076b0:	89a3      	ldrh	r3, [r4, #12]
 80076b2:	d106      	bne.n	80076c2 <__sflush_r+0x62>
 80076b4:	6829      	ldr	r1, [r5, #0]
 80076b6:	291d      	cmp	r1, #29
 80076b8:	d82b      	bhi.n	8007712 <__sflush_r+0xb2>
 80076ba:	4a2a      	ldr	r2, [pc, #168]	@ (8007764 <__sflush_r+0x104>)
 80076bc:	410a      	asrs	r2, r1
 80076be:	07d6      	lsls	r6, r2, #31
 80076c0:	d427      	bmi.n	8007712 <__sflush_r+0xb2>
 80076c2:	2200      	movs	r2, #0
 80076c4:	6062      	str	r2, [r4, #4]
 80076c6:	04d9      	lsls	r1, r3, #19
 80076c8:	6922      	ldr	r2, [r4, #16]
 80076ca:	6022      	str	r2, [r4, #0]
 80076cc:	d504      	bpl.n	80076d8 <__sflush_r+0x78>
 80076ce:	1c42      	adds	r2, r0, #1
 80076d0:	d101      	bne.n	80076d6 <__sflush_r+0x76>
 80076d2:	682b      	ldr	r3, [r5, #0]
 80076d4:	b903      	cbnz	r3, 80076d8 <__sflush_r+0x78>
 80076d6:	6560      	str	r0, [r4, #84]	@ 0x54
 80076d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80076da:	602f      	str	r7, [r5, #0]
 80076dc:	b1b9      	cbz	r1, 800770e <__sflush_r+0xae>
 80076de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80076e2:	4299      	cmp	r1, r3
 80076e4:	d002      	beq.n	80076ec <__sflush_r+0x8c>
 80076e6:	4628      	mov	r0, r5
 80076e8:	f7ff f9f6 	bl	8006ad8 <_free_r>
 80076ec:	2300      	movs	r3, #0
 80076ee:	6363      	str	r3, [r4, #52]	@ 0x34
 80076f0:	e00d      	b.n	800770e <__sflush_r+0xae>
 80076f2:	2301      	movs	r3, #1
 80076f4:	4628      	mov	r0, r5
 80076f6:	47b0      	blx	r6
 80076f8:	4602      	mov	r2, r0
 80076fa:	1c50      	adds	r0, r2, #1
 80076fc:	d1c9      	bne.n	8007692 <__sflush_r+0x32>
 80076fe:	682b      	ldr	r3, [r5, #0]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d0c6      	beq.n	8007692 <__sflush_r+0x32>
 8007704:	2b1d      	cmp	r3, #29
 8007706:	d001      	beq.n	800770c <__sflush_r+0xac>
 8007708:	2b16      	cmp	r3, #22
 800770a:	d11e      	bne.n	800774a <__sflush_r+0xea>
 800770c:	602f      	str	r7, [r5, #0]
 800770e:	2000      	movs	r0, #0
 8007710:	e022      	b.n	8007758 <__sflush_r+0xf8>
 8007712:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007716:	b21b      	sxth	r3, r3
 8007718:	e01b      	b.n	8007752 <__sflush_r+0xf2>
 800771a:	690f      	ldr	r7, [r1, #16]
 800771c:	2f00      	cmp	r7, #0
 800771e:	d0f6      	beq.n	800770e <__sflush_r+0xae>
 8007720:	0793      	lsls	r3, r2, #30
 8007722:	680e      	ldr	r6, [r1, #0]
 8007724:	bf08      	it	eq
 8007726:	694b      	ldreq	r3, [r1, #20]
 8007728:	600f      	str	r7, [r1, #0]
 800772a:	bf18      	it	ne
 800772c:	2300      	movne	r3, #0
 800772e:	eba6 0807 	sub.w	r8, r6, r7
 8007732:	608b      	str	r3, [r1, #8]
 8007734:	f1b8 0f00 	cmp.w	r8, #0
 8007738:	dde9      	ble.n	800770e <__sflush_r+0xae>
 800773a:	6a21      	ldr	r1, [r4, #32]
 800773c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800773e:	4643      	mov	r3, r8
 8007740:	463a      	mov	r2, r7
 8007742:	4628      	mov	r0, r5
 8007744:	47b0      	blx	r6
 8007746:	2800      	cmp	r0, #0
 8007748:	dc08      	bgt.n	800775c <__sflush_r+0xfc>
 800774a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800774e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007752:	81a3      	strh	r3, [r4, #12]
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800775c:	4407      	add	r7, r0
 800775e:	eba8 0800 	sub.w	r8, r8, r0
 8007762:	e7e7      	b.n	8007734 <__sflush_r+0xd4>
 8007764:	dfbffffe 	.word	0xdfbffffe

08007768 <_fflush_r>:
 8007768:	b538      	push	{r3, r4, r5, lr}
 800776a:	690b      	ldr	r3, [r1, #16]
 800776c:	4605      	mov	r5, r0
 800776e:	460c      	mov	r4, r1
 8007770:	b913      	cbnz	r3, 8007778 <_fflush_r+0x10>
 8007772:	2500      	movs	r5, #0
 8007774:	4628      	mov	r0, r5
 8007776:	bd38      	pop	{r3, r4, r5, pc}
 8007778:	b118      	cbz	r0, 8007782 <_fflush_r+0x1a>
 800777a:	6a03      	ldr	r3, [r0, #32]
 800777c:	b90b      	cbnz	r3, 8007782 <_fflush_r+0x1a>
 800777e:	f7fe fa53 	bl	8005c28 <__sinit>
 8007782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007786:	2b00      	cmp	r3, #0
 8007788:	d0f3      	beq.n	8007772 <_fflush_r+0xa>
 800778a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800778c:	07d0      	lsls	r0, r2, #31
 800778e:	d404      	bmi.n	800779a <_fflush_r+0x32>
 8007790:	0599      	lsls	r1, r3, #22
 8007792:	d402      	bmi.n	800779a <_fflush_r+0x32>
 8007794:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007796:	f7fe fb50 	bl	8005e3a <__retarget_lock_acquire_recursive>
 800779a:	4628      	mov	r0, r5
 800779c:	4621      	mov	r1, r4
 800779e:	f7ff ff5f 	bl	8007660 <__sflush_r>
 80077a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80077a4:	07da      	lsls	r2, r3, #31
 80077a6:	4605      	mov	r5, r0
 80077a8:	d4e4      	bmi.n	8007774 <_fflush_r+0xc>
 80077aa:	89a3      	ldrh	r3, [r4, #12]
 80077ac:	059b      	lsls	r3, r3, #22
 80077ae:	d4e1      	bmi.n	8007774 <_fflush_r+0xc>
 80077b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80077b2:	f7fe fb43 	bl	8005e3c <__retarget_lock_release_recursive>
 80077b6:	e7dd      	b.n	8007774 <_fflush_r+0xc>

080077b8 <__swbuf_r>:
 80077b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077ba:	460e      	mov	r6, r1
 80077bc:	4614      	mov	r4, r2
 80077be:	4605      	mov	r5, r0
 80077c0:	b118      	cbz	r0, 80077ca <__swbuf_r+0x12>
 80077c2:	6a03      	ldr	r3, [r0, #32]
 80077c4:	b90b      	cbnz	r3, 80077ca <__swbuf_r+0x12>
 80077c6:	f7fe fa2f 	bl	8005c28 <__sinit>
 80077ca:	69a3      	ldr	r3, [r4, #24]
 80077cc:	60a3      	str	r3, [r4, #8]
 80077ce:	89a3      	ldrh	r3, [r4, #12]
 80077d0:	071a      	lsls	r2, r3, #28
 80077d2:	d501      	bpl.n	80077d8 <__swbuf_r+0x20>
 80077d4:	6923      	ldr	r3, [r4, #16]
 80077d6:	b943      	cbnz	r3, 80077ea <__swbuf_r+0x32>
 80077d8:	4621      	mov	r1, r4
 80077da:	4628      	mov	r0, r5
 80077dc:	f000 f82a 	bl	8007834 <__swsetup_r>
 80077e0:	b118      	cbz	r0, 80077ea <__swbuf_r+0x32>
 80077e2:	f04f 37ff 	mov.w	r7, #4294967295
 80077e6:	4638      	mov	r0, r7
 80077e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80077ea:	6823      	ldr	r3, [r4, #0]
 80077ec:	6922      	ldr	r2, [r4, #16]
 80077ee:	1a98      	subs	r0, r3, r2
 80077f0:	6963      	ldr	r3, [r4, #20]
 80077f2:	b2f6      	uxtb	r6, r6
 80077f4:	4283      	cmp	r3, r0
 80077f6:	4637      	mov	r7, r6
 80077f8:	dc05      	bgt.n	8007806 <__swbuf_r+0x4e>
 80077fa:	4621      	mov	r1, r4
 80077fc:	4628      	mov	r0, r5
 80077fe:	f7ff ffb3 	bl	8007768 <_fflush_r>
 8007802:	2800      	cmp	r0, #0
 8007804:	d1ed      	bne.n	80077e2 <__swbuf_r+0x2a>
 8007806:	68a3      	ldr	r3, [r4, #8]
 8007808:	3b01      	subs	r3, #1
 800780a:	60a3      	str	r3, [r4, #8]
 800780c:	6823      	ldr	r3, [r4, #0]
 800780e:	1c5a      	adds	r2, r3, #1
 8007810:	6022      	str	r2, [r4, #0]
 8007812:	701e      	strb	r6, [r3, #0]
 8007814:	6962      	ldr	r2, [r4, #20]
 8007816:	1c43      	adds	r3, r0, #1
 8007818:	429a      	cmp	r2, r3
 800781a:	d004      	beq.n	8007826 <__swbuf_r+0x6e>
 800781c:	89a3      	ldrh	r3, [r4, #12]
 800781e:	07db      	lsls	r3, r3, #31
 8007820:	d5e1      	bpl.n	80077e6 <__swbuf_r+0x2e>
 8007822:	2e0a      	cmp	r6, #10
 8007824:	d1df      	bne.n	80077e6 <__swbuf_r+0x2e>
 8007826:	4621      	mov	r1, r4
 8007828:	4628      	mov	r0, r5
 800782a:	f7ff ff9d 	bl	8007768 <_fflush_r>
 800782e:	2800      	cmp	r0, #0
 8007830:	d0d9      	beq.n	80077e6 <__swbuf_r+0x2e>
 8007832:	e7d6      	b.n	80077e2 <__swbuf_r+0x2a>

08007834 <__swsetup_r>:
 8007834:	b538      	push	{r3, r4, r5, lr}
 8007836:	4b29      	ldr	r3, [pc, #164]	@ (80078dc <__swsetup_r+0xa8>)
 8007838:	4605      	mov	r5, r0
 800783a:	6818      	ldr	r0, [r3, #0]
 800783c:	460c      	mov	r4, r1
 800783e:	b118      	cbz	r0, 8007848 <__swsetup_r+0x14>
 8007840:	6a03      	ldr	r3, [r0, #32]
 8007842:	b90b      	cbnz	r3, 8007848 <__swsetup_r+0x14>
 8007844:	f7fe f9f0 	bl	8005c28 <__sinit>
 8007848:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800784c:	0719      	lsls	r1, r3, #28
 800784e:	d422      	bmi.n	8007896 <__swsetup_r+0x62>
 8007850:	06da      	lsls	r2, r3, #27
 8007852:	d407      	bmi.n	8007864 <__swsetup_r+0x30>
 8007854:	2209      	movs	r2, #9
 8007856:	602a      	str	r2, [r5, #0]
 8007858:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800785c:	81a3      	strh	r3, [r4, #12]
 800785e:	f04f 30ff 	mov.w	r0, #4294967295
 8007862:	e033      	b.n	80078cc <__swsetup_r+0x98>
 8007864:	0758      	lsls	r0, r3, #29
 8007866:	d512      	bpl.n	800788e <__swsetup_r+0x5a>
 8007868:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800786a:	b141      	cbz	r1, 800787e <__swsetup_r+0x4a>
 800786c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007870:	4299      	cmp	r1, r3
 8007872:	d002      	beq.n	800787a <__swsetup_r+0x46>
 8007874:	4628      	mov	r0, r5
 8007876:	f7ff f92f 	bl	8006ad8 <_free_r>
 800787a:	2300      	movs	r3, #0
 800787c:	6363      	str	r3, [r4, #52]	@ 0x34
 800787e:	89a3      	ldrh	r3, [r4, #12]
 8007880:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007884:	81a3      	strh	r3, [r4, #12]
 8007886:	2300      	movs	r3, #0
 8007888:	6063      	str	r3, [r4, #4]
 800788a:	6923      	ldr	r3, [r4, #16]
 800788c:	6023      	str	r3, [r4, #0]
 800788e:	89a3      	ldrh	r3, [r4, #12]
 8007890:	f043 0308 	orr.w	r3, r3, #8
 8007894:	81a3      	strh	r3, [r4, #12]
 8007896:	6923      	ldr	r3, [r4, #16]
 8007898:	b94b      	cbnz	r3, 80078ae <__swsetup_r+0x7a>
 800789a:	89a3      	ldrh	r3, [r4, #12]
 800789c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80078a0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80078a4:	d003      	beq.n	80078ae <__swsetup_r+0x7a>
 80078a6:	4621      	mov	r1, r4
 80078a8:	4628      	mov	r0, r5
 80078aa:	f000 f8c1 	bl	8007a30 <__smakebuf_r>
 80078ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80078b2:	f013 0201 	ands.w	r2, r3, #1
 80078b6:	d00a      	beq.n	80078ce <__swsetup_r+0x9a>
 80078b8:	2200      	movs	r2, #0
 80078ba:	60a2      	str	r2, [r4, #8]
 80078bc:	6962      	ldr	r2, [r4, #20]
 80078be:	4252      	negs	r2, r2
 80078c0:	61a2      	str	r2, [r4, #24]
 80078c2:	6922      	ldr	r2, [r4, #16]
 80078c4:	b942      	cbnz	r2, 80078d8 <__swsetup_r+0xa4>
 80078c6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80078ca:	d1c5      	bne.n	8007858 <__swsetup_r+0x24>
 80078cc:	bd38      	pop	{r3, r4, r5, pc}
 80078ce:	0799      	lsls	r1, r3, #30
 80078d0:	bf58      	it	pl
 80078d2:	6962      	ldrpl	r2, [r4, #20]
 80078d4:	60a2      	str	r2, [r4, #8]
 80078d6:	e7f4      	b.n	80078c2 <__swsetup_r+0x8e>
 80078d8:	2000      	movs	r0, #0
 80078da:	e7f7      	b.n	80078cc <__swsetup_r+0x98>
 80078dc:	20000018 	.word	0x20000018

080078e0 <_sbrk_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	4d06      	ldr	r5, [pc, #24]	@ (80078fc <_sbrk_r+0x1c>)
 80078e4:	2300      	movs	r3, #0
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7f9 fcb8 	bl	8001260 <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_sbrk_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_sbrk_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	20000414 	.word	0x20000414

08007900 <memcpy>:
 8007900:	440a      	add	r2, r1
 8007902:	4291      	cmp	r1, r2
 8007904:	f100 33ff 	add.w	r3, r0, #4294967295
 8007908:	d100      	bne.n	800790c <memcpy+0xc>
 800790a:	4770      	bx	lr
 800790c:	b510      	push	{r4, lr}
 800790e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007912:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007916:	4291      	cmp	r1, r2
 8007918:	d1f9      	bne.n	800790e <memcpy+0xe>
 800791a:	bd10      	pop	{r4, pc}

0800791c <__assert_func>:
 800791c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800791e:	4614      	mov	r4, r2
 8007920:	461a      	mov	r2, r3
 8007922:	4b09      	ldr	r3, [pc, #36]	@ (8007948 <__assert_func+0x2c>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	4605      	mov	r5, r0
 8007928:	68d8      	ldr	r0, [r3, #12]
 800792a:	b954      	cbnz	r4, 8007942 <__assert_func+0x26>
 800792c:	4b07      	ldr	r3, [pc, #28]	@ (800794c <__assert_func+0x30>)
 800792e:	461c      	mov	r4, r3
 8007930:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007934:	9100      	str	r1, [sp, #0]
 8007936:	462b      	mov	r3, r5
 8007938:	4905      	ldr	r1, [pc, #20]	@ (8007950 <__assert_func+0x34>)
 800793a:	f000 f841 	bl	80079c0 <fiprintf>
 800793e:	f000 f8d5 	bl	8007aec <abort>
 8007942:	4b04      	ldr	r3, [pc, #16]	@ (8007954 <__assert_func+0x38>)
 8007944:	e7f4      	b.n	8007930 <__assert_func+0x14>
 8007946:	bf00      	nop
 8007948:	20000018 	.word	0x20000018
 800794c:	08007e5e 	.word	0x08007e5e
 8007950:	08007e30 	.word	0x08007e30
 8007954:	08007e23 	.word	0x08007e23

08007958 <_calloc_r>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	fba1 5402 	umull	r5, r4, r1, r2
 800795e:	b93c      	cbnz	r4, 8007970 <_calloc_r+0x18>
 8007960:	4629      	mov	r1, r5
 8007962:	f7ff f92d 	bl	8006bc0 <_malloc_r>
 8007966:	4606      	mov	r6, r0
 8007968:	b928      	cbnz	r0, 8007976 <_calloc_r+0x1e>
 800796a:	2600      	movs	r6, #0
 800796c:	4630      	mov	r0, r6
 800796e:	bd70      	pop	{r4, r5, r6, pc}
 8007970:	220c      	movs	r2, #12
 8007972:	6002      	str	r2, [r0, #0]
 8007974:	e7f9      	b.n	800796a <_calloc_r+0x12>
 8007976:	462a      	mov	r2, r5
 8007978:	4621      	mov	r1, r4
 800797a:	f7fe f9e0 	bl	8005d3e <memset>
 800797e:	e7f5      	b.n	800796c <_calloc_r+0x14>

08007980 <__ascii_mbtowc>:
 8007980:	b082      	sub	sp, #8
 8007982:	b901      	cbnz	r1, 8007986 <__ascii_mbtowc+0x6>
 8007984:	a901      	add	r1, sp, #4
 8007986:	b142      	cbz	r2, 800799a <__ascii_mbtowc+0x1a>
 8007988:	b14b      	cbz	r3, 800799e <__ascii_mbtowc+0x1e>
 800798a:	7813      	ldrb	r3, [r2, #0]
 800798c:	600b      	str	r3, [r1, #0]
 800798e:	7812      	ldrb	r2, [r2, #0]
 8007990:	1e10      	subs	r0, r2, #0
 8007992:	bf18      	it	ne
 8007994:	2001      	movne	r0, #1
 8007996:	b002      	add	sp, #8
 8007998:	4770      	bx	lr
 800799a:	4610      	mov	r0, r2
 800799c:	e7fb      	b.n	8007996 <__ascii_mbtowc+0x16>
 800799e:	f06f 0001 	mvn.w	r0, #1
 80079a2:	e7f8      	b.n	8007996 <__ascii_mbtowc+0x16>

080079a4 <__ascii_wctomb>:
 80079a4:	4603      	mov	r3, r0
 80079a6:	4608      	mov	r0, r1
 80079a8:	b141      	cbz	r1, 80079bc <__ascii_wctomb+0x18>
 80079aa:	2aff      	cmp	r2, #255	@ 0xff
 80079ac:	d904      	bls.n	80079b8 <__ascii_wctomb+0x14>
 80079ae:	228a      	movs	r2, #138	@ 0x8a
 80079b0:	601a      	str	r2, [r3, #0]
 80079b2:	f04f 30ff 	mov.w	r0, #4294967295
 80079b6:	4770      	bx	lr
 80079b8:	700a      	strb	r2, [r1, #0]
 80079ba:	2001      	movs	r0, #1
 80079bc:	4770      	bx	lr
	...

080079c0 <fiprintf>:
 80079c0:	b40e      	push	{r1, r2, r3}
 80079c2:	b503      	push	{r0, r1, lr}
 80079c4:	4601      	mov	r1, r0
 80079c6:	ab03      	add	r3, sp, #12
 80079c8:	4805      	ldr	r0, [pc, #20]	@ (80079e0 <fiprintf+0x20>)
 80079ca:	f853 2b04 	ldr.w	r2, [r3], #4
 80079ce:	6800      	ldr	r0, [r0, #0]
 80079d0:	9301      	str	r3, [sp, #4]
 80079d2:	f7ff fd2d 	bl	8007430 <_vfiprintf_r>
 80079d6:	b002      	add	sp, #8
 80079d8:	f85d eb04 	ldr.w	lr, [sp], #4
 80079dc:	b003      	add	sp, #12
 80079de:	4770      	bx	lr
 80079e0:	20000018 	.word	0x20000018

080079e4 <__swhatbuf_r>:
 80079e4:	b570      	push	{r4, r5, r6, lr}
 80079e6:	460c      	mov	r4, r1
 80079e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ec:	2900      	cmp	r1, #0
 80079ee:	b096      	sub	sp, #88	@ 0x58
 80079f0:	4615      	mov	r5, r2
 80079f2:	461e      	mov	r6, r3
 80079f4:	da0d      	bge.n	8007a12 <__swhatbuf_r+0x2e>
 80079f6:	89a3      	ldrh	r3, [r4, #12]
 80079f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80079fc:	f04f 0100 	mov.w	r1, #0
 8007a00:	bf14      	ite	ne
 8007a02:	2340      	movne	r3, #64	@ 0x40
 8007a04:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007a08:	2000      	movs	r0, #0
 8007a0a:	6031      	str	r1, [r6, #0]
 8007a0c:	602b      	str	r3, [r5, #0]
 8007a0e:	b016      	add	sp, #88	@ 0x58
 8007a10:	bd70      	pop	{r4, r5, r6, pc}
 8007a12:	466a      	mov	r2, sp
 8007a14:	f000 f848 	bl	8007aa8 <_fstat_r>
 8007a18:	2800      	cmp	r0, #0
 8007a1a:	dbec      	blt.n	80079f6 <__swhatbuf_r+0x12>
 8007a1c:	9901      	ldr	r1, [sp, #4]
 8007a1e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007a22:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007a26:	4259      	negs	r1, r3
 8007a28:	4159      	adcs	r1, r3
 8007a2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007a2e:	e7eb      	b.n	8007a08 <__swhatbuf_r+0x24>

08007a30 <__smakebuf_r>:
 8007a30:	898b      	ldrh	r3, [r1, #12]
 8007a32:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a34:	079d      	lsls	r5, r3, #30
 8007a36:	4606      	mov	r6, r0
 8007a38:	460c      	mov	r4, r1
 8007a3a:	d507      	bpl.n	8007a4c <__smakebuf_r+0x1c>
 8007a3c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007a40:	6023      	str	r3, [r4, #0]
 8007a42:	6123      	str	r3, [r4, #16]
 8007a44:	2301      	movs	r3, #1
 8007a46:	6163      	str	r3, [r4, #20]
 8007a48:	b003      	add	sp, #12
 8007a4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007a4c:	ab01      	add	r3, sp, #4
 8007a4e:	466a      	mov	r2, sp
 8007a50:	f7ff ffc8 	bl	80079e4 <__swhatbuf_r>
 8007a54:	9f00      	ldr	r7, [sp, #0]
 8007a56:	4605      	mov	r5, r0
 8007a58:	4639      	mov	r1, r7
 8007a5a:	4630      	mov	r0, r6
 8007a5c:	f7ff f8b0 	bl	8006bc0 <_malloc_r>
 8007a60:	b948      	cbnz	r0, 8007a76 <__smakebuf_r+0x46>
 8007a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a66:	059a      	lsls	r2, r3, #22
 8007a68:	d4ee      	bmi.n	8007a48 <__smakebuf_r+0x18>
 8007a6a:	f023 0303 	bic.w	r3, r3, #3
 8007a6e:	f043 0302 	orr.w	r3, r3, #2
 8007a72:	81a3      	strh	r3, [r4, #12]
 8007a74:	e7e2      	b.n	8007a3c <__smakebuf_r+0xc>
 8007a76:	89a3      	ldrh	r3, [r4, #12]
 8007a78:	6020      	str	r0, [r4, #0]
 8007a7a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007a7e:	81a3      	strh	r3, [r4, #12]
 8007a80:	9b01      	ldr	r3, [sp, #4]
 8007a82:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007a86:	b15b      	cbz	r3, 8007aa0 <__smakebuf_r+0x70>
 8007a88:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007a8c:	4630      	mov	r0, r6
 8007a8e:	f000 f81d 	bl	8007acc <_isatty_r>
 8007a92:	b128      	cbz	r0, 8007aa0 <__smakebuf_r+0x70>
 8007a94:	89a3      	ldrh	r3, [r4, #12]
 8007a96:	f023 0303 	bic.w	r3, r3, #3
 8007a9a:	f043 0301 	orr.w	r3, r3, #1
 8007a9e:	81a3      	strh	r3, [r4, #12]
 8007aa0:	89a3      	ldrh	r3, [r4, #12]
 8007aa2:	431d      	orrs	r5, r3
 8007aa4:	81a5      	strh	r5, [r4, #12]
 8007aa6:	e7cf      	b.n	8007a48 <__smakebuf_r+0x18>

08007aa8 <_fstat_r>:
 8007aa8:	b538      	push	{r3, r4, r5, lr}
 8007aaa:	4d07      	ldr	r5, [pc, #28]	@ (8007ac8 <_fstat_r+0x20>)
 8007aac:	2300      	movs	r3, #0
 8007aae:	4604      	mov	r4, r0
 8007ab0:	4608      	mov	r0, r1
 8007ab2:	4611      	mov	r1, r2
 8007ab4:	602b      	str	r3, [r5, #0]
 8007ab6:	f7f9 fbab 	bl	8001210 <_fstat>
 8007aba:	1c43      	adds	r3, r0, #1
 8007abc:	d102      	bne.n	8007ac4 <_fstat_r+0x1c>
 8007abe:	682b      	ldr	r3, [r5, #0]
 8007ac0:	b103      	cbz	r3, 8007ac4 <_fstat_r+0x1c>
 8007ac2:	6023      	str	r3, [r4, #0]
 8007ac4:	bd38      	pop	{r3, r4, r5, pc}
 8007ac6:	bf00      	nop
 8007ac8:	20000414 	.word	0x20000414

08007acc <_isatty_r>:
 8007acc:	b538      	push	{r3, r4, r5, lr}
 8007ace:	4d06      	ldr	r5, [pc, #24]	@ (8007ae8 <_isatty_r+0x1c>)
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	4608      	mov	r0, r1
 8007ad6:	602b      	str	r3, [r5, #0]
 8007ad8:	f7f9 fbaa 	bl	8001230 <_isatty>
 8007adc:	1c43      	adds	r3, r0, #1
 8007ade:	d102      	bne.n	8007ae6 <_isatty_r+0x1a>
 8007ae0:	682b      	ldr	r3, [r5, #0]
 8007ae2:	b103      	cbz	r3, 8007ae6 <_isatty_r+0x1a>
 8007ae4:	6023      	str	r3, [r4, #0]
 8007ae6:	bd38      	pop	{r3, r4, r5, pc}
 8007ae8:	20000414 	.word	0x20000414

08007aec <abort>:
 8007aec:	b508      	push	{r3, lr}
 8007aee:	2006      	movs	r0, #6
 8007af0:	f000 f82c 	bl	8007b4c <raise>
 8007af4:	2001      	movs	r0, #1
 8007af6:	f7f9 fb3b 	bl	8001170 <_exit>

08007afa <_raise_r>:
 8007afa:	291f      	cmp	r1, #31
 8007afc:	b538      	push	{r3, r4, r5, lr}
 8007afe:	4605      	mov	r5, r0
 8007b00:	460c      	mov	r4, r1
 8007b02:	d904      	bls.n	8007b0e <_raise_r+0x14>
 8007b04:	2316      	movs	r3, #22
 8007b06:	6003      	str	r3, [r0, #0]
 8007b08:	f04f 30ff 	mov.w	r0, #4294967295
 8007b0c:	bd38      	pop	{r3, r4, r5, pc}
 8007b0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007b10:	b112      	cbz	r2, 8007b18 <_raise_r+0x1e>
 8007b12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007b16:	b94b      	cbnz	r3, 8007b2c <_raise_r+0x32>
 8007b18:	4628      	mov	r0, r5
 8007b1a:	f000 f831 	bl	8007b80 <_getpid_r>
 8007b1e:	4622      	mov	r2, r4
 8007b20:	4601      	mov	r1, r0
 8007b22:	4628      	mov	r0, r5
 8007b24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007b28:	f000 b818 	b.w	8007b5c <_kill_r>
 8007b2c:	2b01      	cmp	r3, #1
 8007b2e:	d00a      	beq.n	8007b46 <_raise_r+0x4c>
 8007b30:	1c59      	adds	r1, r3, #1
 8007b32:	d103      	bne.n	8007b3c <_raise_r+0x42>
 8007b34:	2316      	movs	r3, #22
 8007b36:	6003      	str	r3, [r0, #0]
 8007b38:	2001      	movs	r0, #1
 8007b3a:	e7e7      	b.n	8007b0c <_raise_r+0x12>
 8007b3c:	2100      	movs	r1, #0
 8007b3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007b42:	4620      	mov	r0, r4
 8007b44:	4798      	blx	r3
 8007b46:	2000      	movs	r0, #0
 8007b48:	e7e0      	b.n	8007b0c <_raise_r+0x12>
	...

08007b4c <raise>:
 8007b4c:	4b02      	ldr	r3, [pc, #8]	@ (8007b58 <raise+0xc>)
 8007b4e:	4601      	mov	r1, r0
 8007b50:	6818      	ldr	r0, [r3, #0]
 8007b52:	f7ff bfd2 	b.w	8007afa <_raise_r>
 8007b56:	bf00      	nop
 8007b58:	20000018 	.word	0x20000018

08007b5c <_kill_r>:
 8007b5c:	b538      	push	{r3, r4, r5, lr}
 8007b5e:	4d07      	ldr	r5, [pc, #28]	@ (8007b7c <_kill_r+0x20>)
 8007b60:	2300      	movs	r3, #0
 8007b62:	4604      	mov	r4, r0
 8007b64:	4608      	mov	r0, r1
 8007b66:	4611      	mov	r1, r2
 8007b68:	602b      	str	r3, [r5, #0]
 8007b6a:	f7f9 faf1 	bl	8001150 <_kill>
 8007b6e:	1c43      	adds	r3, r0, #1
 8007b70:	d102      	bne.n	8007b78 <_kill_r+0x1c>
 8007b72:	682b      	ldr	r3, [r5, #0]
 8007b74:	b103      	cbz	r3, 8007b78 <_kill_r+0x1c>
 8007b76:	6023      	str	r3, [r4, #0]
 8007b78:	bd38      	pop	{r3, r4, r5, pc}
 8007b7a:	bf00      	nop
 8007b7c:	20000414 	.word	0x20000414

08007b80 <_getpid_r>:
 8007b80:	f7f9 bade 	b.w	8001140 <_getpid>

08007b84 <_init>:
 8007b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b86:	bf00      	nop
 8007b88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b8a:	bc08      	pop	{r3}
 8007b8c:	469e      	mov	lr, r3
 8007b8e:	4770      	bx	lr

08007b90 <_fini>:
 8007b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b92:	bf00      	nop
 8007b94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b96:	bc08      	pop	{r3}
 8007b98:	469e      	mov	lr, r3
 8007b9a:	4770      	bx	lr
