
LM35_LAB.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007bbc  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003e0  08007d60  08007d60  00008d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008140  08008140  0000a1d4  2**0
                  CONTENTS
  4 .ARM          00000008  08008140  08008140  00009140  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008148  08008148  0000a1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008148  08008148  00009148  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800814c  0800814c  0000914c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  08008150  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000a1d4  2**0
                  CONTENTS
 10 .bss          000002a8  200001d4  200001d4  0000a1d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000047c  2000047c  0000a1d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000a1d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c577  00000000  00000000  0000a204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001ce7  00000000  00000000  0001677b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000998  00000000  00000000  00018468  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000759  00000000  00000000  00018e00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002164c  00000000  00000000  00019559  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000da91  00000000  00000000  0003aba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cae53  00000000  00000000  00048636  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00113489  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000036f8  00000000  00000000  001134cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000064  00000000  00000000  00116bc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007d44 	.word	0x08007d44

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08007d44 	.word	0x08007d44

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <HAL_ADC_ConvCpltCallback>:
static void MX_ADC1_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_ADC2_Init(void);
/* USER CODE BEGIN PFP */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	6078      	str	r0, [r7, #4]
	value = HAL_ADC_GetValue(&hadc1);
 8000c60:	481d      	ldr	r0, [pc, #116]	@ (8000cd8 <HAL_ADC_ConvCpltCallback+0x80>)
 8000c62:	f001 f825 	bl	8001cb0 <HAL_ADC_GetValue>
 8000c66:	4603      	mov	r3, r0
 8000c68:	b29a      	uxth	r2, r3
 8000c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x84>)
 8000c6c:	801a      	strh	r2, [r3, #0]
	value_2 = HAL_ADC_GetValue(&hadc2);
 8000c6e:	481c      	ldr	r0, [pc, #112]	@ (8000ce0 <HAL_ADC_ConvCpltCallback+0x88>)
 8000c70:	f001 f81e 	bl	8001cb0 <HAL_ADC_GetValue>
 8000c74:	4603      	mov	r3, r0
 8000c76:	b29a      	uxth	r2, r3
 8000c78:	4b1a      	ldr	r3, [pc, #104]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000c7a:	801a      	strh	r2, [r3, #0]
	temp = value * 0.08;
 8000c7c:	4b17      	ldr	r3, [pc, #92]	@ (8000cdc <HAL_ADC_ConvCpltCallback+0x84>)
 8000c7e:	881b      	ldrh	r3, [r3, #0]
 8000c80:	4618      	mov	r0, r3
 8000c82:	f7ff fc57 	bl	8000534 <__aeabi_i2d>
 8000c86:	a312      	add	r3, pc, #72	@ (adr r3, 8000cd0 <HAL_ADC_ConvCpltCallback+0x78>)
 8000c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000c8c:	f7ff fcbc 	bl	8000608 <__aeabi_dmul>
 8000c90:	4602      	mov	r2, r0
 8000c92:	460b      	mov	r3, r1
 8000c94:	4610      	mov	r0, r2
 8000c96:	4619      	mov	r1, r3
 8000c98:	f7ff ff8e 	bl	8000bb8 <__aeabi_d2f>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	4a12      	ldr	r2, [pc, #72]	@ (8000ce8 <HAL_ADC_ConvCpltCallback+0x90>)
 8000ca0:	6013      	str	r3, [r2, #0]
	temp2 = value_2 * 0.08;
 8000ca2:	4b10      	ldr	r3, [pc, #64]	@ (8000ce4 <HAL_ADC_ConvCpltCallback+0x8c>)
 8000ca4:	881b      	ldrh	r3, [r3, #0]
 8000ca6:	4618      	mov	r0, r3
 8000ca8:	f7ff fc44 	bl	8000534 <__aeabi_i2d>
 8000cac:	a308      	add	r3, pc, #32	@ (adr r3, 8000cd0 <HAL_ADC_ConvCpltCallback+0x78>)
 8000cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cb2:	f7ff fca9 	bl	8000608 <__aeabi_dmul>
 8000cb6:	4602      	mov	r2, r0
 8000cb8:	460b      	mov	r3, r1
 8000cba:	4610      	mov	r0, r2
 8000cbc:	4619      	mov	r1, r3
 8000cbe:	f7ff ff7b 	bl	8000bb8 <__aeabi_d2f>
 8000cc2:	4603      	mov	r3, r0
 8000cc4:	4a09      	ldr	r2, [pc, #36]	@ (8000cec <HAL_ADC_ConvCpltCallback+0x94>)
 8000cc6:	6013      	str	r3, [r2, #0]
	//printf("Temperature = %.2f°C\n\r", temp);
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	47ae147b 	.word	0x47ae147b
 8000cd4:	3fb47ae1 	.word	0x3fb47ae1
 8000cd8:	200001f0 	.word	0x200001f0
 8000cdc:	20000318 	.word	0x20000318
 8000ce0:	20000240 	.word	0x20000240
 8000ce4:	2000031a 	.word	0x2000031a
 8000ce8:	2000031c 	.word	0x2000031c
 8000cec:	20000320 	.word	0x20000320

08000cf0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cf4:	f000 fc04 	bl	8001500 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cf8:	f000 f836 	bl	8000d68 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cfc:	f000 f990 	bl	8001020 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d00:	f000 f890 	bl	8000e24 <MX_ADC1_Init>
  MX_USART2_UART_Init();
 8000d04:	f000 f95c 	bl	8000fc0 <MX_USART2_UART_Init>
  MX_ADC2_Init();
 8000d08:	f000 f8fc 	bl	8000f04 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */
  //HAL_ADC_Start(&hadc1);
  HAL_ADC_Start_IT(&hadc1);
 8000d0c:	4810      	ldr	r0, [pc, #64]	@ (8000d50 <main+0x60>)
 8000d0e:	f000 fe8f 	bl	8001a30 <HAL_ADC_Start_IT>
  HAL_ADC_Start_IT(&hadc2);
 8000d12:	4810      	ldr	r0, [pc, #64]	@ (8000d54 <main+0x64>)
 8000d14:	f000 fe8c 	bl	8001a30 <HAL_ADC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_ADC_ConvCpltCallback(&hadc1);
 8000d18:	480d      	ldr	r0, [pc, #52]	@ (8000d50 <main+0x60>)
 8000d1a:	f7ff ff9d 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
	  printf("Temperature 1 = %.2f°C\n\r", temp);
 8000d1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000d58 <main+0x68>)
 8000d20:	681b      	ldr	r3, [r3, #0]
 8000d22:	4618      	mov	r0, r3
 8000d24:	f7ff fc18 	bl	8000558 <__aeabi_f2d>
 8000d28:	4602      	mov	r2, r0
 8000d2a:	460b      	mov	r3, r1
 8000d2c:	480b      	ldr	r0, [pc, #44]	@ (8000d5c <main+0x6c>)
 8000d2e:	f005 f88f 	bl	8005e50 <iprintf>
	  printf("Temperature 2 = %.2f°C\n\r", temp2);
 8000d32:	4b0b      	ldr	r3, [pc, #44]	@ (8000d60 <main+0x70>)
 8000d34:	681b      	ldr	r3, [r3, #0]
 8000d36:	4618      	mov	r0, r3
 8000d38:	f7ff fc0e 	bl	8000558 <__aeabi_f2d>
 8000d3c:	4602      	mov	r2, r0
 8000d3e:	460b      	mov	r3, r1
 8000d40:	4808      	ldr	r0, [pc, #32]	@ (8000d64 <main+0x74>)
 8000d42:	f005 f885 	bl	8005e50 <iprintf>
    /* USER CODE BEGIN 3 */
	  HAL_Delay(100);
 8000d46:	2064      	movs	r0, #100	@ 0x64
 8000d48:	f000 fc40 	bl	80015cc <HAL_Delay>
	  HAL_ADC_ConvCpltCallback(&hadc1);
 8000d4c:	bf00      	nop
 8000d4e:	e7e3      	b.n	8000d18 <main+0x28>
 8000d50:	200001f0 	.word	0x200001f0
 8000d54:	20000240 	.word	0x20000240
 8000d58:	2000031c 	.word	0x2000031c
 8000d5c:	08007d60 	.word	0x08007d60
 8000d60:	20000320 	.word	0x20000320
 8000d64:	08007d7c 	.word	0x08007d7c

08000d68 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b0a6      	sub	sp, #152	@ 0x98
 8000d6c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d6e:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000d72:	2228      	movs	r2, #40	@ 0x28
 8000d74:	2100      	movs	r1, #0
 8000d76:	4618      	mov	r0, r3
 8000d78:	f005 f8bf 	bl	8005efa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d7c:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000d80:	2200      	movs	r2, #0
 8000d82:	601a      	str	r2, [r3, #0]
 8000d84:	605a      	str	r2, [r3, #4]
 8000d86:	609a      	str	r2, [r3, #8]
 8000d88:	60da      	str	r2, [r3, #12]
 8000d8a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d8c:	1d3b      	adds	r3, r7, #4
 8000d8e:	2258      	movs	r2, #88	@ 0x58
 8000d90:	2100      	movs	r1, #0
 8000d92:	4618      	mov	r0, r3
 8000d94:	f005 f8b1 	bl	8005efa <memset>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d98:	2302      	movs	r3, #2
 8000d9a:	673b      	str	r3, [r7, #112]	@ 0x70
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d9c:	2301      	movs	r3, #1
 8000d9e:	67fb      	str	r3, [r7, #124]	@ 0x7c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000da0:	2310      	movs	r3, #16
 8000da2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000da6:	2302      	movs	r3, #2
 8000da8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dac:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000db0:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000db4:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000db8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  RCC_OscInitStruct.PLL.PREDIV = RCC_PREDIV_DIV1;
 8000dbc:	2300      	movs	r3, #0
 8000dbe:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dc2:	f107 0370 	add.w	r3, r7, #112	@ 0x70
 8000dc6:	4618      	mov	r0, r3
 8000dc8:	f002 f9d0 	bl	800316c <HAL_RCC_OscConfig>
 8000dcc:	4603      	mov	r3, r0
 8000dce:	2b00      	cmp	r3, #0
 8000dd0:	d001      	beq.n	8000dd6 <SystemClock_Config+0x6e>
  {
    Error_Handler();
 8000dd2:	f000 f95b 	bl	800108c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dd6:	230f      	movs	r3, #15
 8000dd8:	65fb      	str	r3, [r7, #92]	@ 0x5c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dda:	2302      	movs	r3, #2
 8000ddc:	663b      	str	r3, [r7, #96]	@ 0x60
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dde:	2300      	movs	r3, #0
 8000de0:	667b      	str	r3, [r7, #100]	@ 0x64
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000de2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000de6:	66bb      	str	r3, [r7, #104]	@ 0x68
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000de8:	2300      	movs	r3, #0
 8000dea:	66fb      	str	r3, [r7, #108]	@ 0x6c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dec:	f107 035c 	add.w	r3, r7, #92	@ 0x5c
 8000df0:	2102      	movs	r1, #2
 8000df2:	4618      	mov	r0, r3
 8000df4:	f003 fa0e 	bl	8004214 <HAL_RCC_ClockConfig>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000dfe:	f000 f945 	bl	800108c <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000e02:	2302      	movs	r3, #2
 8000e04:	607b      	str	r3, [r7, #4]
  PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e0a:	1d3b      	adds	r3, r7, #4
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f003 fc21 	bl	8004654 <HAL_RCCEx_PeriphCLKConfig>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000e18:	f000 f938 	bl	800108c <Error_Handler>
  }
}
 8000e1c:	bf00      	nop
 8000e1e:	3798      	adds	r7, #152	@ 0x98
 8000e20:	46bd      	mov	sp, r7
 8000e22:	bd80      	pop	{r7, pc}

08000e24 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b08a      	sub	sp, #40	@ 0x28
 8000e28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000e2a:	f107 031c 	add.w	r3, r7, #28
 8000e2e:	2200      	movs	r2, #0
 8000e30:	601a      	str	r2, [r3, #0]
 8000e32:	605a      	str	r2, [r3, #4]
 8000e34:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000e36:	1d3b      	adds	r3, r7, #4
 8000e38:	2200      	movs	r2, #0
 8000e3a:	601a      	str	r2, [r3, #0]
 8000e3c:	605a      	str	r2, [r3, #4]
 8000e3e:	609a      	str	r2, [r3, #8]
 8000e40:	60da      	str	r2, [r3, #12]
 8000e42:	611a      	str	r2, [r3, #16]
 8000e44:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000e46:	4b2e      	ldr	r3, [pc, #184]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e48:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000e4c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e4e:	4b2c      	ldr	r3, [pc, #176]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e50:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000e54:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e56:	4b2a      	ldr	r3, [pc, #168]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000e5c:	4b28      	ldr	r3, [pc, #160]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000e62:	4b27      	ldr	r3, [pc, #156]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e64:	2201      	movs	r2, #1
 8000e66:	765a      	strb	r2, [r3, #25]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e68:	4b25      	ldr	r3, [pc, #148]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e70:	4b23      	ldr	r3, [pc, #140]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e72:	2200      	movs	r2, #0
 8000e74:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e76:	4b22      	ldr	r3, [pc, #136]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e78:	2201      	movs	r2, #1
 8000e7a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e82:	4b1f      	ldr	r3, [pc, #124]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e84:	2201      	movs	r2, #1
 8000e86:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e88:	4b1d      	ldr	r3, [pc, #116]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e90:	4b1b      	ldr	r3, [pc, #108]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e92:	2204      	movs	r2, #4
 8000e94:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000e96:	4b1a      	ldr	r3, [pc, #104]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000e9c:	4b18      	ldr	r3, [pc, #96]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ea2:	4817      	ldr	r0, [pc, #92]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000ea4:	f000 fbca 	bl	800163c <HAL_ADC_Init>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 8000eae:	f000 f8ed 	bl	800108c <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000eb6:	f107 031c 	add.w	r3, r7, #28
 8000eba:	4619      	mov	r1, r3
 8000ebc:	4810      	ldr	r0, [pc, #64]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000ebe:	f001 fcfd 	bl	80028bc <HAL_ADCEx_MultiModeConfigChannel>
 8000ec2:	4603      	mov	r3, r0
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d001      	beq.n	8000ecc <MX_ADC1_Init+0xa8>
  {
    Error_Handler();
 8000ec8:	f000 f8e0 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000ecc:	2301      	movs	r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000ed0:	2301      	movs	r3, #1
 8000ed2:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000ed8:	2307      	movs	r3, #7
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000ee4:	1d3b      	adds	r3, r7, #4
 8000ee6:	4619      	mov	r1, r3
 8000ee8:	4805      	ldr	r0, [pc, #20]	@ (8000f00 <MX_ADC1_Init+0xdc>)
 8000eea:	f001 f9fd 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	2b00      	cmp	r3, #0
 8000ef2:	d001      	beq.n	8000ef8 <MX_ADC1_Init+0xd4>
  {
    Error_Handler();
 8000ef4:	f000 f8ca 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ef8:	bf00      	nop
 8000efa:	3728      	adds	r7, #40	@ 0x28
 8000efc:	46bd      	mov	sp, r7
 8000efe:	bd80      	pop	{r7, pc}
 8000f00:	200001f0 	.word	0x200001f0

08000f04 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8000f04:	b580      	push	{r7, lr}
 8000f06:	b086      	sub	sp, #24
 8000f08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f0a:	463b      	mov	r3, r7
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	601a      	str	r2, [r3, #0]
 8000f10:	605a      	str	r2, [r3, #4]
 8000f12:	609a      	str	r2, [r3, #8]
 8000f14:	60da      	str	r2, [r3, #12]
 8000f16:	611a      	str	r2, [r3, #16]
 8000f18:	615a      	str	r2, [r3, #20]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000f1a:	4b27      	ldr	r3, [pc, #156]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f1c:	4a27      	ldr	r2, [pc, #156]	@ (8000fbc <MX_ADC2_Init+0xb8>)
 8000f1e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f20:	4b25      	ldr	r3, [pc, #148]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f22:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000f26:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000f28:	4b23      	ldr	r3, [pc, #140]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f2e:	4b22      	ldr	r3, [pc, #136]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000f34:	4b20      	ldr	r3, [pc, #128]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f36:	2201      	movs	r2, #1
 8000f38:	765a      	strb	r2, [r3, #25]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000f3a:	4b1f      	ldr	r3, [pc, #124]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f42:	4b1d      	ldr	r3, [pc, #116]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f48:	4b1b      	ldr	r3, [pc, #108]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f4a:	2201      	movs	r2, #1
 8000f4c:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f4e:	4b1a      	ldr	r3, [pc, #104]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8000f54:	4b18      	ldr	r3, [pc, #96]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f56:	2201      	movs	r2, #1
 8000f58:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000f5a:	4b17      	ldr	r3, [pc, #92]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f5c:	2200      	movs	r2, #0
 8000f5e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f62:	4b15      	ldr	r3, [pc, #84]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f64:	2204      	movs	r2, #4
 8000f66:	615a      	str	r2, [r3, #20]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000f68:	4b13      	ldr	r3, [pc, #76]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f6a:	2200      	movs	r2, #0
 8000f6c:	761a      	strb	r2, [r3, #24]
  hadc2.Init.Overrun = ADC_OVR_DATA_OVERWRITTEN;
 8000f6e:	4b12      	ldr	r3, [pc, #72]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f70:	2200      	movs	r2, #0
 8000f72:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000f74:	4810      	ldr	r0, [pc, #64]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000f76:	f000 fb61 	bl	800163c <HAL_ADC_Init>
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d001      	beq.n	8000f84 <MX_ADC2_Init+0x80>
  {
    Error_Handler();
 8000f80:	f000 f884 	bl	800108c <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f84:	2302      	movs	r3, #2
 8000f86:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	607b      	str	r3, [r7, #4]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	60fb      	str	r3, [r7, #12]
  sConfig.SamplingTime = ADC_SAMPLETIME_601CYCLES_5;
 8000f90:	2307      	movs	r3, #7
 8000f92:	60bb      	str	r3, [r7, #8]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000f94:	2300      	movs	r3, #0
 8000f96:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000f9c:	463b      	mov	r3, r7
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	4805      	ldr	r0, [pc, #20]	@ (8000fb8 <MX_ADC2_Init+0xb4>)
 8000fa2:	f001 f9a1 	bl	80022e8 <HAL_ADC_ConfigChannel>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC2_Init+0xac>
  {
    Error_Handler();
 8000fac:	f000 f86e 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000fb0:	bf00      	nop
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20000240 	.word	0x20000240
 8000fbc:	50000100 	.word	0x50000100

08000fc0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000fc0:	b580      	push	{r7, lr}
 8000fc2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000fc4:	4b14      	ldr	r3, [pc, #80]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000fc6:	4a15      	ldr	r2, [pc, #84]	@ (800101c <MX_USART2_UART_Init+0x5c>)
 8000fc8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 9600;
 8000fca:	4b13      	ldr	r3, [pc, #76]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000fcc:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 8000fd0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000fd2:	4b11      	ldr	r3, [pc, #68]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000fde:	4b0e      	ldr	r3, [pc, #56]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000fe4:	4b0c      	ldr	r3, [pc, #48]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000fe6:	220c      	movs	r2, #12
 8000fe8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000fea:	4b0b      	ldr	r3, [pc, #44]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000fec:	2200      	movs	r2, #0
 8000fee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ff0:	4b09      	ldr	r3, [pc, #36]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000ff2:	2200      	movs	r2, #0
 8000ff4:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000ff6:	4b08      	ldr	r3, [pc, #32]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000ff8:	2200      	movs	r2, #0
 8000ffa:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000ffc:	4b06      	ldr	r3, [pc, #24]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8000ffe:	2200      	movs	r2, #0
 8001000:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001002:	4805      	ldr	r0, [pc, #20]	@ (8001018 <MX_USART2_UART_Init+0x58>)
 8001004:	f003 fd44 	bl	8004a90 <HAL_UART_Init>
 8001008:	4603      	mov	r3, r0
 800100a:	2b00      	cmp	r3, #0
 800100c:	d001      	beq.n	8001012 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 800100e:	f000 f83d 	bl	800108c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001012:	bf00      	nop
 8001014:	bd80      	pop	{r7, pc}
 8001016:	bf00      	nop
 8001018:	20000290 	.word	0x20000290
 800101c:	40004400 	.word	0x40004400

08001020 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001026:	4b0f      	ldr	r3, [pc, #60]	@ (8001064 <MX_GPIO_Init+0x44>)
 8001028:	695b      	ldr	r3, [r3, #20]
 800102a:	4a0e      	ldr	r2, [pc, #56]	@ (8001064 <MX_GPIO_Init+0x44>)
 800102c:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001030:	6153      	str	r3, [r2, #20]
 8001032:	4b0c      	ldr	r3, [pc, #48]	@ (8001064 <MX_GPIO_Init+0x44>)
 8001034:	695b      	ldr	r3, [r3, #20]
 8001036:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800103a:	607b      	str	r3, [r7, #4]
 800103c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800103e:	4b09      	ldr	r3, [pc, #36]	@ (8001064 <MX_GPIO_Init+0x44>)
 8001040:	695b      	ldr	r3, [r3, #20]
 8001042:	4a08      	ldr	r2, [pc, #32]	@ (8001064 <MX_GPIO_Init+0x44>)
 8001044:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001048:	6153      	str	r3, [r2, #20]
 800104a:	4b06      	ldr	r3, [pc, #24]	@ (8001064 <MX_GPIO_Init+0x44>)
 800104c:	695b      	ldr	r3, [r3, #20]
 800104e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001052:	603b      	str	r3, [r7, #0]
 8001054:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001056:	bf00      	nop
 8001058:	370c      	adds	r7, #12
 800105a:	46bd      	mov	sp, r7
 800105c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop
 8001064:	40021000 	.word	0x40021000

08001068 <__io_putchar>:

/* USER CODE BEGIN 4 */
PRINTF2UART2
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 8001070:	1d39      	adds	r1, r7, #4
 8001072:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001076:	2201      	movs	r2, #1
 8001078:	4803      	ldr	r0, [pc, #12]	@ (8001088 <__io_putchar+0x20>)
 800107a:	f003 fd57 	bl	8004b2c <HAL_UART_Transmit>

  return ch;
 800107e:	687b      	ldr	r3, [r7, #4]
}
 8001080:	4618      	mov	r0, r3
 8001082:	3708      	adds	r7, #8
 8001084:	46bd      	mov	sp, r7
 8001086:	bd80      	pop	{r7, pc}
 8001088:	20000290 	.word	0x20000290

0800108c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800108c:	b480      	push	{r7}
 800108e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001090:	b672      	cpsid	i
}
 8001092:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001094:	bf00      	nop
 8001096:	e7fd      	b.n	8001094 <Error_Handler+0x8>

08001098 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001098:	b480      	push	{r7}
 800109a:	b083      	sub	sp, #12
 800109c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800109e:	4b0f      	ldr	r3, [pc, #60]	@ (80010dc <HAL_MspInit+0x44>)
 80010a0:	699b      	ldr	r3, [r3, #24]
 80010a2:	4a0e      	ldr	r2, [pc, #56]	@ (80010dc <HAL_MspInit+0x44>)
 80010a4:	f043 0301 	orr.w	r3, r3, #1
 80010a8:	6193      	str	r3, [r2, #24]
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <HAL_MspInit+0x44>)
 80010ac:	699b      	ldr	r3, [r3, #24]
 80010ae:	f003 0301 	and.w	r3, r3, #1
 80010b2:	607b      	str	r3, [r7, #4]
 80010b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010b6:	4b09      	ldr	r3, [pc, #36]	@ (80010dc <HAL_MspInit+0x44>)
 80010b8:	69db      	ldr	r3, [r3, #28]
 80010ba:	4a08      	ldr	r2, [pc, #32]	@ (80010dc <HAL_MspInit+0x44>)
 80010bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010c0:	61d3      	str	r3, [r2, #28]
 80010c2:	4b06      	ldr	r3, [pc, #24]	@ (80010dc <HAL_MspInit+0x44>)
 80010c4:	69db      	ldr	r3, [r3, #28]
 80010c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010ca:	603b      	str	r3, [r7, #0]
 80010cc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010ce:	bf00      	nop
 80010d0:	370c      	adds	r7, #12
 80010d2:	46bd      	mov	sp, r7
 80010d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d8:	4770      	bx	lr
 80010da:	bf00      	nop
 80010dc:	40021000 	.word	0x40021000

080010e0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	b08c      	sub	sp, #48	@ 0x30
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010e8:	f107 031c 	add.w	r3, r7, #28
 80010ec:	2200      	movs	r2, #0
 80010ee:	601a      	str	r2, [r3, #0]
 80010f0:	605a      	str	r2, [r3, #4]
 80010f2:	609a      	str	r2, [r3, #8]
 80010f4:	60da      	str	r2, [r3, #12]
 80010f6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001100:	d136      	bne.n	8001170 <HAL_ADC_MspInit+0x90>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001102:	4b3b      	ldr	r3, [pc, #236]	@ (80011f0 <HAL_ADC_MspInit+0x110>)
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	3301      	adds	r3, #1
 8001108:	4a39      	ldr	r2, [pc, #228]	@ (80011f0 <HAL_ADC_MspInit+0x110>)
 800110a:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 800110c:	4b38      	ldr	r3, [pc, #224]	@ (80011f0 <HAL_ADC_MspInit+0x110>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	2b01      	cmp	r3, #1
 8001112:	d10b      	bne.n	800112c <HAL_ADC_MspInit+0x4c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001114:	4b37      	ldr	r3, [pc, #220]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 8001116:	695b      	ldr	r3, [r3, #20]
 8001118:	4a36      	ldr	r2, [pc, #216]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 800111a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800111e:	6153      	str	r3, [r2, #20]
 8001120:	4b34      	ldr	r3, [pc, #208]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 8001122:	695b      	ldr	r3, [r3, #20]
 8001124:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001128:	61bb      	str	r3, [r7, #24]
 800112a:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800112c:	4b31      	ldr	r3, [pc, #196]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 800112e:	695b      	ldr	r3, [r3, #20]
 8001130:	4a30      	ldr	r2, [pc, #192]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 8001132:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001136:	6153      	str	r3, [r2, #20]
 8001138:	4b2e      	ldr	r3, [pc, #184]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 800113a:	695b      	ldr	r3, [r3, #20]
 800113c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001140:	617b      	str	r3, [r7, #20]
 8001142:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001144:	2301      	movs	r3, #1
 8001146:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001148:	2303      	movs	r3, #3
 800114a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800114c:	2300      	movs	r3, #0
 800114e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4619      	mov	r1, r3
 8001156:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800115a:	f001 fe7d 	bl	8002e58 <HAL_GPIO_Init>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 800115e:	2200      	movs	r2, #0
 8001160:	2100      	movs	r1, #0
 8001162:	2012      	movs	r0, #18
 8001164:	f001 fe41 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8001168:	2012      	movs	r0, #18
 800116a:	f001 fe5a 	bl	8002e22 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 800116e:	e03a      	b.n	80011e6 <HAL_ADC_MspInit+0x106>
  else if(hadc->Instance==ADC2)
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4a20      	ldr	r2, [pc, #128]	@ (80011f8 <HAL_ADC_MspInit+0x118>)
 8001176:	4293      	cmp	r3, r2
 8001178:	d135      	bne.n	80011e6 <HAL_ADC_MspInit+0x106>
    HAL_RCC_ADC12_CLK_ENABLED++;
 800117a:	4b1d      	ldr	r3, [pc, #116]	@ (80011f0 <HAL_ADC_MspInit+0x110>)
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	3301      	adds	r3, #1
 8001180:	4a1b      	ldr	r2, [pc, #108]	@ (80011f0 <HAL_ADC_MspInit+0x110>)
 8001182:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001184:	4b1a      	ldr	r3, [pc, #104]	@ (80011f0 <HAL_ADC_MspInit+0x110>)
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	2b01      	cmp	r3, #1
 800118a:	d10b      	bne.n	80011a4 <HAL_ADC_MspInit+0xc4>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800118c:	4b19      	ldr	r3, [pc, #100]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 800118e:	695b      	ldr	r3, [r3, #20]
 8001190:	4a18      	ldr	r2, [pc, #96]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 8001192:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001196:	6153      	str	r3, [r2, #20]
 8001198:	4b16      	ldr	r3, [pc, #88]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 800119a:	695b      	ldr	r3, [r3, #20]
 800119c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80011a0:	613b      	str	r3, [r7, #16]
 80011a2:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80011a4:	4b13      	ldr	r3, [pc, #76]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 80011a6:	695b      	ldr	r3, [r3, #20]
 80011a8:	4a12      	ldr	r2, [pc, #72]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 80011aa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80011ae:	6153      	str	r3, [r2, #20]
 80011b0:	4b10      	ldr	r3, [pc, #64]	@ (80011f4 <HAL_ADC_MspInit+0x114>)
 80011b2:	695b      	ldr	r3, [r3, #20]
 80011b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80011b8:	60fb      	str	r3, [r7, #12]
 80011ba:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80011bc:	2320      	movs	r3, #32
 80011be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c4:	2300      	movs	r3, #0
 80011c6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011c8:	f107 031c 	add.w	r3, r7, #28
 80011cc:	4619      	mov	r1, r3
 80011ce:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80011d2:	f001 fe41 	bl	8002e58 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 80011d6:	2200      	movs	r2, #0
 80011d8:	2100      	movs	r1, #0
 80011da:	2012      	movs	r0, #18
 80011dc:	f001 fe05 	bl	8002dea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 80011e0:	2012      	movs	r0, #18
 80011e2:	f001 fe1e 	bl	8002e22 <HAL_NVIC_EnableIRQ>
}
 80011e6:	bf00      	nop
 80011e8:	3730      	adds	r7, #48	@ 0x30
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bd80      	pop	{r7, pc}
 80011ee:	bf00      	nop
 80011f0:	20000324 	.word	0x20000324
 80011f4:	40021000 	.word	0x40021000
 80011f8:	50000100 	.word	0x50000100

080011fc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b08a      	sub	sp, #40	@ 0x28
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001204:	f107 0314 	add.w	r3, r7, #20
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
 800120c:	605a      	str	r2, [r3, #4]
 800120e:	609a      	str	r2, [r3, #8]
 8001210:	60da      	str	r2, [r3, #12]
 8001212:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	4a17      	ldr	r2, [pc, #92]	@ (8001278 <HAL_UART_MspInit+0x7c>)
 800121a:	4293      	cmp	r3, r2
 800121c:	d128      	bne.n	8001270 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800121e:	4b17      	ldr	r3, [pc, #92]	@ (800127c <HAL_UART_MspInit+0x80>)
 8001220:	69db      	ldr	r3, [r3, #28]
 8001222:	4a16      	ldr	r2, [pc, #88]	@ (800127c <HAL_UART_MspInit+0x80>)
 8001224:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001228:	61d3      	str	r3, [r2, #28]
 800122a:	4b14      	ldr	r3, [pc, #80]	@ (800127c <HAL_UART_MspInit+0x80>)
 800122c:	69db      	ldr	r3, [r3, #28]
 800122e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001232:	613b      	str	r3, [r7, #16]
 8001234:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001236:	4b11      	ldr	r3, [pc, #68]	@ (800127c <HAL_UART_MspInit+0x80>)
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	4a10      	ldr	r2, [pc, #64]	@ (800127c <HAL_UART_MspInit+0x80>)
 800123c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001240:	6153      	str	r3, [r2, #20]
 8001242:	4b0e      	ldr	r3, [pc, #56]	@ (800127c <HAL_UART_MspInit+0x80>)
 8001244:	695b      	ldr	r3, [r3, #20]
 8001246:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800124a:	60fb      	str	r3, [r7, #12]
 800124c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800124e:	230c      	movs	r3, #12
 8001250:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001252:	2302      	movs	r3, #2
 8001254:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800125a:	2303      	movs	r3, #3
 800125c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800125e:	2307      	movs	r3, #7
 8001260:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001262:	f107 0314 	add.w	r3, r7, #20
 8001266:	4619      	mov	r1, r3
 8001268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800126c:	f001 fdf4 	bl	8002e58 <HAL_GPIO_Init>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 8001270:	bf00      	nop
 8001272:	3728      	adds	r7, #40	@ 0x28
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	40004400 	.word	0x40004400
 800127c:	40021000 	.word	0x40021000

08001280 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001280:	b480      	push	{r7}
 8001282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001284:	bf00      	nop
 8001286:	e7fd      	b.n	8001284 <NMI_Handler+0x4>

08001288 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001288:	b480      	push	{r7}
 800128a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800128c:	bf00      	nop
 800128e:	e7fd      	b.n	800128c <HardFault_Handler+0x4>

08001290 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001290:	b480      	push	{r7}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001294:	bf00      	nop
 8001296:	e7fd      	b.n	8001294 <MemManage_Handler+0x4>

08001298 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001298:	b480      	push	{r7}
 800129a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800129c:	bf00      	nop
 800129e:	e7fd      	b.n	800129c <BusFault_Handler+0x4>

080012a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012a0:	b480      	push	{r7}
 80012a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012a4:	bf00      	nop
 80012a6:	e7fd      	b.n	80012a4 <UsageFault_Handler+0x4>

080012a8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012a8:	b480      	push	{r7}
 80012aa:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012ac:	bf00      	nop
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr

080012b6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012b6:	b480      	push	{r7}
 80012b8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012ba:	bf00      	nop
 80012bc:	46bd      	mov	sp, r7
 80012be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c2:	4770      	bx	lr

080012c4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012c8:	bf00      	nop
 80012ca:	46bd      	mov	sp, r7
 80012cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d0:	4770      	bx	lr

080012d2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80012d2:	b580      	push	{r7, lr}
 80012d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80012d6:	f000 f959 	bl	800158c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 80012e4:	4803      	ldr	r0, [pc, #12]	@ (80012f4 <ADC1_2_IRQHandler+0x14>)
 80012e6:	f000 fcf1 	bl	8001ccc <HAL_ADC_IRQHandler>
  HAL_ADC_IRQHandler(&hadc2);
 80012ea:	4803      	ldr	r0, [pc, #12]	@ (80012f8 <ADC1_2_IRQHandler+0x18>)
 80012ec:	f000 fcee 	bl	8001ccc <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 80012f0:	bf00      	nop
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	200001f0 	.word	0x200001f0
 80012f8:	20000240 	.word	0x20000240

080012fc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80012fc:	b480      	push	{r7}
 80012fe:	af00      	add	r7, sp, #0
  return 1;
 8001300:	2301      	movs	r3, #1
}
 8001302:	4618      	mov	r0, r3
 8001304:	46bd      	mov	sp, r7
 8001306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800130a:	4770      	bx	lr

0800130c <_kill>:

int _kill(int pid, int sig)
{
 800130c:	b580      	push	{r7, lr}
 800130e:	b082      	sub	sp, #8
 8001310:	af00      	add	r7, sp, #0
 8001312:	6078      	str	r0, [r7, #4]
 8001314:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001316:	f004 fe43 	bl	8005fa0 <__errno>
 800131a:	4603      	mov	r3, r0
 800131c:	2216      	movs	r2, #22
 800131e:	601a      	str	r2, [r3, #0]
  return -1;
 8001320:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001324:	4618      	mov	r0, r3
 8001326:	3708      	adds	r7, #8
 8001328:	46bd      	mov	sp, r7
 800132a:	bd80      	pop	{r7, pc}

0800132c <_exit>:

void _exit (int status)
{
 800132c:	b580      	push	{r7, lr}
 800132e:	b082      	sub	sp, #8
 8001330:	af00      	add	r7, sp, #0
 8001332:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001334:	f04f 31ff 	mov.w	r1, #4294967295
 8001338:	6878      	ldr	r0, [r7, #4]
 800133a:	f7ff ffe7 	bl	800130c <_kill>
  while (1) {}    /* Make sure we hang here */
 800133e:	bf00      	nop
 8001340:	e7fd      	b.n	800133e <_exit+0x12>

08001342 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001342:	b580      	push	{r7, lr}
 8001344:	b086      	sub	sp, #24
 8001346:	af00      	add	r7, sp, #0
 8001348:	60f8      	str	r0, [r7, #12]
 800134a:	60b9      	str	r1, [r7, #8]
 800134c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800134e:	2300      	movs	r3, #0
 8001350:	617b      	str	r3, [r7, #20]
 8001352:	e00a      	b.n	800136a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001354:	f3af 8000 	nop.w
 8001358:	4601      	mov	r1, r0
 800135a:	68bb      	ldr	r3, [r7, #8]
 800135c:	1c5a      	adds	r2, r3, #1
 800135e:	60ba      	str	r2, [r7, #8]
 8001360:	b2ca      	uxtb	r2, r1
 8001362:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001364:	697b      	ldr	r3, [r7, #20]
 8001366:	3301      	adds	r3, #1
 8001368:	617b      	str	r3, [r7, #20]
 800136a:	697a      	ldr	r2, [r7, #20]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	429a      	cmp	r2, r3
 8001370:	dbf0      	blt.n	8001354 <_read+0x12>
  }

  return len;
 8001372:	687b      	ldr	r3, [r7, #4]
}
 8001374:	4618      	mov	r0, r3
 8001376:	3718      	adds	r7, #24
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800137c:	b580      	push	{r7, lr}
 800137e:	b086      	sub	sp, #24
 8001380:	af00      	add	r7, sp, #0
 8001382:	60f8      	str	r0, [r7, #12]
 8001384:	60b9      	str	r1, [r7, #8]
 8001386:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001388:	2300      	movs	r3, #0
 800138a:	617b      	str	r3, [r7, #20]
 800138c:	e009      	b.n	80013a2 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800138e:	68bb      	ldr	r3, [r7, #8]
 8001390:	1c5a      	adds	r2, r3, #1
 8001392:	60ba      	str	r2, [r7, #8]
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	4618      	mov	r0, r3
 8001398:	f7ff fe66 	bl	8001068 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800139c:	697b      	ldr	r3, [r7, #20]
 800139e:	3301      	adds	r3, #1
 80013a0:	617b      	str	r3, [r7, #20]
 80013a2:	697a      	ldr	r2, [r7, #20]
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	429a      	cmp	r2, r3
 80013a8:	dbf1      	blt.n	800138e <_write+0x12>
  }
  return len;
 80013aa:	687b      	ldr	r3, [r7, #4]
}
 80013ac:	4618      	mov	r0, r3
 80013ae:	3718      	adds	r7, #24
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bd80      	pop	{r7, pc}

080013b4 <_close>:

int _close(int file)
{
 80013b4:	b480      	push	{r7}
 80013b6:	b083      	sub	sp, #12
 80013b8:	af00      	add	r7, sp, #0
 80013ba:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80013bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013c0:	4618      	mov	r0, r3
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr

080013cc <_fstat>:


int _fstat(int file, struct stat *st)
{
 80013cc:	b480      	push	{r7}
 80013ce:	b083      	sub	sp, #12
 80013d0:	af00      	add	r7, sp, #0
 80013d2:	6078      	str	r0, [r7, #4]
 80013d4:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80013d6:	683b      	ldr	r3, [r7, #0]
 80013d8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80013dc:	605a      	str	r2, [r3, #4]
  return 0;
 80013de:	2300      	movs	r3, #0
}
 80013e0:	4618      	mov	r0, r3
 80013e2:	370c      	adds	r7, #12
 80013e4:	46bd      	mov	sp, r7
 80013e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ea:	4770      	bx	lr

080013ec <_isatty>:

int _isatty(int file)
{
 80013ec:	b480      	push	{r7}
 80013ee:	b083      	sub	sp, #12
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80013f4:	2301      	movs	r3, #1
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	370c      	adds	r7, #12
 80013fa:	46bd      	mov	sp, r7
 80013fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001400:	4770      	bx	lr

08001402 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001402:	b480      	push	{r7}
 8001404:	b085      	sub	sp, #20
 8001406:	af00      	add	r7, sp, #0
 8001408:	60f8      	str	r0, [r7, #12]
 800140a:	60b9      	str	r1, [r7, #8]
 800140c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800140e:	2300      	movs	r3, #0
}
 8001410:	4618      	mov	r0, r3
 8001412:	3714      	adds	r7, #20
 8001414:	46bd      	mov	sp, r7
 8001416:	f85d 7b04 	ldr.w	r7, [sp], #4
 800141a:	4770      	bx	lr

0800141c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b086      	sub	sp, #24
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001424:	4a14      	ldr	r2, [pc, #80]	@ (8001478 <_sbrk+0x5c>)
 8001426:	4b15      	ldr	r3, [pc, #84]	@ (800147c <_sbrk+0x60>)
 8001428:	1ad3      	subs	r3, r2, r3
 800142a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800142c:	697b      	ldr	r3, [r7, #20]
 800142e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001430:	4b13      	ldr	r3, [pc, #76]	@ (8001480 <_sbrk+0x64>)
 8001432:	681b      	ldr	r3, [r3, #0]
 8001434:	2b00      	cmp	r3, #0
 8001436:	d102      	bne.n	800143e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001438:	4b11      	ldr	r3, [pc, #68]	@ (8001480 <_sbrk+0x64>)
 800143a:	4a12      	ldr	r2, [pc, #72]	@ (8001484 <_sbrk+0x68>)
 800143c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800143e:	4b10      	ldr	r3, [pc, #64]	@ (8001480 <_sbrk+0x64>)
 8001440:	681a      	ldr	r2, [r3, #0]
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4413      	add	r3, r2
 8001446:	693a      	ldr	r2, [r7, #16]
 8001448:	429a      	cmp	r2, r3
 800144a:	d207      	bcs.n	800145c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800144c:	f004 fda8 	bl	8005fa0 <__errno>
 8001450:	4603      	mov	r3, r0
 8001452:	220c      	movs	r2, #12
 8001454:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001456:	f04f 33ff 	mov.w	r3, #4294967295
 800145a:	e009      	b.n	8001470 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800145c:	4b08      	ldr	r3, [pc, #32]	@ (8001480 <_sbrk+0x64>)
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001462:	4b07      	ldr	r3, [pc, #28]	@ (8001480 <_sbrk+0x64>)
 8001464:	681a      	ldr	r2, [r3, #0]
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	4413      	add	r3, r2
 800146a:	4a05      	ldr	r2, [pc, #20]	@ (8001480 <_sbrk+0x64>)
 800146c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800146e:	68fb      	ldr	r3, [r7, #12]
}
 8001470:	4618      	mov	r0, r3
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	20010000 	.word	0x20010000
 800147c:	00000400 	.word	0x00000400
 8001480:	20000328 	.word	0x20000328
 8001484:	20000480 	.word	0x20000480

08001488 <SystemInit>:
  * @brief  Setup the microcontroller system
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001488:	b480      	push	{r7}
 800148a:	af00      	add	r7, sp, #0
/* FPU settings --------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800148c:	4b06      	ldr	r3, [pc, #24]	@ (80014a8 <SystemInit+0x20>)
 800148e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001492:	4a05      	ldr	r2, [pc, #20]	@ (80014a8 <SystemInit+0x20>)
 8001494:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001498:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800149c:	bf00      	nop
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr
 80014a6:	bf00      	nop
 80014a8:	e000ed00 	.word	0xe000ed00

080014ac <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80014e4 <LoopForever+0x2>
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80014b0:	f7ff ffea 	bl	8001488 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014b4:	480c      	ldr	r0, [pc, #48]	@ (80014e8 <LoopForever+0x6>)
  ldr r1, =_edata
 80014b6:	490d      	ldr	r1, [pc, #52]	@ (80014ec <LoopForever+0xa>)
  ldr r2, =_sidata
 80014b8:	4a0d      	ldr	r2, [pc, #52]	@ (80014f0 <LoopForever+0xe>)
  movs r3, #0
 80014ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014bc:	e002      	b.n	80014c4 <LoopCopyDataInit>

080014be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014c2:	3304      	adds	r3, #4

080014c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014c8:	d3f9      	bcc.n	80014be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014ca:	4a0a      	ldr	r2, [pc, #40]	@ (80014f4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80014cc:	4c0a      	ldr	r4, [pc, #40]	@ (80014f8 <LoopForever+0x16>)
  movs r3, #0
 80014ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014d0:	e001      	b.n	80014d6 <LoopFillZerobss>

080014d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014d4:	3204      	adds	r2, #4

080014d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80014d8:	d3fb      	bcc.n	80014d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80014da:	f004 fd67 	bl	8005fac <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80014de:	f7ff fc07 	bl	8000cf0 <main>

080014e2 <LoopForever>:

LoopForever:
    b LoopForever
 80014e2:	e7fe      	b.n	80014e2 <LoopForever>
  ldr   sp, =_estack    /* Atollic update: set stack pointer */
 80014e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80014e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80014ec:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80014f0:	08008150 	.word	0x08008150
  ldr r2, =_sbss
 80014f4:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80014f8:	2000047c 	.word	0x2000047c

080014fc <ADC3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80014fc:	e7fe      	b.n	80014fc <ADC3_IRQHandler>
	...

08001500 <HAL_Init>:
  *         In the default implementation,Systick is used as source of time base.
  *       The tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch */
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001504:	4b08      	ldr	r3, [pc, #32]	@ (8001528 <HAL_Init+0x28>)
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	4a07      	ldr	r2, [pc, #28]	@ (8001528 <HAL_Init+0x28>)
 800150a:	f043 0310 	orr.w	r3, r3, #16
 800150e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001510:	2003      	movs	r0, #3
 8001512:	f001 fc5f 	bl	8002dd4 <HAL_NVIC_SetPriorityGrouping>

  /* Enable systick and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001516:	200f      	movs	r0, #15
 8001518:	f000 f808 	bl	800152c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800151c:	f7ff fdbc 	bl	8001098 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001520:	2300      	movs	r3, #0
}
 8001522:	4618      	mov	r0, r3
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	40022000 	.word	0x40022000

0800152c <HAL_InitTick>:
  *         implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b082      	sub	sp, #8
 8001530:	af00      	add	r7, sp, #0
 8001532:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001534:	4b12      	ldr	r3, [pc, #72]	@ (8001580 <HAL_InitTick+0x54>)
 8001536:	681a      	ldr	r2, [r3, #0]
 8001538:	4b12      	ldr	r3, [pc, #72]	@ (8001584 <HAL_InitTick+0x58>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	4619      	mov	r1, r3
 800153e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001542:	fbb3 f3f1 	udiv	r3, r3, r1
 8001546:	fbb2 f3f3 	udiv	r3, r2, r3
 800154a:	4618      	mov	r0, r3
 800154c:	f001 fc77 	bl	8002e3e <HAL_SYSTICK_Config>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d001      	beq.n	800155a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001556:	2301      	movs	r3, #1
 8001558:	e00e      	b.n	8001578 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	2b0f      	cmp	r3, #15
 800155e:	d80a      	bhi.n	8001576 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001560:	2200      	movs	r2, #0
 8001562:	6879      	ldr	r1, [r7, #4]
 8001564:	f04f 30ff 	mov.w	r0, #4294967295
 8001568:	f001 fc3f 	bl	8002dea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800156c:	4a06      	ldr	r2, [pc, #24]	@ (8001588 <HAL_InitTick+0x5c>)
 800156e:	687b      	ldr	r3, [r7, #4]
 8001570:	6013      	str	r3, [r2, #0]
  else
  {
    return HAL_ERROR;
  }
   /* Return function status */
  return HAL_OK;
 8001572:	2300      	movs	r3, #0
 8001574:	e000      	b.n	8001578 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001576:	2301      	movs	r3, #1
}
 8001578:	4618      	mov	r0, r3
 800157a:	3708      	adds	r7, #8
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}
 8001580:	20000000 	.word	0x20000000
 8001584:	20000008 	.word	0x20000008
 8001588:	20000004 	.word	0x20000004

0800158c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *         implementations  in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800158c:	b480      	push	{r7}
 800158e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001590:	4b06      	ldr	r3, [pc, #24]	@ (80015ac <HAL_IncTick+0x20>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	461a      	mov	r2, r3
 8001596:	4b06      	ldr	r3, [pc, #24]	@ (80015b0 <HAL_IncTick+0x24>)
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	4413      	add	r3, r2
 800159c:	4a04      	ldr	r2, [pc, #16]	@ (80015b0 <HAL_IncTick+0x24>)
 800159e:	6013      	str	r3, [r2, #0]
}
 80015a0:	bf00      	nop
 80015a2:	46bd      	mov	sp, r7
 80015a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015a8:	4770      	bx	lr
 80015aa:	bf00      	nop
 80015ac:	20000008 	.word	0x20000008
 80015b0:	2000032c 	.word	0x2000032c

080015b4 <HAL_GetTick>:
  * @note   The function is declared as __Weak  to be overwritten  in case of other 
  *         implementations  in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  return uwTick;  
 80015b8:	4b03      	ldr	r3, [pc, #12]	@ (80015c8 <HAL_GetTick+0x14>)
 80015ba:	681b      	ldr	r3, [r3, #0]
}
 80015bc:	4618      	mov	r0, r3
 80015be:	46bd      	mov	sp, r7
 80015c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015c4:	4770      	bx	lr
 80015c6:	bf00      	nop
 80015c8:	2000032c 	.word	0x2000032c

080015cc <HAL_Delay>:
  *         implementations  in user file.
  * @param  Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b084      	sub	sp, #16
 80015d0:	af00      	add	r7, sp, #0
 80015d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80015d4:	f7ff ffee 	bl	80015b4 <HAL_GetTick>
 80015d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	60fb      	str	r3, [r7, #12]
  
  /* Add freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80015de:	68fb      	ldr	r3, [r7, #12]
 80015e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015e4:	d005      	beq.n	80015f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <HAL_Delay+0x44>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	461a      	mov	r2, r3
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	4413      	add	r3, r2
 80015f0:	60fb      	str	r3, [r7, #12]
  }
  
  while((HAL_GetTick() - tickstart) < wait)
 80015f2:	bf00      	nop
 80015f4:	f7ff ffde 	bl	80015b4 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	68fa      	ldr	r2, [r7, #12]
 8001600:	429a      	cmp	r2, r3
 8001602:	d8f7      	bhi.n	80015f4 <HAL_Delay+0x28>
  {
  }
}
 8001604:	bf00      	nop
 8001606:	bf00      	nop
 8001608:	3710      	adds	r7, #16
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	20000008 	.word	0x20000008

08001614 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 8001614:	b480      	push	{r7}
 8001616:	b083      	sub	sp, #12
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindowCallback must be implemented in the user file.
  */
}
 800161c:	bf00      	nop
 800161e:	370c      	adds	r7, #12
 8001620:	46bd      	mov	sp, r7
 8001622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001626:	4770      	bx	lr

08001628 <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001628:	b480      	push	{r7}
 800162a:	b083      	sub	sp, #12
 800162c:	af00      	add	r7, sp, #0
 800162e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001630:	bf00      	nop
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <HAL_ADC_Init>:
  *         without  disabling the other ADCs sharing the same common group.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	b09a      	sub	sp, #104	@ 0x68
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001644:	2300      	movs	r3, #0
 8001646:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpCFGR = 0U;
 800164a:	2300      	movs	r3, #0
 800164c:	663b      	str	r3, [r7, #96]	@ 0x60
  __IO uint32_t wait_loop_index = 0U;
 800164e:	2300      	movs	r3, #0
 8001650:	60bb      	str	r3, [r7, #8]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	2b00      	cmp	r3, #0
 8001656:	d101      	bne.n	800165c <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8001658:	2301      	movs	r3, #1
 800165a:	e1e3      	b.n	8001a24 <HAL_ADC_Init+0x3e8>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	691b      	ldr	r3, [r3, #16]
 8001660:	2b00      	cmp	r3, #0
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
    }
  }
    
  /* Configuration of ADC core parameters and ADC MSP related parameters */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001666:	f003 0310 	and.w	r3, r3, #16
 800166a:	2b00      	cmp	r3, #0
 800166c:	d176      	bne.n	800175c <HAL_ADC_Init+0x120>
    /* procedure.                                                             */
    
    /* Actions performed only if ADC is coming from state reset:              */
    /* - Initialization of ADC MSP                                            */
    /* - ADC voltage regulator enable                                         */
    if (hadc->State == HAL_ADC_STATE_RESET)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001672:	2b00      	cmp	r3, #0
 8001674:	d152      	bne.n	800171c <HAL_ADC_Init+0xe0>
    {
      /* Initialize ADC error code */
      ADC_CLEAR_ERRORCODE(hadc);
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	2200      	movs	r2, #0
 800167a:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Initialize HAL ADC API internal variables */
      hadc->InjectionConfig.ChannelCount = 0U;
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2200      	movs	r2, #0
 8001680:	64da      	str	r2, [r3, #76]	@ 0x4c
      hadc->InjectionConfig.ContextQueue = 0U;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	2200      	movs	r2, #0
 8001686:	649a      	str	r2, [r3, #72]	@ 0x48
      
      /* Allocate lock resource and initialize it */
      hadc->Lock = HAL_UNLOCKED;
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	2200      	movs	r2, #0
 800168c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001690:	6878      	ldr	r0, [r7, #4]
 8001692:	f7ff fd25 	bl	80010e0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Enable voltage regulator (if disabled at this step) */
      if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0))
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689b      	ldr	r3, [r3, #8]
 800169c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d13b      	bne.n	800171c <HAL_ADC_Init+0xe0>
        /*       enabling the ADC. This temporization must be implemented by  */ 
        /*       software and is equal to 10 us in the worst case             */
        /*       process/temperature/power supply.                            */
        
        /* Disable the ADC (if not already disabled) */
        tmp_hal_status = ADC_Disable(hadc);
 80016a4:	6878      	ldr	r0, [r7, #4]
 80016a6:	f001 fa5f 	bl	8002b68 <ADC_Disable>
 80016aa:	4603      	mov	r3, r0
 80016ac:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
        
        /* Check if ADC is effectively disabled */
        /* Configuration of ADC parameters if previous preliminary actions    */ 
        /* are correctly completed.                                           */
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016b4:	f003 0310 	and.w	r3, r3, #16
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d12f      	bne.n	800171c <HAL_ADC_Init+0xe0>
 80016bc:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d12b      	bne.n	800171c <HAL_ADC_Init+0xe0>
            (tmp_hal_status == HAL_OK)                                  )
        {
          /* Set ADC state */
          ADC_STATE_CLR_SET(hadc->State,
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016c8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80016cc:	f023 0302 	bic.w	r3, r3, #2
 80016d0:	f043 0202 	orr.w	r2, r3, #2
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	641a      	str	r2, [r3, #64]	@ 0x40
                            HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                            HAL_ADC_STATE_BUSY_INTERNAL);
          
          /* Set the intermediate state before moving the ADC voltage         */
          /* regulator to state enable.                                       */
          CLEAR_BIT(hadc->Instance->CR, (ADC_CR_ADVREGEN_1 | ADC_CR_ADVREGEN_0));
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	689a      	ldr	r2, [r3, #8]
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80016e6:	609a      	str	r2, [r3, #8]
          /* Set ADVREGEN bits to 0x01U */
          SET_BIT(hadc->Instance->CR, ADC_CR_ADVREGEN_0);
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	689a      	ldr	r2, [r3, #8]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f042 5280 	orr.w	r2, r2, #268435456	@ 0x10000000
 80016f6:	609a      	str	r2, [r3, #8]
          
          /* Delay for ADC stabilization time.                                */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80016f8:	4b92      	ldr	r3, [pc, #584]	@ (8001944 <HAL_ADC_Init+0x308>)
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a92      	ldr	r2, [pc, #584]	@ (8001948 <HAL_ADC_Init+0x30c>)
 80016fe:	fba2 2303 	umull	r2, r3, r2, r3
 8001702:	0c9a      	lsrs	r2, r3, #18
 8001704:	4613      	mov	r3, r2
 8001706:	009b      	lsls	r3, r3, #2
 8001708:	4413      	add	r3, r2
 800170a:	005b      	lsls	r3, r3, #1
 800170c:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 800170e:	e002      	b.n	8001716 <HAL_ADC_Init+0xda>
          {
            wait_loop_index--;
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	3b01      	subs	r3, #1
 8001714:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001716:	68bb      	ldr	r3, [r7, #8]
 8001718:	2b00      	cmp	r3, #0
 800171a:	d1f9      	bne.n	8001710 <HAL_ADC_Init+0xd4>
    }
    
    /* Verification that ADC voltage regulator is correctly enabled, whether  */
    /* or not ADC is coming from state reset (if any potential problem of     */
    /* clocking, voltage regulator would not be enabled).                     */
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	689b      	ldr	r3, [r3, #8]
 8001722:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001726:	2b00      	cmp	r3, #0
 8001728:	d007      	beq.n	800173a <HAL_ADC_Init+0xfe>
        HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADVREGEN_1)   )
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	689b      	ldr	r3, [r3, #8]
 8001730:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
    if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN_0) ||
 8001734:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001738:	d110      	bne.n	800175c <HAL_ADC_Init+0x120>
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800173e:	f023 0312 	bic.w	r3, r3, #18
 8001742:	f043 0210 	orr.w	r2, r3, #16
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800174e:	f043 0201 	orr.w	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	645a      	str	r2, [r3, #68]	@ 0x44
      
      tmp_hal_status = HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001760:	f003 0310 	and.w	r3, r3, #16
 8001764:	2b00      	cmp	r3, #0
 8001766:	f040 8150 	bne.w	8001a0a <HAL_ADC_Init+0x3ce>
 800176a:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
 800176e:	2b00      	cmp	r3, #0
 8001770:	f040 814b 	bne.w	8001a0a <HAL_ADC_Init+0x3ce>
      (tmp_hal_status == HAL_OK)                                &&
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)          )
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	f003 0304 	and.w	r3, r3, #4
      (tmp_hal_status == HAL_OK)                                &&
 800177e:	2b00      	cmp	r3, #0
 8001780:	f040 8143 	bne.w	8001a0a <HAL_ADC_Init+0x3ce>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001788:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 800178c:	f043 0202 	orr.w	r2, r3, #2
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	641a      	str	r2, [r3, #64]	@ 0x40
    /* Configuration of common ADC parameters                                 */
    
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800179c:	d004      	beq.n	80017a8 <HAL_ADC_Init+0x16c>
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	4a6a      	ldr	r2, [pc, #424]	@ (800194c <HAL_ADC_Init+0x310>)
 80017a4:	4293      	cmp	r3, r2
 80017a6:	d101      	bne.n	80017ac <HAL_ADC_Init+0x170>
 80017a8:	4b69      	ldr	r3, [pc, #420]	@ (8001950 <HAL_ADC_Init+0x314>)
 80017aa:	e000      	b.n	80017ae <HAL_ADC_Init+0x172>
 80017ac:	4b69      	ldr	r3, [pc, #420]	@ (8001954 <HAL_ADC_Init+0x318>)
 80017ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
    
    /* Set handle of the other ADC sharing the same common register           */
    ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80017b8:	d102      	bne.n	80017c0 <HAL_ADC_Init+0x184>
 80017ba:	4b64      	ldr	r3, [pc, #400]	@ (800194c <HAL_ADC_Init+0x310>)
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	e01a      	b.n	80017f6 <HAL_ADC_Init+0x1ba>
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	4a61      	ldr	r2, [pc, #388]	@ (800194c <HAL_ADC_Init+0x310>)
 80017c6:	4293      	cmp	r3, r2
 80017c8:	d103      	bne.n	80017d2 <HAL_ADC_Init+0x196>
 80017ca:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	e011      	b.n	80017f6 <HAL_ADC_Init+0x1ba>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a60      	ldr	r2, [pc, #384]	@ (8001958 <HAL_ADC_Init+0x31c>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d102      	bne.n	80017e2 <HAL_ADC_Init+0x1a6>
 80017dc:	4b5f      	ldr	r3, [pc, #380]	@ (800195c <HAL_ADC_Init+0x320>)
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	e009      	b.n	80017f6 <HAL_ADC_Init+0x1ba>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	4a5d      	ldr	r2, [pc, #372]	@ (800195c <HAL_ADC_Init+0x320>)
 80017e8:	4293      	cmp	r3, r2
 80017ea:	d102      	bne.n	80017f2 <HAL_ADC_Init+0x1b6>
 80017ec:	4b5a      	ldr	r3, [pc, #360]	@ (8001958 <HAL_ADC_Init+0x31c>)
 80017ee:	60fb      	str	r3, [r7, #12]
 80017f0:	e001      	b.n	80017f6 <HAL_ADC_Init+0x1ba>
 80017f2:	2300      	movs	r3, #0
 80017f4:	60fb      	str	r3, [r7, #12]
    
    
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - Multimode clock configuration                                       */
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	681b      	ldr	r3, [r3, #0]
 80017fa:	689b      	ldr	r3, [r3, #8]
 80017fc:	f003 0303 	and.w	r3, r3, #3
 8001800:	2b01      	cmp	r3, #1
 8001802:	d108      	bne.n	8001816 <HAL_ADC_Init+0x1da>
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	f003 0301 	and.w	r3, r3, #1
 800180e:	2b01      	cmp	r3, #1
 8001810:	d101      	bne.n	8001816 <HAL_ADC_Init+0x1da>
 8001812:	2301      	movs	r3, #1
 8001814:	e000      	b.n	8001818 <HAL_ADC_Init+0x1dc>
 8001816:	2300      	movs	r3, #0
 8001818:	2b00      	cmp	r3, #0
 800181a:	d11c      	bne.n	8001856 <HAL_ADC_Init+0x21a>
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 800181c:	68fb      	ldr	r3, [r7, #12]
    if ((ADC_IS_ENABLE(hadc) == RESET)                                   &&
 800181e:	2b00      	cmp	r3, #0
 8001820:	d010      	beq.n	8001844 <HAL_ADC_Init+0x208>
         (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 8001822:	68fb      	ldr	r3, [r7, #12]
 8001824:	689b      	ldr	r3, [r3, #8]
 8001826:	f003 0303 	and.w	r3, r3, #3
 800182a:	2b01      	cmp	r3, #1
 800182c:	d107      	bne.n	800183e <HAL_ADC_Init+0x202>
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	f003 0301 	and.w	r3, r3, #1
 8001836:	2b01      	cmp	r3, #1
 8001838:	d101      	bne.n	800183e <HAL_ADC_Init+0x202>
 800183a:	2301      	movs	r3, #1
 800183c:	e000      	b.n	8001840 <HAL_ADC_Init+0x204>
 800183e:	2300      	movs	r3, #0
        ((tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 8001840:	2b00      	cmp	r3, #0
 8001842:	d108      	bne.n	8001856 <HAL_ADC_Init+0x21a>
      /*     into HAL_ADCEx_MultiModeConfigChannel() )                        */
      /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
      /*     (set into HAL_ADC_ConfigChannel() or                             */
      /*     HAL_ADCEx_InjectedConfigChannel() )                              */
     
      MODIFY_REG(tmpADC_Common->CCR       ,
 8001844:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001846:	689b      	ldr	r3, [r3, #8]
 8001848:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	431a      	orrs	r2, r3
 8001852:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001854:	609a      	str	r2, [r3, #8]
    /*  - external trigger to start conversion                                */
    /*  - external trigger polarity                                           */
    /*  - continuous conversion mode                                          */
    /*  - overrun                                                             */
    /*  - discontinuous mode                                                  */
    SET_BIT(tmpCFGR, ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode) |
 8001856:	687b      	ldr	r3, [r7, #4]
 8001858:	7e5b      	ldrb	r3, [r3, #25]
 800185a:	035b      	lsls	r3, r3, #13
 800185c:	687a      	ldr	r2, [r7, #4]
 800185e:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8001860:	2a01      	cmp	r2, #1
 8001862:	d002      	beq.n	800186a <HAL_ADC_Init+0x22e>
 8001864:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001868:	e000      	b.n	800186c <HAL_ADC_Init+0x230>
 800186a:	2200      	movs	r2, #0
 800186c:	431a      	orrs	r2, r3
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	68db      	ldr	r3, [r3, #12]
 8001872:	431a      	orrs	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	689b      	ldr	r3, [r3, #8]
 8001878:	4313      	orrs	r3, r2
 800187a:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 800187c:	4313      	orrs	r3, r2
 800187e:	663b      	str	r3, [r7, #96]	@ 0x60
                     ADC_CFGR_OVERRUN(hadc->Init.Overrun)               |
                     hadc->Init.DataAlign                               |
                     hadc->Init.Resolution                               );
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001886:	2b01      	cmp	r3, #1
 8001888:	d11b      	bne.n	80018c2 <HAL_ADC_Init+0x286>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	7e5b      	ldrb	r3, [r3, #25]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d109      	bne.n	80018a6 <HAL_ADC_Init+0x26a>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmpCFGR, ADC_CFGR_DISCEN                                            |
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001896:	3b01      	subs	r3, #1
 8001898:	045a      	lsls	r2, r3, #17
 800189a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800189c:	4313      	orrs	r3, r2
 800189e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80018a2:	663b      	str	r3, [r7, #96]	@ 0x60
 80018a4:	e00d      	b.n	80018c2 <HAL_ADC_Init+0x286>
        /* ADC regular group discontinuous was intended to be enabled,        */
        /* but ADC regular group modes continuous and sequencer discontinuous */
        /* cannot be enabled simultaneously.                                  */
        
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018aa:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 80018ae:	f043 0220 	orr.w	r2, r3, #32
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	641a      	str	r2, [r3, #64]	@ 0x40
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_CONFIG);
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ba:	f043 0201 	orr.w	r2, r3, #1
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	645a      	str	r2, [r3, #68]	@ 0x44
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018c6:	2b01      	cmp	r3, #1
 80018c8:	d054      	beq.n	8001974 <HAL_ADC_Init+0x338>
    {
      SET_BIT(tmpCFGR, ADC_CFGR_EXTSEL_SET(hadc, hadc->Init.ExternalTrigConv) |
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	681b      	ldr	r3, [r3, #0]
 80018ce:	4a22      	ldr	r2, [pc, #136]	@ (8001958 <HAL_ADC_Init+0x31c>)
 80018d0:	4293      	cmp	r3, r2
 80018d2:	d004      	beq.n	80018de <HAL_ADC_Init+0x2a2>
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4a20      	ldr	r2, [pc, #128]	@ (800195c <HAL_ADC_Init+0x320>)
 80018da:	4293      	cmp	r3, r2
 80018dc:	d140      	bne.n	8001960 <HAL_ADC_Init+0x324>
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018e2:	f5b3 7f30 	cmp.w	r3, #704	@ 0x2c0
 80018e6:	d02a      	beq.n	800193e <HAL_ADC_Init+0x302>
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80018f0:	d022      	beq.n	8001938 <HAL_ADC_Init+0x2fc>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018f6:	f5b3 7fe0 	cmp.w	r3, #448	@ 0x1c0
 80018fa:	d01a      	beq.n	8001932 <HAL_ADC_Init+0x2f6>
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001900:	f5b3 5f8a 	cmp.w	r3, #4416	@ 0x1140
 8001904:	d012      	beq.n	800192c <HAL_ADC_Init+0x2f0>
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800190a:	f5b3 5f84 	cmp.w	r3, #4224	@ 0x1080
 800190e:	d00a      	beq.n	8001926 <HAL_ADC_Init+0x2ea>
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001914:	f5b3 5f86 	cmp.w	r3, #4288	@ 0x10c0
 8001918:	d002      	beq.n	8001920 <HAL_ADC_Init+0x2e4>
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800191e:	e023      	b.n	8001968 <HAL_ADC_Init+0x32c>
 8001920:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8001924:	e020      	b.n	8001968 <HAL_ADC_Init+0x32c>
 8001926:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 800192a:	e01d      	b.n	8001968 <HAL_ADC_Init+0x32c>
 800192c:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 8001930:	e01a      	b.n	8001968 <HAL_ADC_Init+0x32c>
 8001932:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001936:	e017      	b.n	8001968 <HAL_ADC_Init+0x32c>
 8001938:	f44f 7330 	mov.w	r3, #704	@ 0x2c0
 800193c:	e014      	b.n	8001968 <HAL_ADC_Init+0x32c>
 800193e:	f44f 73e0 	mov.w	r3, #448	@ 0x1c0
 8001942:	e011      	b.n	8001968 <HAL_ADC_Init+0x32c>
 8001944:	20000000 	.word	0x20000000
 8001948:	431bde83 	.word	0x431bde83
 800194c:	50000100 	.word	0x50000100
 8001950:	50000300 	.word	0x50000300
 8001954:	50000700 	.word	0x50000700
 8001958:	50000400 	.word	0x50000400
 800195c:	50000500 	.word	0x50000500
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001964:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001968:	687a      	ldr	r2, [r7, #4]
 800196a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800196c:	4313      	orrs	r3, r2
 800196e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8001970:	4313      	orrs	r3, r2
 8001972:	663b      	str	r3, [r7, #96]	@ 0x60
    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - DMA continuous request                                              */
    /*  - LowPowerAutoWait feature                                            */
    if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	689b      	ldr	r3, [r3, #8]
 800197a:	f003 030c 	and.w	r3, r3, #12
 800197e:	2b00      	cmp	r3, #0
 8001980:	d114      	bne.n	80019ac <HAL_ADC_Init+0x370>
    {
      CLEAR_BIT(hadc->Instance->CFGR, ADC_CFGR_AUTDLY |
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	68db      	ldr	r3, [r3, #12]
 8001988:	687a      	ldr	r2, [r7, #4]
 800198a:	6812      	ldr	r2, [r2, #0]
 800198c:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8001990:	f023 0302 	bic.w	r3, r3, #2
 8001994:	60d3      	str	r3, [r2, #12]
                                      ADC_CFGR_DMACFG  );
      
      SET_BIT(tmpCFGR, ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait) |
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	7e1b      	ldrb	r3, [r3, #24]
 800199a:	039a      	lsls	r2, r3, #14
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 80019a2:	005b      	lsls	r3, r3, #1
 80019a4:	4313      	orrs	r3, r2
 80019a6:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80019a8:	4313      	orrs	r3, r2
 80019aa:	663b      	str	r3, [r7, #96]	@ 0x60
                       ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) );
    }
    
    /* Update ADC configuration register with previous settings */
    MODIFY_REG(hadc->Instance->CFGR,
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	68da      	ldr	r2, [r3, #12]
 80019b2:	4b1e      	ldr	r3, [pc, #120]	@ (8001a2c <HAL_ADC_Init+0x3f0>)
 80019b4:	4013      	ands	r3, r2
 80019b6:	687a      	ldr	r2, [r7, #4]
 80019b8:	6812      	ldr	r2, [r2, #0]
 80019ba:	6e39      	ldr	r1, [r7, #96]	@ 0x60
 80019bc:	430b      	orrs	r3, r1
 80019be:	60d3      	str	r3, [r2, #12]
    /*   Parameter "NbrOfConversion" is discarded.                            */
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */   
    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	691b      	ldr	r3, [r3, #16]
 80019c4:	2b01      	cmp	r3, #1
 80019c6:	d10c      	bne.n	80019e2 <HAL_ADC_Init+0x3a6>
    {
      /* Set number of ranks in regular group sequencer */     
      MODIFY_REG(hadc->Instance->SQR1                     ,
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019ce:	f023 010f 	bic.w	r1, r3, #15
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	69db      	ldr	r3, [r3, #28]
 80019d6:	1e5a      	subs	r2, r3, #1
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	631a      	str	r2, [r3, #48]	@ 0x30
 80019e0:	e007      	b.n	80019f2 <HAL_ADC_Init+0x3b6>
                 ADC_SQR1_L                               ,
                 (hadc->Init.NbrOfConversion - (uint8_t)1U) );  
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	f022 020f 	bic.w	r2, r2, #15
 80019f0:	631a      	str	r2, [r3, #48]	@ 0x30
    }
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	2200      	movs	r2, #0
 80019f6:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019fc:	f023 0303 	bic.w	r3, r3, #3
 8001a00:	f043 0201 	orr.w	r2, r3, #1
 8001a04:	687b      	ldr	r3, [r7, #4]
 8001a06:	641a      	str	r2, [r3, #64]	@ 0x40
 8001a08:	e00a      	b.n	8001a20 <HAL_ADC_Init+0x3e4>
                      HAL_ADC_STATE_READY);
  }
  else
  {
    /* Update ADC state machine to error */
    ADC_STATE_CLR_SET(hadc->State,
 8001a0a:	687b      	ldr	r3, [r7, #4]
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f023 0312 	bic.w	r3, r3, #18
 8001a12:	f043 0210 	orr.w	r2, r3, #16
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_ERROR_INTERNAL);
    
    tmp_hal_status = HAL_ERROR; 
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  }
  
  
  /* Return function status */
  return tmp_hal_status;
 8001a20:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 8001a24:	4618      	mov	r0, r3
 8001a26:	3768      	adds	r7, #104	@ 0x68
 8001a28:	46bd      	mov	sp, r7
 8001a2a:	bd80      	pop	{r7, pc}
 8001a2c:	fff0c007 	.word	0xfff0c007

08001a30 <HAL_ADC_Start_IT>:
  *         For ADC master, ADC is enabled and multimode conversion is started.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b084      	sub	sp, #16
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	689b      	ldr	r3, [r3, #8]
 8001a42:	f003 0304 	and.w	r3, r3, #4
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	f040 8123 	bne.w	8001c92 <HAL_ADC_Start_IT+0x262>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d101      	bne.n	8001a5a <HAL_ADC_Start_IT+0x2a>
 8001a56:	2302      	movs	r3, #2
 8001a58:	e11e      	b.n	8001c98 <HAL_ADC_Start_IT+0x268>
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001a62:	6878      	ldr	r0, [r7, #4]
 8001a64:	f001 f81c 	bl	8002aa0 <ADC_Enable>
 8001a68:	4603      	mov	r3, r0
 8001a6a:	73fb      	strb	r3, [r7, #15]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001a6c:	7bfb      	ldrb	r3, [r7, #15]
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	f040 810a 	bne.w	8001c88 <HAL_ADC_Start_IT+0x258>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a78:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8001a7c:	f023 0301 	bic.w	r3, r3, #1
 8001a80:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	641a      	str	r2, [r3, #64]	@ 0x40
                        HAL_ADC_STATE_REG_BUSY);
      
      /* Set group injected state (from auto-injection) and multimode state   */
      /* for all cases of multimode: independent mode, multimode ADC master   */
      /* or multimode ADC slave (for devices with several ADCs):              */
      if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001a90:	d004      	beq.n	8001a9c <HAL_ADC_Start_IT+0x6c>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a82      	ldr	r2, [pc, #520]	@ (8001ca0 <HAL_ADC_Start_IT+0x270>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d106      	bne.n	8001aaa <HAL_ADC_Start_IT+0x7a>
 8001a9c:	4b81      	ldr	r3, [pc, #516]	@ (8001ca4 <HAL_ADC_Start_IT+0x274>)
 8001a9e:	689b      	ldr	r3, [r3, #8]
 8001aa0:	f003 031f 	and.w	r3, r3, #31
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d010      	beq.n	8001aca <HAL_ADC_Start_IT+0x9a>
 8001aa8:	e005      	b.n	8001ab6 <HAL_ADC_Start_IT+0x86>
 8001aaa:	4b7f      	ldr	r3, [pc, #508]	@ (8001ca8 <HAL_ADC_Start_IT+0x278>)
 8001aac:	689b      	ldr	r3, [r3, #8]
 8001aae:	f003 031f 	and.w	r3, r3, #31
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d009      	beq.n	8001aca <HAL_ADC_Start_IT+0x9a>
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001abe:	d004      	beq.n	8001aca <HAL_ADC_Start_IT+0x9a>
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	4a79      	ldr	r2, [pc, #484]	@ (8001cac <HAL_ADC_Start_IT+0x27c>)
 8001ac6:	4293      	cmp	r3, r2
 8001ac8:	d115      	bne.n	8001af6 <HAL_ADC_Start_IT+0xc6>
      {
        /* Set ADC state (ADC independent or master) */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001aca:	687b      	ldr	r3, [r7, #4]
 8001acc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ace:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	681b      	ldr	r3, [r3, #0]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d036      	beq.n	8001b52 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ae8:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001aec:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	641a      	str	r2, [r3, #64]	@ 0x40
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != RESET)
 8001af4:	e02d      	b.n	8001b52 <HAL_ADC_Start_IT+0x122>
        }
      }
      else
      {
        /* Set ADC state (ADC slave) */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001afa:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	641a      	str	r2, [r3, #64]	@ 0x40
        
        /* If conversions on group regular are also triggering group injected,*/
        /* update ADC state.                                                  */
        if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001b0a:	d004      	beq.n	8001b16 <HAL_ADC_Start_IT+0xe6>
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4a63      	ldr	r2, [pc, #396]	@ (8001ca0 <HAL_ADC_Start_IT+0x270>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d10a      	bne.n	8001b2c <HAL_ADC_Start_IT+0xfc>
 8001b16:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	bf14      	ite	ne
 8001b24:	2301      	movne	r3, #1
 8001b26:	2300      	moveq	r3, #0
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	e008      	b.n	8001b3e <HAL_ADC_Start_IT+0x10e>
 8001b2c:	4b5f      	ldr	r3, [pc, #380]	@ (8001cac <HAL_ADC_Start_IT+0x27c>)
 8001b2e:	68db      	ldr	r3, [r3, #12]
 8001b30:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	bf14      	ite	ne
 8001b38:	2301      	movne	r3, #1
 8001b3a:	2300      	moveq	r3, #0
 8001b3c:	b2db      	uxtb	r3, r3
 8001b3e:	2b00      	cmp	r3, #0
 8001b40:	d007      	beq.n	8001b52 <HAL_ADC_Start_IT+0x122>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b46:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8001b4a:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	641a      	str	r2, [r3, #64]	@ 0x40
        }
      }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b56:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b5a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001b5e:	d106      	bne.n	8001b6e <HAL_ADC_Start_IT+0x13e>
      {
        /* Reset ADC error code fields related to conversions on group regular*/
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001b64:	f023 0206 	bic.w	r2, r3, #6
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	645a      	str	r2, [r3, #68]	@ 0x44
 8001b6c:	e002      	b.n	8001b74 <HAL_ADC_Start_IT+0x144>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001b6e:	687b      	ldr	r3, [r7, #4]
 8001b70:	2200      	movs	r2, #0
 8001b72:	645a      	str	r2, [r3, #68]	@ 0x44
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2200      	movs	r2, #0
 8001b78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	221c      	movs	r2, #28
 8001b82:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC end of conversion interrupt */
      /* Enable ADC overrun interrupt */  
      switch(hadc->Init.EOCSelection)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	695b      	ldr	r3, [r3, #20]
 8001b88:	2b08      	cmp	r3, #8
 8001b8a:	d110      	bne.n	8001bae <HAL_ADC_Start_IT+0x17e>
      {
        case ADC_EOC_SEQ_CONV: 
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	685a      	ldr	r2, [r3, #4]
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	681b      	ldr	r3, [r3, #0]
 8001b96:	f022 0204 	bic.w	r2, r2, #4
 8001b9a:	605a      	str	r2, [r3, #4]
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOS));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	685a      	ldr	r2, [r3, #4]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	681b      	ldr	r3, [r3, #0]
 8001ba6:	f042 0208 	orr.w	r2, r2, #8
 8001baa:	605a      	str	r2, [r3, #4]
          break;
 8001bac:	e008      	b.n	8001bc0 <HAL_ADC_Start_IT+0x190>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS));
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	681b      	ldr	r3, [r3, #0]
 8001bb2:	685a      	ldr	r2, [r3, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f042 020c 	orr.w	r2, r2, #12
 8001bbc:	605a      	str	r2, [r3, #4]
          break;
 8001bbe:	bf00      	nop
      /* If overrun is set to overwrite previous data (default setting),      */
      /* overrun interrupt is not activated (overrun event is not considered  */
      /* as an error).                                                        */
      /* (cf ref manual "Managing conversions without using the DMA and       */
      /* without overrun ")                                                   */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	d107      	bne.n	8001bd8 <HAL_ADC_Start_IT+0x1a8>
      {
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_OVR);
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	681b      	ldr	r3, [r3, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	f022 0210 	bic.w	r2, r2, #16
 8001bd6:	605a      	str	r2, [r3, #4]
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Case of multimode enabled (for devices with several ADCs):           */
      /*  - if ADC is slave, ADC is enabled only (conversion is not started). */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001be0:	d004      	beq.n	8001bec <HAL_ADC_Start_IT+0x1bc>
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	4a2e      	ldr	r2, [pc, #184]	@ (8001ca0 <HAL_ADC_Start_IT+0x270>)
 8001be8:	4293      	cmp	r3, r2
 8001bea:	d106      	bne.n	8001bfa <HAL_ADC_Start_IT+0x1ca>
 8001bec:	4b2d      	ldr	r3, [pc, #180]	@ (8001ca4 <HAL_ADC_Start_IT+0x274>)
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	f003 031f 	and.w	r3, r3, #31
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d03e      	beq.n	8001c76 <HAL_ADC_Start_IT+0x246>
 8001bf8:	e005      	b.n	8001c06 <HAL_ADC_Start_IT+0x1d6>
 8001bfa:	4b2b      	ldr	r3, [pc, #172]	@ (8001ca8 <HAL_ADC_Start_IT+0x278>)
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	f003 031f 	and.w	r3, r3, #31
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d037      	beq.n	8001c76 <HAL_ADC_Start_IT+0x246>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c0e:	d004      	beq.n	8001c1a <HAL_ADC_Start_IT+0x1ea>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	4a22      	ldr	r2, [pc, #136]	@ (8001ca0 <HAL_ADC_Start_IT+0x270>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d106      	bne.n	8001c28 <HAL_ADC_Start_IT+0x1f8>
 8001c1a:	4b22      	ldr	r3, [pc, #136]	@ (8001ca4 <HAL_ADC_Start_IT+0x274>)
 8001c1c:	689b      	ldr	r3, [r3, #8]
 8001c1e:	f003 031f 	and.w	r3, r3, #31
 8001c22:	2b05      	cmp	r3, #5
 8001c24:	d027      	beq.n	8001c76 <HAL_ADC_Start_IT+0x246>
 8001c26:	e005      	b.n	8001c34 <HAL_ADC_Start_IT+0x204>
 8001c28:	4b1f      	ldr	r3, [pc, #124]	@ (8001ca8 <HAL_ADC_Start_IT+0x278>)
 8001c2a:	689b      	ldr	r3, [r3, #8]
 8001c2c:	f003 031f 	and.w	r3, r3, #31
 8001c30:	2b05      	cmp	r3, #5
 8001c32:	d020      	beq.n	8001c76 <HAL_ADC_Start_IT+0x246>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c3c:	d004      	beq.n	8001c48 <HAL_ADC_Start_IT+0x218>
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4a17      	ldr	r2, [pc, #92]	@ (8001ca0 <HAL_ADC_Start_IT+0x270>)
 8001c44:	4293      	cmp	r3, r2
 8001c46:	d106      	bne.n	8001c56 <HAL_ADC_Start_IT+0x226>
 8001c48:	4b16      	ldr	r3, [pc, #88]	@ (8001ca4 <HAL_ADC_Start_IT+0x274>)
 8001c4a:	689b      	ldr	r3, [r3, #8]
 8001c4c:	f003 031f 	and.w	r3, r3, #31
 8001c50:	2b09      	cmp	r3, #9
 8001c52:	d010      	beq.n	8001c76 <HAL_ADC_Start_IT+0x246>
 8001c54:	e005      	b.n	8001c62 <HAL_ADC_Start_IT+0x232>
 8001c56:	4b14      	ldr	r3, [pc, #80]	@ (8001ca8 <HAL_ADC_Start_IT+0x278>)
 8001c58:	689b      	ldr	r3, [r3, #8]
 8001c5a:	f003 031f 	and.w	r3, r3, #31
 8001c5e:	2b09      	cmp	r3, #9
 8001c60:	d009      	beq.n	8001c76 <HAL_ADC_Start_IT+0x246>
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	681b      	ldr	r3, [r3, #0]
 8001c66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001c6a:	d004      	beq.n	8001c76 <HAL_ADC_Start_IT+0x246>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a0e      	ldr	r2, [pc, #56]	@ (8001cac <HAL_ADC_Start_IT+0x27c>)
 8001c72:	4293      	cmp	r3, r2
 8001c74:	d10f      	bne.n	8001c96 <HAL_ADC_Start_IT+0x266>
      {
        SET_BIT(hadc->Instance->CR, ADC_CR_ADSTART);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	689a      	ldr	r2, [r3, #8]
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	f042 0204 	orr.w	r2, r2, #4
 8001c84:	609a      	str	r2, [r3, #8]
 8001c86:	e006      	b.n	8001c96 <HAL_ADC_Start_IT+0x266>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	2200      	movs	r2, #0
 8001c8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001c90:	e001      	b.n	8001c96 <HAL_ADC_Start_IT+0x266>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001c92:	2302      	movs	r3, #2
 8001c94:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8001c96:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3710      	adds	r7, #16
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	50000100 	.word	0x50000100
 8001ca4:	50000300 	.word	0x50000300
 8001ca8:	50000700 	.word	0x50000700
 8001cac:	50000400 	.word	0x50000400

08001cb0 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]

  /* Note: ADC flag EOC is not cleared here by software because               */
  /*       automatically cleared by hardware when reading register DR.        */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 8001cbe:	4618      	mov	r0, r3
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
	...

08001ccc <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request.  
  * @param  hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 8001ccc:	b580      	push	{r7, lr}
 8001cce:	b088      	sub	sp, #32
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0U; /* flag set if overrun occurrence has to be considered as an error */
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61fb      	str	r3, [r7, #28]
  ADC_Common_TypeDef *tmpADC_Common;
  uint32_t tmp_cfgr     = 0x0U;
 8001cd8:	2300      	movs	r3, #0
 8001cda:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr_jqm = 0x0U;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	617b      	str	r3, [r7, #20]
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	613b      	str	r3, [r7, #16]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	685b      	ldr	r3, [r3, #4]
 8001cee:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001cf0:	693b      	ldr	r3, [r7, #16]
 8001cf2:	f003 0304 	and.w	r3, r3, #4
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d004      	beq.n	8001d04 <HAL_ADC_IRQHandler+0x38>
 8001cfa:	68fb      	ldr	r3, [r7, #12]
 8001cfc:	f003 0304 	and.w	r3, r3, #4
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d10b      	bne.n	8001d1c <HAL_ADC_IRQHandler+0x50>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001d04:	693b      	ldr	r3, [r7, #16]
 8001d06:	f003 0308 	and.w	r3, r3, #8
  if( (((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	f000 80bc 	beq.w	8001e88 <HAL_ADC_IRQHandler+0x1bc>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS))   )
 8001d10:	68fb      	ldr	r3, [r7, #12]
 8001d12:	f003 0308 	and.w	r3, r3, #8
 8001d16:	2b00      	cmp	r3, #0
 8001d18:	f000 80b6 	beq.w	8001e88 <HAL_ADC_IRQHandler+0x1bc>
  {
    /* Update state machine on conversion status if not in error state */
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d20:	f003 0310 	and.w	r3, r3, #16
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d105      	bne.n	8001d34 <HAL_ADC_IRQHandler+0x68>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d2c:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    
    /* Get relevant register CFGR in ADC instance of ADC master or slave    */
    /* in function of multimode state (for devices with multimode           */
    /* available).                                                          */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d3c:	d004      	beq.n	8001d48 <HAL_ADC_IRQHandler+0x7c>
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	4a90      	ldr	r2, [pc, #576]	@ (8001f84 <HAL_ADC_IRQHandler+0x2b8>)
 8001d44:	4293      	cmp	r3, r2
 8001d46:	d106      	bne.n	8001d56 <HAL_ADC_IRQHandler+0x8a>
 8001d48:	4b8f      	ldr	r3, [pc, #572]	@ (8001f88 <HAL_ADC_IRQHandler+0x2bc>)
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	f003 031f 	and.w	r3, r3, #31
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d03e      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x106>
 8001d54:	e005      	b.n	8001d62 <HAL_ADC_IRQHandler+0x96>
 8001d56:	4b8d      	ldr	r3, [pc, #564]	@ (8001f8c <HAL_ADC_IRQHandler+0x2c0>)
 8001d58:	689b      	ldr	r3, [r3, #8]
 8001d5a:	f003 031f 	and.w	r3, r3, #31
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d037      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x106>
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d6a:	d004      	beq.n	8001d76 <HAL_ADC_IRQHandler+0xaa>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4a84      	ldr	r2, [pc, #528]	@ (8001f84 <HAL_ADC_IRQHandler+0x2b8>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d106      	bne.n	8001d84 <HAL_ADC_IRQHandler+0xb8>
 8001d76:	4b84      	ldr	r3, [pc, #528]	@ (8001f88 <HAL_ADC_IRQHandler+0x2bc>)
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	f003 031f 	and.w	r3, r3, #31
 8001d7e:	2b05      	cmp	r3, #5
 8001d80:	d027      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x106>
 8001d82:	e005      	b.n	8001d90 <HAL_ADC_IRQHandler+0xc4>
 8001d84:	4b81      	ldr	r3, [pc, #516]	@ (8001f8c <HAL_ADC_IRQHandler+0x2c0>)
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	f003 031f 	and.w	r3, r3, #31
 8001d8c:	2b05      	cmp	r3, #5
 8001d8e:	d020      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x106>
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_IRQHandler+0xd8>
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a79      	ldr	r2, [pc, #484]	@ (8001f84 <HAL_ADC_IRQHandler+0x2b8>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d106      	bne.n	8001db2 <HAL_ADC_IRQHandler+0xe6>
 8001da4:	4b78      	ldr	r3, [pc, #480]	@ (8001f88 <HAL_ADC_IRQHandler+0x2bc>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 031f 	and.w	r3, r3, #31
 8001dac:	2b09      	cmp	r3, #9
 8001dae:	d010      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x106>
 8001db0:	e005      	b.n	8001dbe <HAL_ADC_IRQHandler+0xf2>
 8001db2:	4b76      	ldr	r3, [pc, #472]	@ (8001f8c <HAL_ADC_IRQHandler+0x2c0>)
 8001db4:	689b      	ldr	r3, [r3, #8]
 8001db6:	f003 031f 	and.w	r3, r3, #31
 8001dba:	2b09      	cmp	r3, #9
 8001dbc:	d009      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x106>
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001dc6:	d004      	beq.n	8001dd2 <HAL_ADC_IRQHandler+0x106>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	681b      	ldr	r3, [r3, #0]
 8001dcc:	4a70      	ldr	r2, [pc, #448]	@ (8001f90 <HAL_ADC_IRQHandler+0x2c4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d104      	bne.n	8001ddc <HAL_ADC_IRQHandler+0x110>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	68db      	ldr	r3, [r3, #12]
 8001dd8:	61bb      	str	r3, [r7, #24]
 8001dda:	e00f      	b.n	8001dfc <HAL_ADC_IRQHandler+0x130>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	681b      	ldr	r3, [r3, #0]
 8001de0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001de4:	d004      	beq.n	8001df0 <HAL_ADC_IRQHandler+0x124>
 8001de6:	687b      	ldr	r3, [r7, #4]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4a66      	ldr	r2, [pc, #408]	@ (8001f84 <HAL_ADC_IRQHandler+0x2b8>)
 8001dec:	4293      	cmp	r3, r2
 8001dee:	d102      	bne.n	8001df6 <HAL_ADC_IRQHandler+0x12a>
 8001df0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001df4:	e000      	b.n	8001df8 <HAL_ADC_IRQHandler+0x12c>
 8001df6:	4b66      	ldr	r3, [pc, #408]	@ (8001f90 <HAL_ADC_IRQHandler+0x2c4>)
 8001df8:	68db      	ldr	r3, [r3, #12]
 8001dfa:	61bb      	str	r3, [r7, #24]
    }
    
    /* Disable interruption if no further conversion upcoming by regular      */
    /* external trigger or by continuous mode,                                */
    /* and if scan sequence if completed.                                     */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	68db      	ldr	r3, [r3, #12]
 8001e02:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d137      	bne.n	8001e7a <HAL_ADC_IRQHandler+0x1ae>
       (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == RESET)  )
 8001e0a:	69bb      	ldr	r3, [r7, #24]
 8001e0c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)         && 
 8001e10:	2b00      	cmp	r3, #0
 8001e12:	d132      	bne.n	8001e7a <HAL_ADC_IRQHandler+0x1ae>
    {
      /* If End of Sequence is reached, disable interrupts */
      if((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS)
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	f003 0308 	and.w	r3, r3, #8
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d02d      	beq.n	8001e7a <HAL_ADC_IRQHandler+0x1ae>
      {
        /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit           */
        /* ADSTART==0 (no conversion on going)                                */
        if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	681b      	ldr	r3, [r3, #0]
 8001e22:	689b      	ldr	r3, [r3, #8]
 8001e24:	f003 0304 	and.w	r3, r3, #4
 8001e28:	2b00      	cmp	r3, #0
 8001e2a:	d11a      	bne.n	8001e62 <HAL_ADC_IRQHandler+0x196>
        {
          /* Disable ADC end of sequence conversion interrupt */
          /* Note: Overrun interrupt was enabled with EOC interrupt in        */
          /* HAL_Start_IT(), but is not disabled here because can be used     */
          /* by overrun IRQ process below.                                    */
          __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	685a      	ldr	r2, [r3, #4]
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	f022 020c 	bic.w	r2, r2, #12
 8001e3a:	605a      	str	r2, [r3, #4]
          
          /* Set ADC state */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e40:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	641a      	str	r2, [r3, #64]	@ 0x40
          
          if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e4c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d112      	bne.n	8001e7a <HAL_ADC_IRQHandler+0x1ae>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e58:	f043 0201 	orr.w	r2, r3, #1
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	641a      	str	r2, [r3, #64]	@ 0x40
 8001e60:	e00b      	b.n	8001e7a <HAL_ADC_IRQHandler+0x1ae>
          }
        }
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e66:	f043 0210 	orr.w	r2, r3, #16
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	641a      	str	r2, [r3, #64]	@ 0x40
        
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001e72:	f043 0201 	orr.w	r2, r3, #1
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from EOC or EOS, possibility to use:                             */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 8001e7a:	6878      	ldr	r0, [r7, #4]
 8001e7c:	f7fe feec 	bl	8000c58 <HAL_ADC_ConvCpltCallback>
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved      */
    /*       data.                                                            */
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS) );
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	220c      	movs	r2, #12
 8001e86:	601a      	str	r2, [r3, #0]
  }
  
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001e88:	693b      	ldr	r3, [r7, #16]
 8001e8a:	f003 0320 	and.w	r3, r3, #32
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d004      	beq.n	8001e9c <HAL_ADC_IRQHandler+0x1d0>
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f003 0320 	and.w	r3, r3, #32
 8001e98:	2b00      	cmp	r3, #0
 8001e9a:	d10b      	bne.n	8001eb4 <HAL_ADC_IRQHandler+0x1e8>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001e9c:	693b      	ldr	r3, [r7, #16]
 8001e9e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if( (((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	f000 8138 	beq.w	8002118 <HAL_ADC_IRQHandler+0x44c>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS))   )
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001eae:	2b00      	cmp	r3, #0
 8001eb0:	f000 8132 	beq.w	8002118 <HAL_ADC_IRQHandler+0x44c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eb8:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	641a      	str	r2, [r3, #64]	@ 0x40
        
    /* Get relevant register CFGR in ADC instance of ADC master or slave      */
    /* in function of multimode state (for devices with multimode             */
    /* available).                                                            */
    if (ADC_NONMULTIMODE_REG_OR_MULTIMODEMASTER(hadc))
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ec8:	d004      	beq.n	8001ed4 <HAL_ADC_IRQHandler+0x208>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a2d      	ldr	r2, [pc, #180]	@ (8001f84 <HAL_ADC_IRQHandler+0x2b8>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d106      	bne.n	8001ee2 <HAL_ADC_IRQHandler+0x216>
 8001ed4:	4b2c      	ldr	r3, [pc, #176]	@ (8001f88 <HAL_ADC_IRQHandler+0x2bc>)
 8001ed6:	689b      	ldr	r3, [r3, #8]
 8001ed8:	f003 031f 	and.w	r3, r3, #31
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d03e      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x292>
 8001ee0:	e005      	b.n	8001eee <HAL_ADC_IRQHandler+0x222>
 8001ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f8c <HAL_ADC_IRQHandler+0x2c0>)
 8001ee4:	689b      	ldr	r3, [r3, #8]
 8001ee6:	f003 031f 	and.w	r3, r3, #31
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d037      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x292>
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001ef6:	d004      	beq.n	8001f02 <HAL_ADC_IRQHandler+0x236>
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <HAL_ADC_IRQHandler+0x2b8>)
 8001efe:	4293      	cmp	r3, r2
 8001f00:	d106      	bne.n	8001f10 <HAL_ADC_IRQHandler+0x244>
 8001f02:	4b21      	ldr	r3, [pc, #132]	@ (8001f88 <HAL_ADC_IRQHandler+0x2bc>)
 8001f04:	689b      	ldr	r3, [r3, #8]
 8001f06:	f003 031f 	and.w	r3, r3, #31
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	d027      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x292>
 8001f0e:	e005      	b.n	8001f1c <HAL_ADC_IRQHandler+0x250>
 8001f10:	4b1e      	ldr	r3, [pc, #120]	@ (8001f8c <HAL_ADC_IRQHandler+0x2c0>)
 8001f12:	689b      	ldr	r3, [r3, #8]
 8001f14:	f003 031f 	and.w	r3, r3, #31
 8001f18:	2b05      	cmp	r3, #5
 8001f1a:	d020      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x292>
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f24:	d004      	beq.n	8001f30 <HAL_ADC_IRQHandler+0x264>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	4a16      	ldr	r2, [pc, #88]	@ (8001f84 <HAL_ADC_IRQHandler+0x2b8>)
 8001f2c:	4293      	cmp	r3, r2
 8001f2e:	d106      	bne.n	8001f3e <HAL_ADC_IRQHandler+0x272>
 8001f30:	4b15      	ldr	r3, [pc, #84]	@ (8001f88 <HAL_ADC_IRQHandler+0x2bc>)
 8001f32:	689b      	ldr	r3, [r3, #8]
 8001f34:	f003 031f 	and.w	r3, r3, #31
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d010      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x292>
 8001f3c:	e005      	b.n	8001f4a <HAL_ADC_IRQHandler+0x27e>
 8001f3e:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <HAL_ADC_IRQHandler+0x2c0>)
 8001f40:	689b      	ldr	r3, [r3, #8]
 8001f42:	f003 031f 	and.w	r3, r3, #31
 8001f46:	2b09      	cmp	r3, #9
 8001f48:	d009      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x292>
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f52:	d004      	beq.n	8001f5e <HAL_ADC_IRQHandler+0x292>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a0d      	ldr	r2, [pc, #52]	@ (8001f90 <HAL_ADC_IRQHandler+0x2c4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d104      	bne.n	8001f68 <HAL_ADC_IRQHandler+0x29c>
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR); 
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	68db      	ldr	r3, [r3, #12]
 8001f64:	61bb      	str	r3, [r7, #24]
 8001f66:	e018      	b.n	8001f9a <HAL_ADC_IRQHandler+0x2ce>
    }
    else
    {
      tmp_cfgr = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001f70:	d004      	beq.n	8001f7c <HAL_ADC_IRQHandler+0x2b0>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a03      	ldr	r2, [pc, #12]	@ (8001f84 <HAL_ADC_IRQHandler+0x2b8>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d10b      	bne.n	8001f94 <HAL_ADC_IRQHandler+0x2c8>
 8001f7c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8001f80:	e009      	b.n	8001f96 <HAL_ADC_IRQHandler+0x2ca>
 8001f82:	bf00      	nop
 8001f84:	50000100 	.word	0x50000100
 8001f88:	50000300 	.word	0x50000300
 8001f8c:	50000700 	.word	0x50000700
 8001f90:	50000400 	.word	0x50000400
 8001f94:	4b92      	ldr	r3, [pc, #584]	@ (80021e0 <HAL_ADC_IRQHandler+0x514>)
 8001f96:	68db      	ldr	r3, [r3, #12]
 8001f98:	61bb      	str	r3, [r7, #24]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if(ADC_IS_SOFTWARE_START_INJECTED(hadc))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001fa0:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f040 80b0 	bne.w	800210a <HAL_ADC_IRQHandler+0x43e>
    {
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001faa:	69bb      	ldr	r3, [r7, #24]
 8001fac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d00d      	beq.n	8001fd0 <HAL_ADC_IRQHandler+0x304>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	68db      	ldr	r3, [r3, #12]
 8001fba:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
      if((READ_BIT (tmp_cfgr, ADC_CFGR_JAUTO) == RESET)    ||
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	f040 80a3 	bne.w	800210a <HAL_ADC_IRQHandler+0x43e>
          (READ_BIT (tmp_cfgr, ADC_CFGR_CONT) == RESET)   )   )
 8001fc4:	69bb      	ldr	r3, [r7, #24]
 8001fc6:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)          &&
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	f040 809d 	bne.w	800210a <HAL_ADC_IRQHandler+0x43e>
      {
        /* If End of Sequence is reached, disable interrupts */
        if((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS)
 8001fd0:	693b      	ldr	r3, [r7, #16]
 8001fd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	f000 8097 	beq.w	800210a <HAL_ADC_IRQHandler+0x43e>
        {
          
          /* Get relevant register CFGR in ADC instance of ADC master or slave  */
          /* in function of multimode state (for devices with multimode         */
          /* available).                                                        */
          if (ADC_NONMULTIMODE_INJ_OR_MULTIMODEMASTER(hadc))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fe4:	d004      	beq.n	8001ff0 <HAL_ADC_IRQHandler+0x324>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	4a7e      	ldr	r2, [pc, #504]	@ (80021e4 <HAL_ADC_IRQHandler+0x518>)
 8001fec:	4293      	cmp	r3, r2
 8001fee:	d106      	bne.n	8001ffe <HAL_ADC_IRQHandler+0x332>
 8001ff0:	4b7d      	ldr	r3, [pc, #500]	@ (80021e8 <HAL_ADC_IRQHandler+0x51c>)
 8001ff2:	689b      	ldr	r3, [r3, #8]
 8001ff4:	f003 031f 	and.w	r3, r3, #31
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d03e      	beq.n	800207a <HAL_ADC_IRQHandler+0x3ae>
 8001ffc:	e005      	b.n	800200a <HAL_ADC_IRQHandler+0x33e>
 8001ffe:	4b7b      	ldr	r3, [pc, #492]	@ (80021ec <HAL_ADC_IRQHandler+0x520>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	f003 031f 	and.w	r3, r3, #31
 8002006:	2b00      	cmp	r3, #0
 8002008:	d037      	beq.n	800207a <HAL_ADC_IRQHandler+0x3ae>
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002012:	d004      	beq.n	800201e <HAL_ADC_IRQHandler+0x352>
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	4a72      	ldr	r2, [pc, #456]	@ (80021e4 <HAL_ADC_IRQHandler+0x518>)
 800201a:	4293      	cmp	r3, r2
 800201c:	d106      	bne.n	800202c <HAL_ADC_IRQHandler+0x360>
 800201e:	4b72      	ldr	r3, [pc, #456]	@ (80021e8 <HAL_ADC_IRQHandler+0x51c>)
 8002020:	689b      	ldr	r3, [r3, #8]
 8002022:	f003 031f 	and.w	r3, r3, #31
 8002026:	2b06      	cmp	r3, #6
 8002028:	d027      	beq.n	800207a <HAL_ADC_IRQHandler+0x3ae>
 800202a:	e005      	b.n	8002038 <HAL_ADC_IRQHandler+0x36c>
 800202c:	4b6f      	ldr	r3, [pc, #444]	@ (80021ec <HAL_ADC_IRQHandler+0x520>)
 800202e:	689b      	ldr	r3, [r3, #8]
 8002030:	f003 031f 	and.w	r3, r3, #31
 8002034:	2b06      	cmp	r3, #6
 8002036:	d020      	beq.n	800207a <HAL_ADC_IRQHandler+0x3ae>
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002040:	d004      	beq.n	800204c <HAL_ADC_IRQHandler+0x380>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	4a67      	ldr	r2, [pc, #412]	@ (80021e4 <HAL_ADC_IRQHandler+0x518>)
 8002048:	4293      	cmp	r3, r2
 800204a:	d106      	bne.n	800205a <HAL_ADC_IRQHandler+0x38e>
 800204c:	4b66      	ldr	r3, [pc, #408]	@ (80021e8 <HAL_ADC_IRQHandler+0x51c>)
 800204e:	689b      	ldr	r3, [r3, #8]
 8002050:	f003 031f 	and.w	r3, r3, #31
 8002054:	2b07      	cmp	r3, #7
 8002056:	d010      	beq.n	800207a <HAL_ADC_IRQHandler+0x3ae>
 8002058:	e005      	b.n	8002066 <HAL_ADC_IRQHandler+0x39a>
 800205a:	4b64      	ldr	r3, [pc, #400]	@ (80021ec <HAL_ADC_IRQHandler+0x520>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 031f 	and.w	r3, r3, #31
 8002062:	2b07      	cmp	r3, #7
 8002064:	d009      	beq.n	800207a <HAL_ADC_IRQHandler+0x3ae>
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800206e:	d004      	beq.n	800207a <HAL_ADC_IRQHandler+0x3ae>
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4a5a      	ldr	r2, [pc, #360]	@ (80021e0 <HAL_ADC_IRQHandler+0x514>)
 8002076:	4293      	cmp	r3, r2
 8002078:	d104      	bne.n	8002084 <HAL_ADC_IRQHandler+0x3b8>
          {
            tmp_cfgr_jqm = READ_REG(hadc->Instance->CFGR); 
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	68db      	ldr	r3, [r3, #12]
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	e00f      	b.n	80020a4 <HAL_ADC_IRQHandler+0x3d8>
          }
          else
          {
            tmp_cfgr_jqm = READ_REG(ADC_MASTER_INSTANCE(hadc)->CFGR);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800208c:	d004      	beq.n	8002098 <HAL_ADC_IRQHandler+0x3cc>
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	4a54      	ldr	r2, [pc, #336]	@ (80021e4 <HAL_ADC_IRQHandler+0x518>)
 8002094:	4293      	cmp	r3, r2
 8002096:	d102      	bne.n	800209e <HAL_ADC_IRQHandler+0x3d2>
 8002098:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800209c:	e000      	b.n	80020a0 <HAL_ADC_IRQHandler+0x3d4>
 800209e:	4b50      	ldr	r3, [pc, #320]	@ (80021e0 <HAL_ADC_IRQHandler+0x514>)
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	617b      	str	r3, [r7, #20]
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if(READ_BIT(tmp_cfgr_jqm, ADC_CFGR_JQM) == RESET)
 80020a4:	697b      	ldr	r3, [r7, #20]
 80020a6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d12d      	bne.n	800210a <HAL_ADC_IRQHandler+0x43e>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (ADC_IS_CONVERSION_ONGOING_INJECTED(hadc) == RESET)
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	689b      	ldr	r3, [r3, #8]
 80020b4:	f003 0308 	and.w	r3, r3, #8
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	d11a      	bne.n	80020f2 <HAL_ADC_IRQHandler+0x426>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	685a      	ldr	r2, [r3, #4]
 80020c2:	687b      	ldr	r3, [r7, #4]
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80020ca:	605a      	str	r2, [r3, #4]
              
              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	641a      	str	r2, [r3, #64]	@ 0x40
              
              if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d112      	bne.n	800210a <HAL_ADC_IRQHandler+0x43e>
              { 
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020e8:	f043 0201 	orr.w	r2, r3, #1
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	641a      	str	r2, [r3, #64]	@ 0x40
 80020f0:	e00b      	b.n	800210a <HAL_ADC_IRQHandler+0x43e>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020f6:	f043 0210 	orr.w	r2, r3, #16
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	641a      	str	r2, [r3, #64]	@ 0x40
              
              /* Set ADC error code to ADC IP internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f043 0201 	orr.w	r2, r3, #1
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	645a      	str	r2, [r3, #68]	@ 0x44
    /*       from JEOC or JEOS, possibility to use:                           */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_JEOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800210a:	6878      	ldr	r0, [r7, #4]
 800210c:	f000 f8c4 	bl	8002298 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    
    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	2260      	movs	r2, #96	@ 0x60
 8002116:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 1 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800211e:	2b00      	cmp	r3, #0
 8002120:	d011      	beq.n	8002146 <HAL_ADC_IRQHandler+0x47a>
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002128:	2b00      	cmp	r3, #0
 800212a:	d00c      	beq.n	8002146 <HAL_ADC_IRQHandler+0x47a>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002130:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f7ff fa6b 	bl	8001614 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	2280      	movs	r2, #128	@ 0x80
 8002144:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check analog watchdog 2 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002146:	693b      	ldr	r3, [r7, #16]
 8002148:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800214c:	2b00      	cmp	r3, #0
 800214e:	d012      	beq.n	8002176 <HAL_ADC_IRQHandler+0x4aa>
 8002150:	68fb      	ldr	r3, [r7, #12]
 8002152:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002156:	2b00      	cmp	r3, #0
 8002158:	d00d      	beq.n	8002176 <HAL_ADC_IRQHandler+0x4aa>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 2 callback */
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002166:	6878      	ldr	r0, [r7, #4]
 8002168:	f000 f8aa 	bl	80022c0 <HAL_ADCEx_LevelOutOfWindow2Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 800216c:	687b      	ldr	r3, [r7, #4]
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002174:	601a      	str	r2, [r3, #0]
  } 
  
  /* ========== Check analog watchdog 3 flag ========== */
  if(((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002176:	693b      	ldr	r3, [r7, #16]
 8002178:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800217c:	2b00      	cmp	r3, #0
 800217e:	d012      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x4da>
 8002180:	68fb      	ldr	r3, [r7, #12]
 8002182:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002186:	2b00      	cmp	r3, #0
 8002188:	d00d      	beq.n	80021a6 <HAL_ADC_IRQHandler+0x4da>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800218e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	641a      	str	r2, [r3, #64]	@ 0x40
    
    /* Level out of window 3 callback */
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002196:	6878      	ldr	r0, [r7, #4]
 8002198:	f000 f89c 	bl	80022d4 <HAL_ADCEx_LevelOutOfWindow3Callback>
    /* Clear ADC analog watchdog flag */ 
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80021a4:	601a      	str	r2, [r3, #0]
  }
  
  /* ========== Check Overrun flag ========== */
  if(((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	f003 0310 	and.w	r3, r3, #16
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d04f      	beq.n	8002250 <HAL_ADC_IRQHandler+0x584>
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	f003 0310 	and.w	r3, r3, #16
 80021b6:	2b00      	cmp	r3, #0
 80021b8:	d04a      	beq.n	8002250 <HAL_ADC_IRQHandler+0x584>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and         */
    /* without overrun ")                                                     */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80021be:	2b01      	cmp	r3, #1
 80021c0:	d102      	bne.n	80021c8 <HAL_ADC_IRQHandler+0x4fc>
    {
      overrun_error = 1U;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61fb      	str	r3, [r7, #28]
 80021c6:	e02d      	b.n	8002224 <HAL_ADC_IRQHandler+0x558>
    else
    {
      /* Pointer to the common control register to which is belonging hadc    */
      /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common */
      /* control registers)                                                   */
      tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80021d0:	d004      	beq.n	80021dc <HAL_ADC_IRQHandler+0x510>
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4a03      	ldr	r2, [pc, #12]	@ (80021e4 <HAL_ADC_IRQHandler+0x518>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d109      	bne.n	80021f0 <HAL_ADC_IRQHandler+0x524>
 80021dc:	4b02      	ldr	r3, [pc, #8]	@ (80021e8 <HAL_ADC_IRQHandler+0x51c>)
 80021de:	e008      	b.n	80021f2 <HAL_ADC_IRQHandler+0x526>
 80021e0:	50000400 	.word	0x50000400
 80021e4:	50000100 	.word	0x50000100
 80021e8:	50000300 	.word	0x50000300
 80021ec:	50000700 	.word	0x50000700
 80021f0:	4b28      	ldr	r3, [pc, #160]	@ (8002294 <HAL_ADC_IRQHandler+0x5c8>)
 80021f2:	60bb      	str	r3, [r7, #8]
      
      /* Check DMA configuration, depending on MultiMode set or not */
      if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI) == ADC_MODE_INDEPENDENT)
 80021f4:	68bb      	ldr	r3, [r7, #8]
 80021f6:	689b      	ldr	r3, [r3, #8]
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d109      	bne.n	8002214 <HAL_ADC_IRQHandler+0x548>
      {
        if (HAL_IS_BIT_SET(hadc->Instance->CFGR, ADC_CFGR_DMAEN))
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	68db      	ldr	r3, [r3, #12]
 8002206:	f003 0301 	and.w	r3, r3, #1
 800220a:	2b01      	cmp	r3, #1
 800220c:	d10a      	bne.n	8002224 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 800220e:	2301      	movs	r3, #1
 8002210:	61fb      	str	r3, [r7, #28]
 8002212:	e007      	b.n	8002224 <HAL_ADC_IRQHandler+0x558>
        }
      }
      else
      {
        /* MultiMode is enabled, Common Control Register MDMA bits must be checked */
        if (READ_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA) != RESET)
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	689b      	ldr	r3, [r3, #8]
 8002218:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d001      	beq.n	8002224 <HAL_ADC_IRQHandler+0x558>
        {
          overrun_error = 1U;  
 8002220:	2301      	movs	r3, #1
 8002222:	61fb      	str	r3, [r7, #28]
        }
      }
    }
    
    if (overrun_error == 1U)
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	2b01      	cmp	r3, #1
 8002228:	d10e      	bne.n	8002248 <HAL_ADC_IRQHandler+0x57c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222e:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800223a:	f043 0202 	orr.w	r2, r3, #2
 800223e:	687b      	ldr	r3, [r7, #4]
 8002240:	645a      	str	r2, [r3, #68]	@ 0x44
      
      /* Error callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff f9f0 	bl	8001628 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }
    
    /* Clear the Overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	2210      	movs	r2, #16
 800224e:	601a      	str	r2, [r3, #0]

  }
  
  
  /* ========== Check Injected context queue overflow flag ========== */
  if(((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002256:	2b00      	cmp	r3, #0
 8002258:	d018      	beq.n	800228c <HAL_ADC_IRQHandler+0x5c0>
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002260:	2b00      	cmp	r3, #0
 8002262:	d013      	beq.n	800228c <HAL_ADC_IRQHandler+0x5c0>
  {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002268:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	641a      	str	r2, [r3, #64]	@ 0x40
    
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002274:	f043 0208 	orr.w	r2, r3, #8
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	645a      	str	r2, [r3, #68]	@ 0x44
    
    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002284:	601a      	str	r2, [r3, #0]
    
    /* Error callback */ 
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002286:	6878      	ldr	r0, [r7, #4]
 8002288:	f000 f810 	bl	80022ac <HAL_ADCEx_InjectedQueueOverflowCallback>
  }
  
}
 800228c:	bf00      	nop
 800228e:	3720      	adds	r7, #32
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	50000700 	.word	0x50000700

08002298 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8002298:	b480      	push	{r7}
 800229a:	b083      	sub	sp, #12
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 80022a0:	bf00      	nop
 80022a2:	370c      	adds	r7, #12
 80022a4:	46bd      	mov	sp, r7
 80022a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022aa:	4770      	bx	lr

080022ac <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef* hadc)
{
 80022ac:	b480      	push	{r7}
 80022ae:	b083      	sub	sp, #12
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented 
            in the user file.
  */
}
 80022b4:	bf00      	nop
 80022b6:	370c      	adds	r7, #12
 80022b8:	46bd      	mov	sp, r7
 80022ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022be:	4770      	bx	lr

080022c0 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef* hadc)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow2Callback must be implemented in the user file.
  */
}
 80022c8:	bf00      	nop
 80022ca:	370c      	adds	r7, #12
 80022cc:	46bd      	mov	sp, r7
 80022ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d2:	4770      	bx	lr

080022d4 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non blocking mode. 
  * @param  hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef* hadc)
{
 80022d4:	b480      	push	{r7}
 80022d6:	b083      	sub	sp, #12
 80022d8:	af00      	add	r7, sp, #0
 80022da:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOoutOfWindow3Callback must be implemented in the user file.
  */
}
 80022dc:	bf00      	nop
 80022de:	370c      	adds	r7, #12
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b09b      	sub	sp, #108	@ 0x6c
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	6078      	str	r0, [r7, #4]
 80022f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80022f2:	2300      	movs	r3, #0
 80022f4:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmphadcSharingSameCommonRegister;
  uint32_t tmpOffsetShifted;
  __IO uint32_t wait_loop_index = 0U;
 80022f8:	2300      	movs	r3, #0
 80022fa:	60bb      	str	r3, [r7, #8]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(sConfig->Channel));
  }
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002302:	2b01      	cmp	r3, #1
 8002304:	d101      	bne.n	800230a <HAL_ADC_ConfigChannel+0x22>
 8002306:	2302      	movs	r3, #2
 8002308:	e2c8      	b.n	800289c <HAL_ADC_ConfigChannel+0x5b4>
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2201      	movs	r2, #1
 800230e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	689b      	ldr	r3, [r3, #8]
 8002318:	f003 0304 	and.w	r3, r3, #4
 800231c:	2b00      	cmp	r3, #0
 800231e:	f040 82ac 	bne.w	800287a <HAL_ADC_ConfigChannel+0x592>
  {
    /* Regular sequence configuration */
    /* For Rank 1 to 4U */
    if (sConfig->Rank < 5U)
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	2b04      	cmp	r3, #4
 8002328:	d81c      	bhi.n	8002364 <HAL_ADC_ConfigChannel+0x7c>
    {
      MODIFY_REG(hadc->Instance->SQR1,
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	685a      	ldr	r2, [r3, #4]
 8002334:	4613      	mov	r3, r2
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	4413      	add	r3, r2
 800233a:	005b      	lsls	r3, r3, #1
 800233c:	461a      	mov	r2, r3
 800233e:	231f      	movs	r3, #31
 8002340:	4093      	lsls	r3, r2
 8002342:	43db      	mvns	r3, r3
 8002344:	4019      	ands	r1, r3
 8002346:	683b      	ldr	r3, [r7, #0]
 8002348:	6818      	ldr	r0, [r3, #0]
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	685a      	ldr	r2, [r3, #4]
 800234e:	4613      	mov	r3, r2
 8002350:	005b      	lsls	r3, r3, #1
 8002352:	4413      	add	r3, r2
 8002354:	005b      	lsls	r3, r3, #1
 8002356:	fa00 f203 	lsl.w	r2, r0, r3
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	430a      	orrs	r2, r1
 8002360:	631a      	str	r2, [r3, #48]	@ 0x30
 8002362:	e063      	b.n	800242c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR1_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR1_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 5 to 9U */
    else if (sConfig->Rank < 10U)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	2b09      	cmp	r3, #9
 800236a:	d81e      	bhi.n	80023aa <HAL_ADC_ConfigChannel+0xc2>
    {
      MODIFY_REG(hadc->Instance->SQR2,
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685a      	ldr	r2, [r3, #4]
 8002376:	4613      	mov	r3, r2
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	4413      	add	r3, r2
 800237c:	005b      	lsls	r3, r3, #1
 800237e:	3b1e      	subs	r3, #30
 8002380:	221f      	movs	r2, #31
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	4019      	ands	r1, r3
 800238a:	683b      	ldr	r3, [r7, #0]
 800238c:	6818      	ldr	r0, [r3, #0]
 800238e:	683b      	ldr	r3, [r7, #0]
 8002390:	685a      	ldr	r2, [r3, #4]
 8002392:	4613      	mov	r3, r2
 8002394:	005b      	lsls	r3, r3, #1
 8002396:	4413      	add	r3, r2
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	3b1e      	subs	r3, #30
 800239c:	fa00 f203 	lsl.w	r2, r0, r3
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	430a      	orrs	r2, r1
 80023a6:	635a      	str	r2, [r3, #52]	@ 0x34
 80023a8:	e040      	b.n	800242c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR2_RK(ADC_SQR2_SQ5, sConfig->Rank)    ,
                 ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 10 to 14U */
    else if (sConfig->Rank < 15U)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	2b0e      	cmp	r3, #14
 80023b0:	d81e      	bhi.n	80023f0 <HAL_ADC_ConfigChannel+0x108>
    {
      MODIFY_REG(hadc->Instance->SQR3                        ,
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	685a      	ldr	r2, [r3, #4]
 80023bc:	4613      	mov	r3, r2
 80023be:	005b      	lsls	r3, r3, #1
 80023c0:	4413      	add	r3, r2
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	3b3c      	subs	r3, #60	@ 0x3c
 80023c6:	221f      	movs	r2, #31
 80023c8:	fa02 f303 	lsl.w	r3, r2, r3
 80023cc:	43db      	mvns	r3, r3
 80023ce:	4019      	ands	r1, r3
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	6818      	ldr	r0, [r3, #0]
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	4613      	mov	r3, r2
 80023da:	005b      	lsls	r3, r3, #1
 80023dc:	4413      	add	r3, r2
 80023de:	005b      	lsls	r3, r3, #1
 80023e0:	3b3c      	subs	r3, #60	@ 0x3c
 80023e2:	fa00 f203 	lsl.w	r2, r0, r3
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	430a      	orrs	r2, r1
 80023ec:	639a      	str	r2, [r3, #56]	@ 0x38
 80023ee:	e01d      	b.n	800242c <HAL_ADC_ConfigChannel+0x144>
                 ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
    }
    /* For Rank 15 to 16U */
    else
    {   
      MODIFY_REG(hadc->Instance->SQR4                        ,
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80023f6:	683b      	ldr	r3, [r7, #0]
 80023f8:	685a      	ldr	r2, [r3, #4]
 80023fa:	4613      	mov	r3, r2
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	4413      	add	r3, r2
 8002400:	005b      	lsls	r3, r3, #1
 8002402:	3b5a      	subs	r3, #90	@ 0x5a
 8002404:	221f      	movs	r2, #31
 8002406:	fa02 f303 	lsl.w	r3, r2, r3
 800240a:	43db      	mvns	r3, r3
 800240c:	4019      	ands	r1, r3
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	6818      	ldr	r0, [r3, #0]
 8002412:	683b      	ldr	r3, [r7, #0]
 8002414:	685a      	ldr	r2, [r3, #4]
 8002416:	4613      	mov	r3, r2
 8002418:	005b      	lsls	r3, r3, #1
 800241a:	4413      	add	r3, r2
 800241c:	005b      	lsls	r3, r3, #1
 800241e:	3b5a      	subs	r3, #90	@ 0x5a
 8002420:	fa00 f203 	lsl.w	r2, r0, r3
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	430a      	orrs	r2, r1
 800242a:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel sampling time                                                 */
  /*  - Channel offset                                                        */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR_INJECTED(hadc) == RESET)
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	689b      	ldr	r3, [r3, #8]
 8002432:	f003 030c 	and.w	r3, r3, #12
 8002436:	2b00      	cmp	r3, #0
 8002438:	f040 80e5 	bne.w	8002606 <HAL_ADC_ConfigChannel+0x31e>
  {
    /* Channel sampling time configuration */
    /* For channels 10 to 18U */
    if (sConfig->Channel >= ADC_CHANNEL_10)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	2b09      	cmp	r3, #9
 8002442:	d91c      	bls.n	800247e <HAL_ADC_ConfigChannel+0x196>
    {
      MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	6999      	ldr	r1, [r3, #24]
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	681a      	ldr	r2, [r3, #0]
 800244e:	4613      	mov	r3, r2
 8002450:	005b      	lsls	r3, r3, #1
 8002452:	4413      	add	r3, r2
 8002454:	3b1e      	subs	r3, #30
 8002456:	2207      	movs	r2, #7
 8002458:	fa02 f303 	lsl.w	r3, r2, r3
 800245c:	43db      	mvns	r3, r3
 800245e:	4019      	ands	r1, r3
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	6898      	ldr	r0, [r3, #8]
 8002464:	683b      	ldr	r3, [r7, #0]
 8002466:	681a      	ldr	r2, [r3, #0]
 8002468:	4613      	mov	r3, r2
 800246a:	005b      	lsls	r3, r3, #1
 800246c:	4413      	add	r3, r2
 800246e:	3b1e      	subs	r3, #30
 8002470:	fa00 f203 	lsl.w	r2, r0, r3
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	430a      	orrs	r2, r1
 800247a:	619a      	str	r2, [r3, #24]
 800247c:	e019      	b.n	80024b2 <HAL_ADC_ConfigChannel+0x1ca>
                 ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel)      ,
                 ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
    }
    else /* For channels 1 to 9U */
    {
      MODIFY_REG(hadc->Instance->SMPR1                             ,
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6959      	ldr	r1, [r3, #20]
 8002484:	683b      	ldr	r3, [r7, #0]
 8002486:	681a      	ldr	r2, [r3, #0]
 8002488:	4613      	mov	r3, r2
 800248a:	005b      	lsls	r3, r3, #1
 800248c:	4413      	add	r3, r2
 800248e:	2207      	movs	r2, #7
 8002490:	fa02 f303 	lsl.w	r3, r2, r3
 8002494:	43db      	mvns	r3, r3
 8002496:	4019      	ands	r1, r3
 8002498:	683b      	ldr	r3, [r7, #0]
 800249a:	6898      	ldr	r0, [r3, #8]
 800249c:	683b      	ldr	r3, [r7, #0]
 800249e:	681a      	ldr	r2, [r3, #0]
 80024a0:	4613      	mov	r3, r2
 80024a2:	005b      	lsls	r3, r3, #1
 80024a4:	4413      	add	r3, r2
 80024a6:	fa00 f203 	lsl.w	r2, r0, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	615a      	str	r2, [r3, #20]
    /* Configure the offset: offset enable/disable, channel, offset value */

    /* Shift the offset in function of the selected ADC resolution. */
    /* Offset has to be left-aligned on bit 11U, the LSB (right bits) are set  */
    /* to 0.                                                                  */
    tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, sConfig->Offset);
 80024b2:	683b      	ldr	r3, [r7, #0]
 80024b4:	695a      	ldr	r2, [r3, #20]
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68db      	ldr	r3, [r3, #12]
 80024bc:	08db      	lsrs	r3, r3, #3
 80024be:	f003 0303 	and.w	r3, r3, #3
 80024c2:	005b      	lsls	r3, r3, #1
 80024c4:	fa02 f303 	lsl.w	r3, r2, r3
 80024c8:	663b      	str	r3, [r7, #96]	@ 0x60
    
    /* Configure the selected offset register:                                */
    /* - Enable offset                                                        */
    /* - Set channel number                                                   */
    /* - Set offset value                                                     */
    switch (sConfig->OffsetNumber)
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	691b      	ldr	r3, [r3, #16]
 80024ce:	3b01      	subs	r3, #1
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d84f      	bhi.n	8002574 <HAL_ADC_ConfigChannel+0x28c>
 80024d4:	a201      	add	r2, pc, #4	@ (adr r2, 80024dc <HAL_ADC_ConfigChannel+0x1f4>)
 80024d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80024da:	bf00      	nop
 80024dc:	080024ed 	.word	0x080024ed
 80024e0:	0800250f 	.word	0x0800250f
 80024e4:	08002531 	.word	0x08002531
 80024e8:	08002553 	.word	0x08002553
    {
    case ADC_OFFSET_1:
      /* Configure offset register 1U */
      MODIFY_REG(hadc->Instance->OFR1               ,
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80024f2:	4b99      	ldr	r3, [pc, #612]	@ (8002758 <HAL_ADC_ConfigChannel+0x470>)
 80024f4:	4013      	ands	r3, r2
 80024f6:	683a      	ldr	r2, [r7, #0]
 80024f8:	6812      	ldr	r2, [r2, #0]
 80024fa:	0691      	lsls	r1, r2, #26
 80024fc:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80024fe:	430a      	orrs	r2, r1
 8002500:	431a      	orrs	r2, r3
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800250a:	661a      	str	r2, [r3, #96]	@ 0x60
                 ADC_OFR1_OFFSET1_CH |
                 ADC_OFR1_OFFSET1                   ,
                 ADC_OFR1_OFFSET1_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800250c:	e07b      	b.n	8002606 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_2:
      /* Configure offset register 2U */
      MODIFY_REG(hadc->Instance->OFR2               ,
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8002514:	4b90      	ldr	r3, [pc, #576]	@ (8002758 <HAL_ADC_ConfigChannel+0x470>)
 8002516:	4013      	ands	r3, r2
 8002518:	683a      	ldr	r2, [r7, #0]
 800251a:	6812      	ldr	r2, [r2, #0]
 800251c:	0691      	lsls	r1, r2, #26
 800251e:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002520:	430a      	orrs	r2, r1
 8002522:	431a      	orrs	r2, r3
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800252c:	665a      	str	r2, [r3, #100]	@ 0x64
                 ADC_OFR2_OFFSET2_CH |
                 ADC_OFR2_OFFSET2                   ,
                 ADC_OFR2_OFFSET2_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 800252e:	e06a      	b.n	8002606 <HAL_ADC_ConfigChannel+0x31e>
        
    case ADC_OFFSET_3:
      /* Configure offset register 3U */
      MODIFY_REG(hadc->Instance->OFR3               ,
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8002536:	4b88      	ldr	r3, [pc, #544]	@ (8002758 <HAL_ADC_ConfigChannel+0x470>)
 8002538:	4013      	ands	r3, r2
 800253a:	683a      	ldr	r2, [r7, #0]
 800253c:	6812      	ldr	r2, [r2, #0]
 800253e:	0691      	lsls	r1, r2, #26
 8002540:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002542:	430a      	orrs	r2, r1
 8002544:	431a      	orrs	r2, r3
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800254e:	669a      	str	r2, [r3, #104]	@ 0x68
                 ADC_OFR3_OFFSET3_CH |
                 ADC_OFR3_OFFSET3                   ,
                 ADC_OFR3_OFFSET3_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002550:	e059      	b.n	8002606 <HAL_ADC_ConfigChannel+0x31e>
    
    case ADC_OFFSET_4:
      /* Configure offset register 4U */
      MODIFY_REG(hadc->Instance->OFR4               ,
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 8002558:	4b7f      	ldr	r3, [pc, #508]	@ (8002758 <HAL_ADC_ConfigChannel+0x470>)
 800255a:	4013      	ands	r3, r2
 800255c:	683a      	ldr	r2, [r7, #0]
 800255e:	6812      	ldr	r2, [r2, #0]
 8002560:	0691      	lsls	r1, r2, #26
 8002562:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8002564:	430a      	orrs	r2, r1
 8002566:	431a      	orrs	r2, r3
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8002570:	66da      	str	r2, [r3, #108]	@ 0x6c
                 ADC_OFR4_OFFSET4_CH |
                 ADC_OFR4_OFFSET4                   ,
                 ADC_OFR4_OFFSET4_EN               |
                 ADC_OFR_CHANNEL(sConfig->Channel) |
                 tmpOffsetShifted                    );
      break;
 8002572:	e048      	b.n	8002606 <HAL_ADC_ConfigChannel+0x31e>
    
    /* Case ADC_OFFSET_NONE */
    default :
    /* Scan OFR1, OFR2, OFR3, OFR4 to check if the selected channel is        */
    /* enabled. If this is the case, offset OFRx is disabled.                 */
      if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800257a:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800257e:	683b      	ldr	r3, [r7, #0]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	069b      	lsls	r3, r3, #26
 8002584:	429a      	cmp	r2, r3
 8002586:	d107      	bne.n	8002598 <HAL_ADC_ConfigChannel+0x2b0>
      {
        /* Disable offset OFR1*/
        CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_OFFSET1_EN);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002596:	661a      	str	r2, [r3, #96]	@ 0x60
      }
      if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800259e:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	069b      	lsls	r3, r3, #26
 80025a8:	429a      	cmp	r2, r3
 80025aa:	d107      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x2d4>
      {
        /* Disable offset OFR2*/
        CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_OFFSET2_EN); 
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025ba:	665a      	str	r2, [r3, #100]	@ 0x64
      }
      if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80025c2:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	069b      	lsls	r3, r3, #26
 80025cc:	429a      	cmp	r2, r3
 80025ce:	d107      	bne.n	80025e0 <HAL_ADC_ConfigChannel+0x2f8>
      {
        /* Disable offset OFR3*/
        CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_OFFSET3_EN);
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 80025de:	669a      	str	r2, [r3, #104]	@ 0x68
      }
      if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80025e6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	069b      	lsls	r3, r3, #26
 80025f0:	429a      	cmp	r2, r3
 80025f2:	d107      	bne.n	8002604 <HAL_ADC_ConfigChannel+0x31c>
      {
        /* Disable offset OFR4*/
        CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_OFFSET4_EN);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 8002602:	66da      	str	r2, [r3, #108]	@ 0x6c
      }
      break;
 8002604:	bf00      	nop

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated only when ADC is disabled:                */
  /*  - Single or differential mode                                           */
  /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	689b      	ldr	r3, [r3, #8]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b01      	cmp	r3, #1
 8002612:	d108      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x33e>
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	f003 0301 	and.w	r3, r3, #1
 800261e:	2b01      	cmp	r3, #1
 8002620:	d101      	bne.n	8002626 <HAL_ADC_ConfigChannel+0x33e>
 8002622:	2301      	movs	r3, #1
 8002624:	e000      	b.n	8002628 <HAL_ADC_ConfigChannel+0x340>
 8002626:	2300      	movs	r3, #0
 8002628:	2b00      	cmp	r3, #0
 800262a:	f040 8131 	bne.w	8002890 <HAL_ADC_ConfigChannel+0x5a8>
  {
    /* Configuration of differential mode */
    if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	68db      	ldr	r3, [r3, #12]
 8002632:	2b01      	cmp	r3, #1
 8002634:	d00f      	beq.n	8002656 <HAL_ADC_ConfigChannel+0x36e>
    {
      /* Disable differential mode (default mode: single-ended) */
      CLEAR_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800263e:	683b      	ldr	r3, [r7, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	2201      	movs	r2, #1
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	43da      	mvns	r2, r3
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	400a      	ands	r2, r1
 8002650:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
 8002654:	e049      	b.n	80026ea <HAL_ADC_ConfigChannel+0x402>
    }
    else
    {
      /* Enable differential mode */
      SET_BIT(hadc->Instance->DIFSEL, ADC_DIFSEL_CHANNEL(sConfig->Channel));
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f8d3 10b0 	ldr.w	r1, [r3, #176]	@ 0xb0
 800265e:	683b      	ldr	r3, [r7, #0]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	2201      	movs	r2, #1
 8002664:	409a      	lsls	r2, r3
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	430a      	orrs	r2, r1
 800266c:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
      
      /* Channel sampling time configuration (channel ADC_INx +1              */
      /* corresponding to differential negative input).                       */
      /* For channels 10 to 18U */
      if (sConfig->Channel >= ADC_CHANNEL_10)
 8002670:	683b      	ldr	r3, [r7, #0]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	2b09      	cmp	r3, #9
 8002676:	d91c      	bls.n	80026b2 <HAL_ADC_ConfigChannel+0x3ca>
      {
        MODIFY_REG(hadc->Instance->SMPR2,
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	6999      	ldr	r1, [r3, #24]
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	681a      	ldr	r2, [r3, #0]
 8002682:	4613      	mov	r3, r2
 8002684:	005b      	lsls	r3, r3, #1
 8002686:	4413      	add	r3, r2
 8002688:	3b1b      	subs	r3, #27
 800268a:	2207      	movs	r2, #7
 800268c:	fa02 f303 	lsl.w	r3, r2, r3
 8002690:	43db      	mvns	r3, r3
 8002692:	4019      	ands	r1, r3
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	6898      	ldr	r0, [r3, #8]
 8002698:	683b      	ldr	r3, [r7, #0]
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	005b      	lsls	r3, r3, #1
 80026a0:	4413      	add	r3, r2
 80026a2:	3b1b      	subs	r3, #27
 80026a4:	fa00 f203 	lsl.w	r2, r0, r3
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	430a      	orrs	r2, r1
 80026ae:	619a      	str	r2, [r3, #24]
 80026b0:	e01b      	b.n	80026ea <HAL_ADC_ConfigChannel+0x402>
                   ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel +1U)      ,
                   ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel +1U) );
      }
      else /* For channels 1 to 9U */
      {
        MODIFY_REG(hadc->Instance->SMPR1,
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	6959      	ldr	r1, [r3, #20]
 80026b8:	683b      	ldr	r3, [r7, #0]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	1c5a      	adds	r2, r3, #1
 80026be:	4613      	mov	r3, r2
 80026c0:	005b      	lsls	r3, r3, #1
 80026c2:	4413      	add	r3, r2
 80026c4:	2207      	movs	r2, #7
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	43db      	mvns	r3, r3
 80026cc:	4019      	ands	r1, r3
 80026ce:	683b      	ldr	r3, [r7, #0]
 80026d0:	6898      	ldr	r0, [r3, #8]
 80026d2:	683b      	ldr	r3, [r7, #0]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	1c5a      	adds	r2, r3, #1
 80026d8:	4613      	mov	r3, r2
 80026da:	005b      	lsls	r3, r3, #1
 80026dc:	4413      	add	r3, r2
 80026de:	fa00 f203 	lsl.w	r2, r0, r3
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	681b      	ldr	r3, [r3, #0]
 80026e6:	430a      	orrs	r2, r1
 80026e8:	615a      	str	r2, [r3, #20]
       
    /* Configuration of common ADC parameters                                 */
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may be up to 4 ADC and 2 common   */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80026f2:	d004      	beq.n	80026fe <HAL_ADC_ConfigChannel+0x416>
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	4a18      	ldr	r2, [pc, #96]	@ (800275c <HAL_ADC_ConfigChannel+0x474>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d101      	bne.n	8002702 <HAL_ADC_ConfigChannel+0x41a>
 80026fe:	4b18      	ldr	r3, [pc, #96]	@ (8002760 <HAL_ADC_ConfigChannel+0x478>)
 8002700:	e000      	b.n	8002704 <HAL_ADC_ConfigChannel+0x41c>
 8002702:	4b18      	ldr	r3, [pc, #96]	@ (8002764 <HAL_ADC_ConfigChannel+0x47c>)
 8002704:	65fb      	str	r3, [r7, #92]	@ 0x5c
  
    /* If the requested internal measurement path has already been enabled,   */
    /* bypass the configuration processing.                                   */
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	2b10      	cmp	r3, #16
 800270c:	d105      	bne.n	800271a <HAL_ADC_ConfigChannel+0x432>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800270e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if (( (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8002716:	2b00      	cmp	r3, #0
 8002718:	d015      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800271a:	683b      	ldr	r3, [r7, #0]
 800271c:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_TSEN))            ) ||
 800271e:	2b11      	cmp	r3, #17
 8002720:	d105      	bne.n	800272e <HAL_ADC_ConfigChannel+0x446>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002722:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002724:	689b      	ldr	r3, [r3, #8]
 8002726:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
        ( (sConfig->Channel == ADC_CHANNEL_VBAT)       &&
 800272a:	2b00      	cmp	r3, #0
 800272c:	d00b      	beq.n	8002746 <HAL_ADC_ConfigChannel+0x45e>
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 800272e:	683b      	ldr	r3, [r7, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VBATEN))          ) ||
 8002732:	2b12      	cmp	r3, #18
 8002734:	f040 80ac 	bne.w	8002890 <HAL_ADC_ConfigChannel+0x5a8>
          (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_VREFEN)))
 8002738:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800273a:	689b      	ldr	r3, [r3, #8]
 800273c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
        ( (sConfig->Channel == ADC_CHANNEL_VREFINT)    &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	f040 80a5 	bne.w	8002890 <HAL_ADC_ConfigChannel+0x5a8>
       )
    {
      /* Configuration of common ADC parameters (continuation)                */
      /* Set handle of the other ADC sharing the same common register         */
      ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800274e:	d10b      	bne.n	8002768 <HAL_ADC_ConfigChannel+0x480>
 8002750:	4b02      	ldr	r3, [pc, #8]	@ (800275c <HAL_ADC_ConfigChannel+0x474>)
 8002752:	60fb      	str	r3, [r7, #12]
 8002754:	e023      	b.n	800279e <HAL_ADC_ConfigChannel+0x4b6>
 8002756:	bf00      	nop
 8002758:	83fff000 	.word	0x83fff000
 800275c:	50000100 	.word	0x50000100
 8002760:	50000300 	.word	0x50000300
 8002764:	50000700 	.word	0x50000700
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	4a4e      	ldr	r2, [pc, #312]	@ (80028a8 <HAL_ADC_ConfigChannel+0x5c0>)
 800276e:	4293      	cmp	r3, r2
 8002770:	d103      	bne.n	800277a <HAL_ADC_ConfigChannel+0x492>
 8002772:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002776:	60fb      	str	r3, [r7, #12]
 8002778:	e011      	b.n	800279e <HAL_ADC_ConfigChannel+0x4b6>
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	4a4b      	ldr	r2, [pc, #300]	@ (80028ac <HAL_ADC_ConfigChannel+0x5c4>)
 8002780:	4293      	cmp	r3, r2
 8002782:	d102      	bne.n	800278a <HAL_ADC_ConfigChannel+0x4a2>
 8002784:	4b4a      	ldr	r3, [pc, #296]	@ (80028b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002786:	60fb      	str	r3, [r7, #12]
 8002788:	e009      	b.n	800279e <HAL_ADC_ConfigChannel+0x4b6>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	4a48      	ldr	r2, [pc, #288]	@ (80028b0 <HAL_ADC_ConfigChannel+0x5c8>)
 8002790:	4293      	cmp	r3, r2
 8002792:	d102      	bne.n	800279a <HAL_ADC_ConfigChannel+0x4b2>
 8002794:	4b45      	ldr	r3, [pc, #276]	@ (80028ac <HAL_ADC_ConfigChannel+0x5c4>)
 8002796:	60fb      	str	r3, [r7, #12]
 8002798:	e001      	b.n	800279e <HAL_ADC_ConfigChannel+0x4b6>
 800279a:	2300      	movs	r3, #0
 800279c:	60fb      	str	r3, [r7, #12]
      
      /* Software is allowed to change common parameters only when all ADCs   */
      /* of the common group are disabled.                                    */
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	689b      	ldr	r3, [r3, #8]
 80027a4:	f003 0303 	and.w	r3, r3, #3
 80027a8:	2b01      	cmp	r3, #1
 80027aa:	d108      	bne.n	80027be <HAL_ADC_ConfigChannel+0x4d6>
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	2b01      	cmp	r3, #1
 80027b8:	d101      	bne.n	80027be <HAL_ADC_ConfigChannel+0x4d6>
 80027ba:	2301      	movs	r3, #1
 80027bc:	e000      	b.n	80027c0 <HAL_ADC_ConfigChannel+0x4d8>
 80027be:	2300      	movs	r3, #0
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d150      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x57e>
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027c4:	68fb      	ldr	r3, [r7, #12]
      if ((ADC_IS_ENABLE(hadc) == RESET)                                    &&
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	d010      	beq.n	80027ec <HAL_ADC_ConfigChannel+0x504>
            (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )   )
 80027ca:	68fb      	ldr	r3, [r7, #12]
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 0303 	and.w	r3, r3, #3
 80027d2:	2b01      	cmp	r3, #1
 80027d4:	d107      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x4fe>
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0301 	and.w	r3, r3, #1
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_ADC_ConfigChannel+0x4fe>
 80027e2:	2301      	movs	r3, #1
 80027e4:	e000      	b.n	80027e8 <HAL_ADC_ConfigChannel+0x500>
 80027e6:	2300      	movs	r3, #0
          ( (tmphadcSharingSameCommonRegister.Instance == NULL)         ||
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d13c      	bne.n	8002866 <HAL_ADC_ConfigChannel+0x57e>
      {
        /* If Channel_16 is selected, enable Temp. sensor measurement path    */
        /* Note: Temp. sensor internal channels available on ADC1 only        */
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 80027ec:	683b      	ldr	r3, [r7, #0]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	2b10      	cmp	r3, #16
 80027f2:	d11d      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x548>
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80027fc:	d118      	bne.n	8002830 <HAL_ADC_ConfigChannel+0x548>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_TSEN);
 80027fe:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002800:	689b      	ldr	r3, [r3, #8]
 8002802:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002806:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002808:	609a      	str	r2, [r3, #8]
          
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 800280a:	4b2a      	ldr	r3, [pc, #168]	@ (80028b4 <HAL_ADC_ConfigChannel+0x5cc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4a2a      	ldr	r2, [pc, #168]	@ (80028b8 <HAL_ADC_ConfigChannel+0x5d0>)
 8002810:	fba2 2303 	umull	r2, r3, r2, r3
 8002814:	0c9a      	lsrs	r2, r3, #18
 8002816:	4613      	mov	r3, r2
 8002818:	009b      	lsls	r3, r3, #2
 800281a:	4413      	add	r3, r2
 800281c:	005b      	lsls	r3, r3, #1
 800281e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002820:	e002      	b.n	8002828 <HAL_ADC_ConfigChannel+0x540>
          {
            wait_loop_index--;
 8002822:	68bb      	ldr	r3, [r7, #8]
 8002824:	3b01      	subs	r3, #1
 8002826:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	2b00      	cmp	r3, #0
 800282c:	d1f9      	bne.n	8002822 <HAL_ADC_ConfigChannel+0x53a>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800282e:	e02e      	b.n	800288e <HAL_ADC_ConfigChannel+0x5a6>
          }
        }
        /* If Channel_17 is selected, enable VBAT measurement path            */
        /* Note: VBAT internal channels available on ADC1 only                */
        else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && (hadc->Instance == ADC1))
 8002830:	683b      	ldr	r3, [r7, #0]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	2b11      	cmp	r3, #17
 8002836:	d10b      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x568>
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002840:	d106      	bne.n	8002850 <HAL_ADC_ConfigChannel+0x568>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VBATEN);
 8002842:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002844:	689b      	ldr	r3, [r3, #8]
 8002846:	f043 7280 	orr.w	r2, r3, #16777216	@ 0x1000000
 800284a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800284c:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800284e:	e01e      	b.n	800288e <HAL_ADC_ConfigChannel+0x5a6>
        }
        /* If Channel_18 is selected, enable VREFINT measurement path         */
        /* Note: VrefInt internal channels available on all ADCs, but only    */
        /*       one ADC is allowed to be connected to VrefInt at the same    */
        /*       time.                                                        */
        else if (sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002850:	683b      	ldr	r3, [r7, #0]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	2b12      	cmp	r3, #18
 8002856:	d11a      	bne.n	800288e <HAL_ADC_ConfigChannel+0x5a6>
        {
          SET_BIT(tmpADC_Common->CCR, ADC_CCR_VREFEN);
 8002858:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 800285a:	689b      	ldr	r3, [r3, #8]
 800285c:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002860:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002862:	609a      	str	r2, [r3, #8]
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 8002864:	e013      	b.n	800288e <HAL_ADC_ConfigChannel+0x5a6>
      /* enabled and other ADC of the common group are enabled, internal      */
      /* measurement paths cannot be enabled.                                 */
      else  
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286a:	f043 0220 	orr.w	r2, r3, #32
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	@ 0x40
        
        tmp_hal_status = HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 8002878:	e00a      	b.n	8002890 <HAL_ADC_ConfigChannel+0x5a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800287e:	f043 0220 	orr.w	r2, r3, #32
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	f887 3067 	strb.w	r3, [r7, #103]	@ 0x67
 800288c:	e000      	b.n	8002890 <HAL_ADC_ConfigChannel+0x5a8>
        if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && (hadc->Instance == ADC1))
 800288e:	bf00      	nop
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	2200      	movs	r2, #0
 8002894:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002898:	f897 3067 	ldrb.w	r3, [r7, #103]	@ 0x67
}
 800289c:	4618      	mov	r0, r3
 800289e:	376c      	adds	r7, #108	@ 0x6c
 80028a0:	46bd      	mov	sp, r7
 80028a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a6:	4770      	bx	lr
 80028a8:	50000100 	.word	0x50000100
 80028ac:	50000400 	.word	0x50000400
 80028b0:	50000500 	.word	0x50000500
 80028b4:	20000000 	.word	0x20000000
 80028b8:	431bde83 	.word	0x431bde83

080028bc <HAL_ADCEx_MultiModeConfigChannel>:
  * @param  hadc ADC handle
  * @param  multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef* hadc, ADC_MultiModeTypeDef* multimode)
{
 80028bc:	b480      	push	{r7}
 80028be:	b099      	sub	sp, #100	@ 0x64
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028c6:	2300      	movs	r3, #0
 80028c8:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
    assert_param(IS_ADC_DMA_ACCESS_MODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }
  
  /* Set handle of the other ADC sharing the same common register             */
  ADC_COMMON_ADC_OTHER(hadc, &tmphadcSharingSameCommonRegister);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80028d4:	d102      	bne.n	80028dc <HAL_ADCEx_MultiModeConfigChannel+0x20>
 80028d6:	4b6d      	ldr	r3, [pc, #436]	@ (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028d8:	60bb      	str	r3, [r7, #8]
 80028da:	e01a      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	681b      	ldr	r3, [r3, #0]
 80028e0:	4a6a      	ldr	r2, [pc, #424]	@ (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d103      	bne.n	80028ee <HAL_ADCEx_MultiModeConfigChannel+0x32>
 80028e6:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80028ea:	60bb      	str	r3, [r7, #8]
 80028ec:	e011      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4a67      	ldr	r2, [pc, #412]	@ (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 80028f4:	4293      	cmp	r3, r2
 80028f6:	d102      	bne.n	80028fe <HAL_ADCEx_MultiModeConfigChannel+0x42>
 80028f8:	4b66      	ldr	r3, [pc, #408]	@ (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 80028fa:	60bb      	str	r3, [r7, #8]
 80028fc:	e009      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a64      	ldr	r2, [pc, #400]	@ (8002a94 <HAL_ADCEx_MultiModeConfigChannel+0x1d8>)
 8002904:	4293      	cmp	r3, r2
 8002906:	d102      	bne.n	800290e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8002908:	4b61      	ldr	r3, [pc, #388]	@ (8002a90 <HAL_ADCEx_MultiModeConfigChannel+0x1d4>)
 800290a:	60bb      	str	r3, [r7, #8]
 800290c:	e001      	b.n	8002912 <HAL_ADCEx_MultiModeConfigChannel+0x56>
 800290e:	2300      	movs	r3, #0
 8002910:	60bb      	str	r3, [r7, #8]
  if (tmphadcSharingSameCommonRegister.Instance == NULL)
 8002912:	68bb      	ldr	r3, [r7, #8]
 8002914:	2b00      	cmp	r3, #0
 8002916:	d101      	bne.n	800291c <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Return function status */
    return HAL_ERROR;
 8002918:	2301      	movs	r3, #1
 800291a:	e0b0      	b.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002922:	2b01      	cmp	r3, #1
 8002924:	d101      	bne.n	800292a <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8002926:	2302      	movs	r3, #2
 8002928:	e0a9      	b.n	8002a7e <HAL_ADCEx_MultiModeConfigChannel+0x1c2>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2201      	movs	r2, #1
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  if ( (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET) 
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	689b      	ldr	r3, [r3, #8]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f040 808d 	bne.w	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
    && (ADC_IS_CONVERSION_ONGOING_REGULAR(&tmphadcSharingSameCommonRegister) == RESET) )
 8002942:	68bb      	ldr	r3, [r7, #8]
 8002944:	689b      	ldr	r3, [r3, #8]
 8002946:	f003 0304 	and.w	r3, r3, #4
 800294a:	2b00      	cmp	r3, #0
 800294c:	f040 8086 	bne.w	8002a5c <HAL_ADCEx_MultiModeConfigChannel+0x1a0>
  {
    /* Pointer to the common control register to which is belonging hadc      */
    /* (Depending on STM32F3 product, there may have up to 4 ADC and 2 common */
    /* control registers)                                                     */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002958:	d004      	beq.n	8002964 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	4a4b      	ldr	r2, [pc, #300]	@ (8002a8c <HAL_ADCEx_MultiModeConfigChannel+0x1d0>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d101      	bne.n	8002968 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8002964:	4b4c      	ldr	r3, [pc, #304]	@ (8002a98 <HAL_ADCEx_MultiModeConfigChannel+0x1dc>)
 8002966:	e000      	b.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8002968:	4b4c      	ldr	r3, [pc, #304]	@ (8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>)
 800296a:	65bb      	str	r3, [r7, #88]	@ 0x58
    
    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b00      	cmp	r3, #0
 8002972:	d040      	beq.n	80029f6 <HAL_ADCEx_MultiModeConfigChannel+0x13a>
    {
      /* Configuration of ADC common group ADC1&ADC2, ADC3&ADC4 if available    */
      /* (ADC2, ADC3, ADC4 availability depends on STM32 product)               */
      /*  - DMA access mode                                                     */
      MODIFY_REG(tmpADC_Common->CCR                                          ,
 8002974:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002976:	689b      	ldr	r3, [r3, #8]
 8002978:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800297c:	683b      	ldr	r3, [r7, #0]
 800297e:	6859      	ldr	r1, [r3, #4]
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002986:	035b      	lsls	r3, r3, #13
 8002988:	430b      	orrs	r3, r1
 800298a:	431a      	orrs	r2, r3
 800298c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800298e:	609a      	str	r2, [r3, #8]
      /*       parameters, their setting is bypassed without error reporting    */
      /*       (as it can be the expected behaviour in case of intended action  */
      /*       to update parameter above (which fulfills the ADC state          */
      /*       condition: no conversion on going on group regular)              */
      /*       on the fly).                                                     */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689b      	ldr	r3, [r3, #8]
 8002996:	f003 0303 	and.w	r3, r3, #3
 800299a:	2b01      	cmp	r3, #1
 800299c:	d108      	bne.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	f003 0301 	and.w	r3, r3, #1
 80029a8:	2b01      	cmp	r3, #1
 80029aa:	d101      	bne.n	80029b0 <HAL_ADCEx_MultiModeConfigChannel+0xf4>
 80029ac:	2301      	movs	r3, #1
 80029ae:	e000      	b.n	80029b2 <HAL_ADCEx_MultiModeConfigChannel+0xf6>
 80029b0:	2300      	movs	r3, #0
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d15c      	bne.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	f003 0303 	and.w	r3, r3, #3
 80029be:	2b01      	cmp	r3, #1
 80029c0:	d107      	bne.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80029c2:	68bb      	ldr	r3, [r7, #8]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0301 	and.w	r3, r3, #1
 80029ca:	2b01      	cmp	r3, #1
 80029cc:	d101      	bne.n	80029d2 <HAL_ADCEx_MultiModeConfigChannel+0x116>
 80029ce:	2301      	movs	r3, #1
 80029d0:	e000      	b.n	80029d4 <HAL_ADCEx_MultiModeConfigChannel+0x118>
 80029d2:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d14b      	bne.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        MODIFY_REG(tmpADC_Common->CCR                                          ,
 80029d8:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029da:	689b      	ldr	r3, [r3, #8]
 80029dc:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 80029e0:	f023 030f 	bic.w	r3, r3, #15
 80029e4:	683a      	ldr	r2, [r7, #0]
 80029e6:	6811      	ldr	r1, [r2, #0]
 80029e8:	683a      	ldr	r2, [r7, #0]
 80029ea:	6892      	ldr	r2, [r2, #8]
 80029ec:	430a      	orrs	r2, r1
 80029ee:	431a      	orrs	r2, r3
 80029f0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f2:	609a      	str	r2, [r3, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 80029f4:	e03c      	b.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
                   multimode->TwoSamplingDelay                                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80029f6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80029fe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a00:	609a      	str	r2, [r3, #8]
      
      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 0303 	and.w	r3, r3, #3
 8002a0c:	2b01      	cmp	r3, #1
 8002a0e:	d108      	bne.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0301 	and.w	r3, r3, #1
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_ADCEx_MultiModeConfigChannel+0x166>
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e000      	b.n	8002a24 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a22:	2300      	movs	r3, #0
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	d123      	bne.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
          (ADC_IS_ENABLE(&tmphadcSharingSameCommonRegister) == RESET)   )
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	689b      	ldr	r3, [r3, #8]
 8002a2c:	f003 0303 	and.w	r3, r3, #3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d107      	bne.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	f003 0301 	and.w	r3, r3, #1
 8002a3c:	2b01      	cmp	r3, #1
 8002a3e:	d101      	bne.n	8002a44 <HAL_ADCEx_MultiModeConfigChannel+0x188>
 8002a40:	2301      	movs	r3, #1
 8002a42:	e000      	b.n	8002a46 <HAL_ADCEx_MultiModeConfigChannel+0x18a>
 8002a44:	2300      	movs	r3, #0
      if ((ADC_IS_ENABLE(hadc) == RESET)                              &&
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d112      	bne.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MULTI | ADC_CCR_DELAY);
 8002a4a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8002a52:	f023 030f 	bic.w	r3, r3, #15
 8002a56:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002a58:	6093      	str	r3, [r2, #8]
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a5a:	e009      	b.n	8002a70 <HAL_ADCEx_MultiModeConfigChannel+0x1b4>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a60:	f043 0220 	orr.w	r2, r3, #32
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	641a      	str	r2, [r3, #64]	@ 0x40
    
    tmp_hal_status = HAL_ERROR;
 8002a68:	2301      	movs	r3, #1
 8002a6a:	f887 305f 	strb.w	r3, [r7, #95]	@ 0x5f
 8002a6e:	e000      	b.n	8002a72 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
    if(multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a70:	bf00      	nop
  }
    
    
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	2200      	movs	r2, #0
 8002a76:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  
  /* Return function status */
  return tmp_hal_status;
 8002a7a:	f897 305f 	ldrb.w	r3, [r7, #95]	@ 0x5f
} 
 8002a7e:	4618      	mov	r0, r3
 8002a80:	3764      	adds	r7, #100	@ 0x64
 8002a82:	46bd      	mov	sp, r7
 8002a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a88:	4770      	bx	lr
 8002a8a:	bf00      	nop
 8002a8c:	50000100 	.word	0x50000100
 8002a90:	50000400 	.word	0x50000400
 8002a94:	50000500 	.word	0x50000500
 8002a98:	50000300 	.word	0x50000300
 8002a9c:	50000700 	.word	0x50000700

08002aa0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b084      	sub	sp, #16
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002aa8:	2300      	movs	r3, #0
 8002aaa:	60fb      	str	r3, [r7, #12]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	689b      	ldr	r3, [r3, #8]
 8002ab2:	f003 0303 	and.w	r3, r3, #3
 8002ab6:	2b01      	cmp	r3, #1
 8002ab8:	d108      	bne.n	8002acc <ADC_Enable+0x2c>
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	681b      	ldr	r3, [r3, #0]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	f003 0301 	and.w	r3, r3, #1
 8002ac4:	2b01      	cmp	r3, #1
 8002ac6:	d101      	bne.n	8002acc <ADC_Enable+0x2c>
 8002ac8:	2301      	movs	r3, #1
 8002aca:	e000      	b.n	8002ace <ADC_Enable+0x2e>
 8002acc:	2300      	movs	r3, #0
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d143      	bne.n	8002b5a <ADC_Enable+0xba>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	681b      	ldr	r3, [r3, #0]
 8002ad6:	689a      	ldr	r2, [r3, #8]
 8002ad8:	4b22      	ldr	r3, [pc, #136]	@ (8002b64 <ADC_Enable+0xc4>)
 8002ada:	4013      	ands	r3, r2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d00d      	beq.n	8002afc <ADC_Enable+0x5c>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ae4:	f043 0210 	orr.w	r2, r3, #16
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	641a      	str	r2, [r3, #64]	@ 0x40
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002af0:	f043 0201 	orr.w	r2, r3, #1
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	645a      	str	r2, [r3, #68]	@ 0x44
      
      return HAL_ERROR;
 8002af8:	2301      	movs	r3, #1
 8002afa:	e02f      	b.n	8002b5c <ADC_Enable+0xbc>
    }
    
    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	609a      	str	r2, [r3, #8]
    
    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();  
 8002b0c:	f7fe fd52 	bl	80015b4 <HAL_GetTick>
 8002b10:	60f8      	str	r0, [r7, #12]
    
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b12:	e01b      	b.n	8002b4c <ADC_Enable+0xac>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b14:	f7fe fd4e 	bl	80015b4 <HAL_GetTick>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	1ad3      	subs	r3, r2, r3
 8002b1e:	2b02      	cmp	r3, #2
 8002b20:	d914      	bls.n	8002b4c <ADC_Enable+0xac>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b01      	cmp	r3, #1
 8002b2e:	d00d      	beq.n	8002b4c <ADC_Enable+0xac>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b34:	f043 0210 	orr.w	r2, r3, #16
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b40:	f043 0201 	orr.w	r2, r3, #1
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002b48:	2301      	movs	r3, #1
 8002b4a:	e007      	b.n	8002b5c <ADC_Enable+0xbc>
    while(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f003 0301 	and.w	r3, r3, #1
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d1dc      	bne.n	8002b14 <ADC_Enable+0x74>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002b5a:	2300      	movs	r3, #0
}
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	3710      	adds	r7, #16
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	8000003f 	.word	0x8000003f

08002b68 <ADC_Disable>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef* hadc)
{
 8002b68:	b580      	push	{r7, lr}
 8002b6a:	b084      	sub	sp, #16
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b70:	2300      	movs	r3, #0
 8002b72:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /* disabled.                                                                */
  if (ADC_IS_ENABLE(hadc) != RESET )
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 0303 	and.w	r3, r3, #3
 8002b7e:	2b01      	cmp	r3, #1
 8002b80:	d108      	bne.n	8002b94 <ADC_Disable+0x2c>
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f003 0301 	and.w	r3, r3, #1
 8002b8c:	2b01      	cmp	r3, #1
 8002b8e:	d101      	bne.n	8002b94 <ADC_Disable+0x2c>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <ADC_Disable+0x2e>
 8002b94:	2300      	movs	r3, #0
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d047      	beq.n	8002c2a <ADC_Disable+0xc2>
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if (ADC_DISABLING_CONDITIONS(hadc) != RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 030d 	and.w	r3, r3, #13
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d10f      	bne.n	8002bc8 <ADC_Disable+0x60>
    {
      /* Disable the ADC peripheral */
      __HAL_ADC_DISABLE(hadc);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	689a      	ldr	r2, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f042 0202 	orr.w	r2, r2, #2
 8002bb6:	609a      	str	r2, [r3, #8]
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	2203      	movs	r2, #3
 8002bbe:	601a      	str	r2, [r3, #0]
      
      return HAL_ERROR;
    }
     
    /* Wait for ADC effectively disabled */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe fcf8 	bl	80015b4 <HAL_GetTick>
 8002bc4:	60f8      	str	r0, [r7, #12]
    
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bc6:	e029      	b.n	8002c1c <ADC_Disable+0xb4>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002bcc:	f043 0210 	orr.w	r2, r3, #16
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	@ 0x40
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bd8:	f043 0201 	orr.w	r2, r3, #1
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	645a      	str	r2, [r3, #68]	@ 0x44
      return HAL_ERROR;
 8002be0:	2301      	movs	r3, #1
 8002be2:	e023      	b.n	8002c2c <ADC_Disable+0xc4>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002be4:	f7fe fce6 	bl	80015b4 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d914      	bls.n	8002c1c <ADC_Disable+0xb4>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	689b      	ldr	r3, [r3, #8]
 8002bf8:	f003 0301 	and.w	r3, r3, #1
 8002bfc:	2b01      	cmp	r3, #1
 8002bfe:	d10d      	bne.n	8002c1c <ADC_Disable+0xb4>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c04:	f043 0210 	orr.w	r2, r3, #16
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c10:	f043 0201 	orr.w	r2, r3, #1
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	645a      	str	r2, [r3, #68]	@ 0x44

          return HAL_ERROR;
 8002c18:	2301      	movs	r3, #1
 8002c1a:	e007      	b.n	8002c2c <ADC_Disable+0xc4>
    while(HAL_IS_BIT_SET(hadc->Instance->CR, ADC_CR_ADEN))
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	689b      	ldr	r3, [r3, #8]
 8002c22:	f003 0301 	and.w	r3, r3, #1
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d0dc      	beq.n	8002be4 <ADC_Disable+0x7c>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c2a:	2300      	movs	r3, #0
}
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	3710      	adds	r7, #16
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c34:	b480      	push	{r7}
 8002c36:	b085      	sub	sp, #20
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	f003 0307 	and.w	r3, r3, #7
 8002c42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c44:	4b0c      	ldr	r3, [pc, #48]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c46:	68db      	ldr	r3, [r3, #12]
 8002c48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c4a:	68ba      	ldr	r2, [r7, #8]
 8002c4c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c50:	4013      	ands	r3, r2
 8002c52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c58:	68bb      	ldr	r3, [r7, #8]
 8002c5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c5c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c60:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c66:	4a04      	ldr	r2, [pc, #16]	@ (8002c78 <__NVIC_SetPriorityGrouping+0x44>)
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	60d3      	str	r3, [r2, #12]
}
 8002c6c:	bf00      	nop
 8002c6e:	3714      	adds	r7, #20
 8002c70:	46bd      	mov	sp, r7
 8002c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c76:	4770      	bx	lr
 8002c78:	e000ed00 	.word	0xe000ed00

08002c7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c80:	4b04      	ldr	r3, [pc, #16]	@ (8002c94 <__NVIC_GetPriorityGrouping+0x18>)
 8002c82:	68db      	ldr	r3, [r3, #12]
 8002c84:	0a1b      	lsrs	r3, r3, #8
 8002c86:	f003 0307 	and.w	r3, r3, #7
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr
 8002c94:	e000ed00 	.word	0xe000ed00

08002c98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b083      	sub	sp, #12
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	4603      	mov	r3, r0
 8002ca0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ca2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	db0b      	blt.n	8002cc2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002caa:	79fb      	ldrb	r3, [r7, #7]
 8002cac:	f003 021f 	and.w	r2, r3, #31
 8002cb0:	4907      	ldr	r1, [pc, #28]	@ (8002cd0 <__NVIC_EnableIRQ+0x38>)
 8002cb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb6:	095b      	lsrs	r3, r3, #5
 8002cb8:	2001      	movs	r0, #1
 8002cba:	fa00 f202 	lsl.w	r2, r0, r2
 8002cbe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cc2:	bf00      	nop
 8002cc4:	370c      	adds	r7, #12
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ccc:	4770      	bx	lr
 8002cce:	bf00      	nop
 8002cd0:	e000e100 	.word	0xe000e100

08002cd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cd4:	b480      	push	{r7}
 8002cd6:	b083      	sub	sp, #12
 8002cd8:	af00      	add	r7, sp, #0
 8002cda:	4603      	mov	r3, r0
 8002cdc:	6039      	str	r1, [r7, #0]
 8002cde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	db0a      	blt.n	8002cfe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	b2da      	uxtb	r2, r3
 8002cec:	490c      	ldr	r1, [pc, #48]	@ (8002d20 <__NVIC_SetPriority+0x4c>)
 8002cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cf2:	0112      	lsls	r2, r2, #4
 8002cf4:	b2d2      	uxtb	r2, r2
 8002cf6:	440b      	add	r3, r1
 8002cf8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cfc:	e00a      	b.n	8002d14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cfe:	683b      	ldr	r3, [r7, #0]
 8002d00:	b2da      	uxtb	r2, r3
 8002d02:	4908      	ldr	r1, [pc, #32]	@ (8002d24 <__NVIC_SetPriority+0x50>)
 8002d04:	79fb      	ldrb	r3, [r7, #7]
 8002d06:	f003 030f 	and.w	r3, r3, #15
 8002d0a:	3b04      	subs	r3, #4
 8002d0c:	0112      	lsls	r2, r2, #4
 8002d0e:	b2d2      	uxtb	r2, r2
 8002d10:	440b      	add	r3, r1
 8002d12:	761a      	strb	r2, [r3, #24]
}
 8002d14:	bf00      	nop
 8002d16:	370c      	adds	r7, #12
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d1e:	4770      	bx	lr
 8002d20:	e000e100 	.word	0xe000e100
 8002d24:	e000ed00 	.word	0xe000ed00

08002d28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d28:	b480      	push	{r7}
 8002d2a:	b089      	sub	sp, #36	@ 0x24
 8002d2c:	af00      	add	r7, sp, #0
 8002d2e:	60f8      	str	r0, [r7, #12]
 8002d30:	60b9      	str	r1, [r7, #8]
 8002d32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	f003 0307 	and.w	r3, r3, #7
 8002d3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	f1c3 0307 	rsb	r3, r3, #7
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	bf28      	it	cs
 8002d46:	2304      	movcs	r3, #4
 8002d48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d4a:	69fb      	ldr	r3, [r7, #28]
 8002d4c:	3304      	adds	r3, #4
 8002d4e:	2b06      	cmp	r3, #6
 8002d50:	d902      	bls.n	8002d58 <NVIC_EncodePriority+0x30>
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3b03      	subs	r3, #3
 8002d56:	e000      	b.n	8002d5a <NVIC_EncodePriority+0x32>
 8002d58:	2300      	movs	r3, #0
 8002d5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d5c:	f04f 32ff 	mov.w	r2, #4294967295
 8002d60:	69bb      	ldr	r3, [r7, #24]
 8002d62:	fa02 f303 	lsl.w	r3, r2, r3
 8002d66:	43da      	mvns	r2, r3
 8002d68:	68bb      	ldr	r3, [r7, #8]
 8002d6a:	401a      	ands	r2, r3
 8002d6c:	697b      	ldr	r3, [r7, #20]
 8002d6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d70:	f04f 31ff 	mov.w	r1, #4294967295
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	fa01 f303 	lsl.w	r3, r1, r3
 8002d7a:	43d9      	mvns	r1, r3
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d80:	4313      	orrs	r3, r2
         );
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3724      	adds	r7, #36	@ 0x24
 8002d86:	46bd      	mov	sp, r7
 8002d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8c:	4770      	bx	lr
	...

08002d90 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	3b01      	subs	r3, #1
 8002d9c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da0:	d301      	bcc.n	8002da6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da2:	2301      	movs	r3, #1
 8002da4:	e00f      	b.n	8002dc6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002da6:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd0 <SysTick_Config+0x40>)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	3b01      	subs	r3, #1
 8002dac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002dae:	210f      	movs	r1, #15
 8002db0:	f04f 30ff 	mov.w	r0, #4294967295
 8002db4:	f7ff ff8e 	bl	8002cd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <SysTick_Config+0x40>)
 8002dba:	2200      	movs	r2, #0
 8002dbc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dbe:	4b04      	ldr	r3, [pc, #16]	@ (8002dd0 <SysTick_Config+0x40>)
 8002dc0:	2207      	movs	r2, #7
 8002dc2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3708      	adds	r7, #8
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
 8002dce:	bf00      	nop
 8002dd0:	e000e010 	.word	0xe000e010

08002dd4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b082      	sub	sp, #8
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ddc:	6878      	ldr	r0, [r7, #4]
 8002dde:	f7ff ff29 	bl	8002c34 <__NVIC_SetPriorityGrouping>
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}

08002dea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15 as described in the table CORTEX_NVIC_Priority_Table
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dea:	b580      	push	{r7, lr}
 8002dec:	b086      	sub	sp, #24
 8002dee:	af00      	add	r7, sp, #0
 8002df0:	4603      	mov	r3, r0
 8002df2:	60b9      	str	r1, [r7, #8]
 8002df4:	607a      	str	r2, [r7, #4]
 8002df6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002df8:	2300      	movs	r3, #0
 8002dfa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002dfc:	f7ff ff3e 	bl	8002c7c <__NVIC_GetPriorityGrouping>
 8002e00:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e02:	687a      	ldr	r2, [r7, #4]
 8002e04:	68b9      	ldr	r1, [r7, #8]
 8002e06:	6978      	ldr	r0, [r7, #20]
 8002e08:	f7ff ff8e 	bl	8002d28 <NVIC_EncodePriority>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e12:	4611      	mov	r1, r2
 8002e14:	4618      	mov	r0, r3
 8002e16:	f7ff ff5d 	bl	8002cd4 <__NVIC_SetPriority>
}
 8002e1a:	bf00      	nop
 8002e1c:	3718      	adds	r7, #24
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f3xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e22:	b580      	push	{r7, lr}
 8002e24:	b082      	sub	sp, #8
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	4603      	mov	r3, r0
 8002e2a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e30:	4618      	mov	r0, r3
 8002e32:	f7ff ff31 	bl	8002c98 <__NVIC_EnableIRQ>
}
 8002e36:	bf00      	nop
 8002e38:	3708      	adds	r7, #8
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bd80      	pop	{r7, pc}

08002e3e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e3e:	b580      	push	{r7, lr}
 8002e40:	b082      	sub	sp, #8
 8002e42:	af00      	add	r7, sp, #0
 8002e44:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e46:	6878      	ldr	r0, [r7, #4]
 8002e48:	f7ff ffa2 	bl	8002d90 <SysTick_Config>
 8002e4c:	4603      	mov	r3, r0
}
 8002e4e:	4618      	mov	r0, r3
 8002e50:	3708      	adds	r7, #8
 8002e52:	46bd      	mov	sp, r7
 8002e54:	bd80      	pop	{r7, pc}
	...

08002e58 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	b087      	sub	sp, #28
 8002e5c:	af00      	add	r7, sp, #0
 8002e5e:	6078      	str	r0, [r7, #4]
 8002e60:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002e62:	2300      	movs	r3, #0
 8002e64:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e66:	e160      	b.n	800312a <HAL_GPIO_Init+0x2d2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	681a      	ldr	r2, [r3, #0]
 8002e6c:	2101      	movs	r1, #1
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	fa01 f303 	lsl.w	r3, r1, r3
 8002e74:	4013      	ands	r3, r2
 8002e76:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 8152 	beq.w	8003124 <HAL_GPIO_Init+0x2cc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	f003 0303 	and.w	r3, r3, #3
 8002e88:	2b01      	cmp	r3, #1
 8002e8a:	d005      	beq.n	8002e98 <HAL_GPIO_Init+0x40>
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	685b      	ldr	r3, [r3, #4]
 8002e90:	f003 0303 	and.w	r3, r3, #3
 8002e94:	2b02      	cmp	r3, #2
 8002e96:	d130      	bne.n	8002efa <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	689b      	ldr	r3, [r3, #8]
 8002e9c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2u));
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	005b      	lsls	r3, r3, #1
 8002ea2:	2203      	movs	r2, #3
 8002ea4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea8:	43db      	mvns	r3, r3
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4013      	ands	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	68da      	ldr	r2, [r3, #12]
 8002eb4:	697b      	ldr	r3, [r7, #20]
 8002eb6:	005b      	lsls	r3, r3, #1
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	4313      	orrs	r3, r2
 8002ec0:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	693a      	ldr	r2, [r7, #16]
 8002ec6:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	685b      	ldr	r3, [r3, #4]
 8002ecc:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002ece:	2201      	movs	r2, #1
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	693a      	ldr	r2, [r7, #16]
 8002eda:	4013      	ands	r3, r2
 8002edc:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002ede:	683b      	ldr	r3, [r7, #0]
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	091b      	lsrs	r3, r3, #4
 8002ee4:	f003 0201 	and.w	r2, r3, #1
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa02 f303 	lsl.w	r3, r2, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4313      	orrs	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	693a      	ldr	r2, [r7, #16]
 8002ef8:	605a      	str	r2, [r3, #4]
      }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002efa:	683b      	ldr	r3, [r7, #0]
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	f003 0303 	and.w	r3, r3, #3
 8002f02:	2b03      	cmp	r3, #3
 8002f04:	d017      	beq.n	8002f36 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	68db      	ldr	r3, [r3, #12]
 8002f0a:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2u));
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	005b      	lsls	r3, r3, #1
 8002f10:	2203      	movs	r2, #3
 8002f12:	fa02 f303 	lsl.w	r3, r2, r3
 8002f16:	43db      	mvns	r3, r3
 8002f18:	693a      	ldr	r2, [r7, #16]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	689a      	ldr	r2, [r3, #8]
 8002f22:	697b      	ldr	r3, [r7, #20]
 8002f24:	005b      	lsls	r3, r3, #1
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	693a      	ldr	r2, [r7, #16]
 8002f2c:	4313      	orrs	r3, r2
 8002f2e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	60da      	str	r2, [r3, #12]
      }

      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	685b      	ldr	r3, [r3, #4]
 8002f3a:	f003 0303 	and.w	r3, r3, #3
 8002f3e:	2b02      	cmp	r3, #2
 8002f40:	d123      	bne.n	8002f8a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8002f42:	697b      	ldr	r3, [r7, #20]
 8002f44:	08da      	lsrs	r2, r3, #3
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	3208      	adds	r2, #8
 8002f4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	009b      	lsls	r3, r3, #2
 8002f58:	220f      	movs	r2, #15
 8002f5a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5e:	43db      	mvns	r3, r3
 8002f60:	693a      	ldr	r2, [r7, #16]
 8002f62:	4013      	ands	r3, r2
 8002f64:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	691a      	ldr	r2, [r3, #16]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	f003 0307 	and.w	r3, r3, #7
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	fa02 f303 	lsl.w	r3, r2, r3
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002f7c:	697b      	ldr	r3, [r7, #20]
 8002f7e:	08da      	lsrs	r2, r3, #3
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	3208      	adds	r2, #8
 8002f84:	6939      	ldr	r1, [r7, #16]
 8002f86:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2u));
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2203      	movs	r2, #3
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	693a      	ldr	r2, [r7, #16]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	685b      	ldr	r3, [r3, #4]
 8002fa6:	f003 0203 	and.w	r2, r3, #3
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb2:	693a      	ldr	r2, [r7, #16]
 8002fb4:	4313      	orrs	r3, r2
 8002fb6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	f000 80ac 	beq.w	8003124 <HAL_GPIO_Init+0x2cc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	@ (8003148 <HAL_GPIO_Init+0x2f0>)
 8002fce:	699b      	ldr	r3, [r3, #24]
 8002fd0:	4a5d      	ldr	r2, [pc, #372]	@ (8003148 <HAL_GPIO_Init+0x2f0>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6193      	str	r3, [r2, #24]
 8002fd8:	4b5b      	ldr	r3, [pc, #364]	@ (8003148 <HAL_GPIO_Init+0x2f0>)
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	f003 0301 	and.w	r3, r3, #1
 8002fe0:	60bb      	str	r3, [r7, #8]
 8002fe2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8002fe4:	4a59      	ldr	r2, [pc, #356]	@ (800314c <HAL_GPIO_Init+0x2f4>)
 8002fe6:	697b      	ldr	r3, [r7, #20]
 8002fe8:	089b      	lsrs	r3, r3, #2
 8002fea:	3302      	adds	r3, #2
 8002fec:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ff0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8002ff2:	697b      	ldr	r3, [r7, #20]
 8002ff4:	f003 0303 	and.w	r3, r3, #3
 8002ff8:	009b      	lsls	r3, r3, #2
 8002ffa:	220f      	movs	r2, #15
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	43db      	mvns	r3, r3
 8003002:	693a      	ldr	r2, [r7, #16]
 8003004:	4013      	ands	r3, r2
 8003006:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800300e:	d025      	beq.n	800305c <HAL_GPIO_Init+0x204>
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	4a4f      	ldr	r2, [pc, #316]	@ (8003150 <HAL_GPIO_Init+0x2f8>)
 8003014:	4293      	cmp	r3, r2
 8003016:	d01f      	beq.n	8003058 <HAL_GPIO_Init+0x200>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	4a4e      	ldr	r2, [pc, #312]	@ (8003154 <HAL_GPIO_Init+0x2fc>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d019      	beq.n	8003054 <HAL_GPIO_Init+0x1fc>
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	4a4d      	ldr	r2, [pc, #308]	@ (8003158 <HAL_GPIO_Init+0x300>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d013      	beq.n	8003050 <HAL_GPIO_Init+0x1f8>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	4a4c      	ldr	r2, [pc, #304]	@ (800315c <HAL_GPIO_Init+0x304>)
 800302c:	4293      	cmp	r3, r2
 800302e:	d00d      	beq.n	800304c <HAL_GPIO_Init+0x1f4>
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	4a4b      	ldr	r2, [pc, #300]	@ (8003160 <HAL_GPIO_Init+0x308>)
 8003034:	4293      	cmp	r3, r2
 8003036:	d007      	beq.n	8003048 <HAL_GPIO_Init+0x1f0>
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a4a      	ldr	r2, [pc, #296]	@ (8003164 <HAL_GPIO_Init+0x30c>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d101      	bne.n	8003044 <HAL_GPIO_Init+0x1ec>
 8003040:	2306      	movs	r3, #6
 8003042:	e00c      	b.n	800305e <HAL_GPIO_Init+0x206>
 8003044:	2307      	movs	r3, #7
 8003046:	e00a      	b.n	800305e <HAL_GPIO_Init+0x206>
 8003048:	2305      	movs	r3, #5
 800304a:	e008      	b.n	800305e <HAL_GPIO_Init+0x206>
 800304c:	2304      	movs	r3, #4
 800304e:	e006      	b.n	800305e <HAL_GPIO_Init+0x206>
 8003050:	2303      	movs	r3, #3
 8003052:	e004      	b.n	800305e <HAL_GPIO_Init+0x206>
 8003054:	2302      	movs	r3, #2
 8003056:	e002      	b.n	800305e <HAL_GPIO_Init+0x206>
 8003058:	2301      	movs	r3, #1
 800305a:	e000      	b.n	800305e <HAL_GPIO_Init+0x206>
 800305c:	2300      	movs	r3, #0
 800305e:	697a      	ldr	r2, [r7, #20]
 8003060:	f002 0203 	and.w	r2, r2, #3
 8003064:	0092      	lsls	r2, r2, #2
 8003066:	4093      	lsls	r3, r2
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	4313      	orrs	r3, r2
 800306c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800306e:	4937      	ldr	r1, [pc, #220]	@ (800314c <HAL_GPIO_Init+0x2f4>)
 8003070:	697b      	ldr	r3, [r7, #20]
 8003072:	089b      	lsrs	r3, r3, #2
 8003074:	3302      	adds	r3, #2
 8003076:	693a      	ldr	r2, [r7, #16]
 8003078:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800307c:	4b3a      	ldr	r3, [pc, #232]	@ (8003168 <HAL_GPIO_Init+0x310>)
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	43db      	mvns	r3, r3
 8003086:	693a      	ldr	r2, [r7, #16]
 8003088:	4013      	ands	r3, r2
 800308a:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	685b      	ldr	r3, [r3, #4]
 8003090:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d003      	beq.n	80030a0 <HAL_GPIO_Init+0x248>
        {
          temp |= iocurrent;
 8003098:	693a      	ldr	r2, [r7, #16]
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	4313      	orrs	r3, r2
 800309e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 80030a0:	4a31      	ldr	r2, [pc, #196]	@ (8003168 <HAL_GPIO_Init+0x310>)
 80030a2:	693b      	ldr	r3, [r7, #16]
 80030a4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80030a6:	4b30      	ldr	r3, [pc, #192]	@ (8003168 <HAL_GPIO_Init+0x310>)
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	43db      	mvns	r3, r3
 80030b0:	693a      	ldr	r2, [r7, #16]
 80030b2:	4013      	ands	r3, r2
 80030b4:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d003      	beq.n	80030ca <HAL_GPIO_Init+0x272>
        {
          temp |= iocurrent;
 80030c2:	693a      	ldr	r2, [r7, #16]
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	4313      	orrs	r3, r2
 80030c8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80030ca:	4a27      	ldr	r2, [pc, #156]	@ (8003168 <HAL_GPIO_Init+0x310>)
 80030cc:	693b      	ldr	r3, [r7, #16]
 80030ce:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80030d0:	4b25      	ldr	r3, [pc, #148]	@ (8003168 <HAL_GPIO_Init+0x310>)
 80030d2:	685b      	ldr	r3, [r3, #4]
 80030d4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	43db      	mvns	r3, r3
 80030da:	693a      	ldr	r2, [r7, #16]
 80030dc:	4013      	ands	r3, r2
 80030de:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 80030e0:	683b      	ldr	r3, [r7, #0]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d003      	beq.n	80030f4 <HAL_GPIO_Init+0x29c>
        {
          temp |= iocurrent;
 80030ec:	693a      	ldr	r2, [r7, #16]
 80030ee:	68fb      	ldr	r3, [r7, #12]
 80030f0:	4313      	orrs	r3, r2
 80030f2:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 80030f4:	4a1c      	ldr	r2, [pc, #112]	@ (8003168 <HAL_GPIO_Init+0x310>)
 80030f6:	693b      	ldr	r3, [r7, #16]
 80030f8:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80030fa:	4b1b      	ldr	r3, [pc, #108]	@ (8003168 <HAL_GPIO_Init+0x310>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	43db      	mvns	r3, r3
 8003104:	693a      	ldr	r2, [r7, #16]
 8003106:	4013      	ands	r3, r2
 8003108:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003112:	2b00      	cmp	r3, #0
 8003114:	d003      	beq.n	800311e <HAL_GPIO_Init+0x2c6>
        {
          temp |= iocurrent;
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	4313      	orrs	r3, r2
 800311c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800311e:	4a12      	ldr	r2, [pc, #72]	@ (8003168 <HAL_GPIO_Init+0x310>)
 8003120:	693b      	ldr	r3, [r7, #16]
 8003122:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003124:	697b      	ldr	r3, [r7, #20]
 8003126:	3301      	adds	r3, #1
 8003128:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	681a      	ldr	r2, [r3, #0]
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	fa22 f303 	lsr.w	r3, r2, r3
 8003134:	2b00      	cmp	r3, #0
 8003136:	f47f ae97 	bne.w	8002e68 <HAL_GPIO_Init+0x10>
  }
}
 800313a:	bf00      	nop
 800313c:	bf00      	nop
 800313e:	371c      	adds	r7, #28
 8003140:	46bd      	mov	sp, r7
 8003142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003146:	4770      	bx	lr
 8003148:	40021000 	.word	0x40021000
 800314c:	40010000 	.word	0x40010000
 8003150:	48000400 	.word	0x48000400
 8003154:	48000800 	.word	0x48000800
 8003158:	48000c00 	.word	0x48000c00
 800315c:	48001000 	.word	0x48001000
 8003160:	48001400 	.word	0x48001400
 8003164:	48001800 	.word	0x48001800
 8003168:	40010400 	.word	0x40010400

0800316c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 8003172:	af00      	add	r7, sp, #0
 8003174:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003178:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800317c:	6018      	str	r0, [r3, #0]
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
  uint32_t pll_config2;
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800317e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003182:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	2b00      	cmp	r3, #0
 800318a:	d102      	bne.n	8003192 <HAL_RCC_OscConfig+0x26>
  {
    return HAL_ERROR;
 800318c:	2301      	movs	r3, #1
 800318e:	f001 b83a 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003192:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003196:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	f003 0301 	and.w	r3, r3, #1
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	f000 816f 	beq.w	8003486 <HAL_RCC_OscConfig+0x31a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE) 
 80031a8:	4bb5      	ldr	r3, [pc, #724]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 030c 	and.w	r3, r3, #12
 80031b0:	2b04      	cmp	r3, #4
 80031b2:	d00c      	beq.n	80031ce <HAL_RCC_OscConfig+0x62>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80031b4:	4bb2      	ldr	r3, [pc, #712]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80031b6:	685b      	ldr	r3, [r3, #4]
 80031b8:	f003 030c 	and.w	r3, r3, #12
 80031bc:	2b08      	cmp	r3, #8
 80031be:	d15c      	bne.n	800327a <HAL_RCC_OscConfig+0x10e>
 80031c0:	4baf      	ldr	r3, [pc, #700]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80031c2:	685b      	ldr	r3, [r3, #4]
 80031c4:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80031c8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80031cc:	d155      	bne.n	800327a <HAL_RCC_OscConfig+0x10e>
 80031ce:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80031d2:	f8c7 31f4 	str.w	r3, [r7, #500]	@ 0x1f4
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031d6:	f8d7 31f4 	ldr.w	r3, [r7, #500]	@ 0x1f4
 80031da:	fa93 f3a3 	rbit	r3, r3
 80031de:	f8c7 31f0 	str.w	r3, [r7, #496]	@ 0x1f0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80031e2:	f8d7 31f0 	ldr.w	r3, [r7, #496]	@ 0x1f0
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031e6:	fab3 f383 	clz	r3, r3
 80031ea:	b2db      	uxtb	r3, r3
 80031ec:	095b      	lsrs	r3, r3, #5
 80031ee:	b2db      	uxtb	r3, r3
 80031f0:	f043 0301 	orr.w	r3, r3, #1
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	2b01      	cmp	r3, #1
 80031f8:	d102      	bne.n	8003200 <HAL_RCC_OscConfig+0x94>
 80031fa:	4ba1      	ldr	r3, [pc, #644]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	e015      	b.n	800322c <HAL_RCC_OscConfig+0xc0>
 8003200:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003204:	f8c7 31ec 	str.w	r3, [r7, #492]	@ 0x1ec
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003208:	f8d7 31ec 	ldr.w	r3, [r7, #492]	@ 0x1ec
 800320c:	fa93 f3a3 	rbit	r3, r3
 8003210:	f8c7 31e8 	str.w	r3, [r7, #488]	@ 0x1e8
 8003214:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003218:	f8c7 31e4 	str.w	r3, [r7, #484]	@ 0x1e4
 800321c:	f8d7 31e4 	ldr.w	r3, [r7, #484]	@ 0x1e4
 8003220:	fa93 f3a3 	rbit	r3, r3
 8003224:	f8c7 31e0 	str.w	r3, [r7, #480]	@ 0x1e0
 8003228:	4b95      	ldr	r3, [pc, #596]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 800322a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800322c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8003230:	f8c7 21dc 	str.w	r2, [r7, #476]	@ 0x1dc
 8003234:	f8d7 21dc 	ldr.w	r2, [r7, #476]	@ 0x1dc
 8003238:	fa92 f2a2 	rbit	r2, r2
 800323c:	f8c7 21d8 	str.w	r2, [r7, #472]	@ 0x1d8
  return result;
 8003240:	f8d7 21d8 	ldr.w	r2, [r7, #472]	@ 0x1d8
 8003244:	fab2 f282 	clz	r2, r2
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	f042 0220 	orr.w	r2, r2, #32
 800324e:	b2d2      	uxtb	r2, r2
 8003250:	f002 021f 	and.w	r2, r2, #31
 8003254:	2101      	movs	r1, #1
 8003256:	fa01 f202 	lsl.w	r2, r1, r2
 800325a:	4013      	ands	r3, r2
 800325c:	2b00      	cmp	r3, #0
 800325e:	f000 8111 	beq.w	8003484 <HAL_RCC_OscConfig+0x318>
 8003262:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003266:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	685b      	ldr	r3, [r3, #4]
 800326e:	2b00      	cmp	r3, #0
 8003270:	f040 8108 	bne.w	8003484 <HAL_RCC_OscConfig+0x318>
      {
        return HAL_ERROR;
 8003274:	2301      	movs	r3, #1
 8003276:	f000 bfc6 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800327a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800327e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003282:	681b      	ldr	r3, [r3, #0]
 8003284:	685b      	ldr	r3, [r3, #4]
 8003286:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800328a:	d106      	bne.n	800329a <HAL_RCC_OscConfig+0x12e>
 800328c:	4b7c      	ldr	r3, [pc, #496]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a7b      	ldr	r2, [pc, #492]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 8003292:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003296:	6013      	str	r3, [r2, #0]
 8003298:	e036      	b.n	8003308 <HAL_RCC_OscConfig+0x19c>
 800329a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800329e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d10c      	bne.n	80032c4 <HAL_RCC_OscConfig+0x158>
 80032aa:	4b75      	ldr	r3, [pc, #468]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	4a74      	ldr	r2, [pc, #464]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032b0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032b4:	6013      	str	r3, [r2, #0]
 80032b6:	4b72      	ldr	r3, [pc, #456]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4a71      	ldr	r2, [pc, #452]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032bc:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80032c0:	6013      	str	r3, [r2, #0]
 80032c2:	e021      	b.n	8003308 <HAL_RCC_OscConfig+0x19c>
 80032c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80032c8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x184>
 80032d6:	4b6a      	ldr	r3, [pc, #424]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a69      	ldr	r2, [pc, #420]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b67      	ldr	r3, [pc, #412]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a66      	ldr	r2, [pc, #408]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0x19c>
 80032f0:	4b63      	ldr	r3, [pc, #396]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a62      	ldr	r2, [pc, #392]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b60      	ldr	r3, [pc, #384]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a5f      	ldr	r2, [pc, #380]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003306:	6013      	str	r3, [r2, #0]
      /* Configure the HSE predivision factor --------------------------------*/
      __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */

       /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800330c:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	685b      	ldr	r3, [r3, #4]
 8003314:	2b00      	cmp	r3, #0
 8003316:	d059      	beq.n	80033cc <HAL_RCC_OscConfig+0x260>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003318:	f7fe f94c 	bl	80015b4 <HAL_GetTick>
 800331c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003320:	e00a      	b.n	8003338 <HAL_RCC_OscConfig+0x1cc>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003322:	f7fe f947 	bl	80015b4 <HAL_GetTick>
 8003326:	4602      	mov	r2, r0
 8003328:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 800332c:	1ad3      	subs	r3, r2, r3
 800332e:	2b64      	cmp	r3, #100	@ 0x64
 8003330:	d902      	bls.n	8003338 <HAL_RCC_OscConfig+0x1cc>
          {
            return HAL_TIMEOUT;
 8003332:	2303      	movs	r3, #3
 8003334:	f000 bf67 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>
 8003338:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800333c:	f8c7 31d4 	str.w	r3, [r7, #468]	@ 0x1d4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003340:	f8d7 31d4 	ldr.w	r3, [r7, #468]	@ 0x1d4
 8003344:	fa93 f3a3 	rbit	r3, r3
 8003348:	f8c7 31d0 	str.w	r3, [r7, #464]	@ 0x1d0
  return result;
 800334c:	f8d7 31d0 	ldr.w	r3, [r7, #464]	@ 0x1d0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003350:	fab3 f383 	clz	r3, r3
 8003354:	b2db      	uxtb	r3, r3
 8003356:	095b      	lsrs	r3, r3, #5
 8003358:	b2db      	uxtb	r3, r3
 800335a:	f043 0301 	orr.w	r3, r3, #1
 800335e:	b2db      	uxtb	r3, r3
 8003360:	2b01      	cmp	r3, #1
 8003362:	d102      	bne.n	800336a <HAL_RCC_OscConfig+0x1fe>
 8003364:	4b46      	ldr	r3, [pc, #280]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	e015      	b.n	8003396 <HAL_RCC_OscConfig+0x22a>
 800336a:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 800336e:	f8c7 31cc 	str.w	r3, [r7, #460]	@ 0x1cc
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003372:	f8d7 31cc 	ldr.w	r3, [r7, #460]	@ 0x1cc
 8003376:	fa93 f3a3 	rbit	r3, r3
 800337a:	f8c7 31c8 	str.w	r3, [r7, #456]	@ 0x1c8
 800337e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003382:	f8c7 31c4 	str.w	r3, [r7, #452]	@ 0x1c4
 8003386:	f8d7 31c4 	ldr.w	r3, [r7, #452]	@ 0x1c4
 800338a:	fa93 f3a3 	rbit	r3, r3
 800338e:	f8c7 31c0 	str.w	r3, [r7, #448]	@ 0x1c0
 8003392:	4b3b      	ldr	r3, [pc, #236]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 8003394:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003396:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800339a:	f8c7 21bc 	str.w	r2, [r7, #444]	@ 0x1bc
 800339e:	f8d7 21bc 	ldr.w	r2, [r7, #444]	@ 0x1bc
 80033a2:	fa92 f2a2 	rbit	r2, r2
 80033a6:	f8c7 21b8 	str.w	r2, [r7, #440]	@ 0x1b8
  return result;
 80033aa:	f8d7 21b8 	ldr.w	r2, [r7, #440]	@ 0x1b8
 80033ae:	fab2 f282 	clz	r2, r2
 80033b2:	b2d2      	uxtb	r2, r2
 80033b4:	f042 0220 	orr.w	r2, r2, #32
 80033b8:	b2d2      	uxtb	r2, r2
 80033ba:	f002 021f 	and.w	r2, r2, #31
 80033be:	2101      	movs	r1, #1
 80033c0:	fa01 f202 	lsl.w	r2, r1, r2
 80033c4:	4013      	ands	r3, r2
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d0ab      	beq.n	8003322 <HAL_RCC_OscConfig+0x1b6>
 80033ca:	e05c      	b.n	8003486 <HAL_RCC_OscConfig+0x31a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033cc:	f7fe f8f2 	bl	80015b4 <HAL_GetTick>
 80033d0:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033d4:	e00a      	b.n	80033ec <HAL_RCC_OscConfig+0x280>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80033d6:	f7fe f8ed 	bl	80015b4 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80033e0:	1ad3      	subs	r3, r2, r3
 80033e2:	2b64      	cmp	r3, #100	@ 0x64
 80033e4:	d902      	bls.n	80033ec <HAL_RCC_OscConfig+0x280>
          {
            return HAL_TIMEOUT;
 80033e6:	2303      	movs	r3, #3
 80033e8:	f000 bf0d 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>
 80033ec:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80033f0:	f8c7 31b4 	str.w	r3, [r7, #436]	@ 0x1b4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033f4:	f8d7 31b4 	ldr.w	r3, [r7, #436]	@ 0x1b4
 80033f8:	fa93 f3a3 	rbit	r3, r3
 80033fc:	f8c7 31b0 	str.w	r3, [r7, #432]	@ 0x1b0
  return result;
 8003400:	f8d7 31b0 	ldr.w	r3, [r7, #432]	@ 0x1b0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003404:	fab3 f383 	clz	r3, r3
 8003408:	b2db      	uxtb	r3, r3
 800340a:	095b      	lsrs	r3, r3, #5
 800340c:	b2db      	uxtb	r3, r3
 800340e:	f043 0301 	orr.w	r3, r3, #1
 8003412:	b2db      	uxtb	r3, r3
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_RCC_OscConfig+0x2b2>
 8003418:	4b19      	ldr	r3, [pc, #100]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	e015      	b.n	800344a <HAL_RCC_OscConfig+0x2de>
 800341e:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003422:	f8c7 31ac 	str.w	r3, [r7, #428]	@ 0x1ac
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003426:	f8d7 31ac 	ldr.w	r3, [r7, #428]	@ 0x1ac
 800342a:	fa93 f3a3 	rbit	r3, r3
 800342e:	f8c7 31a8 	str.w	r3, [r7, #424]	@ 0x1a8
 8003432:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8003436:	f8c7 31a4 	str.w	r3, [r7, #420]	@ 0x1a4
 800343a:	f8d7 31a4 	ldr.w	r3, [r7, #420]	@ 0x1a4
 800343e:	fa93 f3a3 	rbit	r3, r3
 8003442:	f8c7 31a0 	str.w	r3, [r7, #416]	@ 0x1a0
 8003446:	4b0e      	ldr	r3, [pc, #56]	@ (8003480 <HAL_RCC_OscConfig+0x314>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800344a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800344e:	f8c7 219c 	str.w	r2, [r7, #412]	@ 0x19c
 8003452:	f8d7 219c 	ldr.w	r2, [r7, #412]	@ 0x19c
 8003456:	fa92 f2a2 	rbit	r2, r2
 800345a:	f8c7 2198 	str.w	r2, [r7, #408]	@ 0x198
  return result;
 800345e:	f8d7 2198 	ldr.w	r2, [r7, #408]	@ 0x198
 8003462:	fab2 f282 	clz	r2, r2
 8003466:	b2d2      	uxtb	r2, r2
 8003468:	f042 0220 	orr.w	r2, r2, #32
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	f002 021f 	and.w	r2, r2, #31
 8003472:	2101      	movs	r1, #1
 8003474:	fa01 f202 	lsl.w	r2, r1, r2
 8003478:	4013      	ands	r3, r2
 800347a:	2b00      	cmp	r3, #0
 800347c:	d1ab      	bne.n	80033d6 <HAL_RCC_OscConfig+0x26a>
 800347e:	e002      	b.n	8003486 <HAL_RCC_OscConfig+0x31a>
 8003480:	40021000 	.word	0x40021000
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003484:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003486:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800348a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	f000 817f 	beq.w	800379a <HAL_RCC_OscConfig+0x62e>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    
    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */ 
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI) 
 800349c:	4ba7      	ldr	r3, [pc, #668]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 800349e:	685b      	ldr	r3, [r3, #4]
 80034a0:	f003 030c 	and.w	r3, r3, #12
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d00c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x356>
       || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI)))
 80034a8:	4ba4      	ldr	r3, [pc, #656]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f003 030c 	and.w	r3, r3, #12
 80034b0:	2b08      	cmp	r3, #8
 80034b2:	d173      	bne.n	800359c <HAL_RCC_OscConfig+0x430>
 80034b4:	4ba1      	ldr	r3, [pc, #644]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f403 33c0 	and.w	r3, r3, #98304	@ 0x18000
 80034bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80034c0:	d16c      	bne.n	800359c <HAL_RCC_OscConfig+0x430>
 80034c2:	2302      	movs	r3, #2
 80034c4:	f8c7 3194 	str.w	r3, [r7, #404]	@ 0x194
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034c8:	f8d7 3194 	ldr.w	r3, [r7, #404]	@ 0x194
 80034cc:	fa93 f3a3 	rbit	r3, r3
 80034d0:	f8c7 3190 	str.w	r3, [r7, #400]	@ 0x190
  return result;
 80034d4:	f8d7 3190 	ldr.w	r3, [r7, #400]	@ 0x190
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034d8:	fab3 f383 	clz	r3, r3
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	095b      	lsrs	r3, r3, #5
 80034e0:	b2db      	uxtb	r3, r3
 80034e2:	f043 0301 	orr.w	r3, r3, #1
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d102      	bne.n	80034f2 <HAL_RCC_OscConfig+0x386>
 80034ec:	4b93      	ldr	r3, [pc, #588]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	e013      	b.n	800351a <HAL_RCC_OscConfig+0x3ae>
 80034f2:	2302      	movs	r3, #2
 80034f4:	f8c7 318c 	str.w	r3, [r7, #396]	@ 0x18c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034f8:	f8d7 318c 	ldr.w	r3, [r7, #396]	@ 0x18c
 80034fc:	fa93 f3a3 	rbit	r3, r3
 8003500:	f8c7 3188 	str.w	r3, [r7, #392]	@ 0x188
 8003504:	2302      	movs	r3, #2
 8003506:	f8c7 3184 	str.w	r3, [r7, #388]	@ 0x184
 800350a:	f8d7 3184 	ldr.w	r3, [r7, #388]	@ 0x184
 800350e:	fa93 f3a3 	rbit	r3, r3
 8003512:	f8c7 3180 	str.w	r3, [r7, #384]	@ 0x180
 8003516:	4b89      	ldr	r3, [pc, #548]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 8003518:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800351a:	2202      	movs	r2, #2
 800351c:	f8c7 217c 	str.w	r2, [r7, #380]	@ 0x17c
 8003520:	f8d7 217c 	ldr.w	r2, [r7, #380]	@ 0x17c
 8003524:	fa92 f2a2 	rbit	r2, r2
 8003528:	f8c7 2178 	str.w	r2, [r7, #376]	@ 0x178
  return result;
 800352c:	f8d7 2178 	ldr.w	r2, [r7, #376]	@ 0x178
 8003530:	fab2 f282 	clz	r2, r2
 8003534:	b2d2      	uxtb	r2, r2
 8003536:	f042 0220 	orr.w	r2, r2, #32
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	f002 021f 	and.w	r2, r2, #31
 8003540:	2101      	movs	r1, #1
 8003542:	fa01 f202 	lsl.w	r2, r1, r2
 8003546:	4013      	ands	r3, r2
 8003548:	2b00      	cmp	r3, #0
 800354a:	d00a      	beq.n	8003562 <HAL_RCC_OscConfig+0x3f6>
 800354c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003550:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	68db      	ldr	r3, [r3, #12]
 8003558:	2b01      	cmp	r3, #1
 800355a:	d002      	beq.n	8003562 <HAL_RCC_OscConfig+0x3f6>
      {
        return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	f000 be52 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003562:	4b76      	ldr	r3, [pc, #472]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800356a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800356e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	691b      	ldr	r3, [r3, #16]
 8003576:	21f8      	movs	r1, #248	@ 0xf8
 8003578:	f8c7 1174 	str.w	r1, [r7, #372]	@ 0x174
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800357c:	f8d7 1174 	ldr.w	r1, [r7, #372]	@ 0x174
 8003580:	fa91 f1a1 	rbit	r1, r1
 8003584:	f8c7 1170 	str.w	r1, [r7, #368]	@ 0x170
  return result;
 8003588:	f8d7 1170 	ldr.w	r1, [r7, #368]	@ 0x170
 800358c:	fab1 f181 	clz	r1, r1
 8003590:	b2c9      	uxtb	r1, r1
 8003592:	408b      	lsls	r3, r1
 8003594:	4969      	ldr	r1, [pc, #420]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 8003596:	4313      	orrs	r3, r2
 8003598:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800359a:	e0fe      	b.n	800379a <HAL_RCC_OscConfig+0x62e>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800359c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80035a0:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	68db      	ldr	r3, [r3, #12]
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	f000 8088 	beq.w	80036be <HAL_RCC_OscConfig+0x552>
 80035ae:	2301      	movs	r3, #1
 80035b0:	f8c7 316c 	str.w	r3, [r7, #364]	@ 0x16c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035b4:	f8d7 316c 	ldr.w	r3, [r7, #364]	@ 0x16c
 80035b8:	fa93 f3a3 	rbit	r3, r3
 80035bc:	f8c7 3168 	str.w	r3, [r7, #360]	@ 0x168
  return result;
 80035c0:	f8d7 3168 	ldr.w	r3, [r7, #360]	@ 0x168
      {
       /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035c4:	fab3 f383 	clz	r3, r3
 80035c8:	b2db      	uxtb	r3, r3
 80035ca:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80035ce:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80035d2:	009b      	lsls	r3, r3, #2
 80035d4:	461a      	mov	r2, r3
 80035d6:	2301      	movs	r3, #1
 80035d8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035da:	f7fd ffeb 	bl	80015b4 <HAL_GetTick>
 80035de:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035e2:	e00a      	b.n	80035fa <HAL_RCC_OscConfig+0x48e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80035e4:	f7fd ffe6 	bl	80015b4 <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80035ee:	1ad3      	subs	r3, r2, r3
 80035f0:	2b02      	cmp	r3, #2
 80035f2:	d902      	bls.n	80035fa <HAL_RCC_OscConfig+0x48e>
          {
            return HAL_TIMEOUT;
 80035f4:	2303      	movs	r3, #3
 80035f6:	f000 be06 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>
 80035fa:	2302      	movs	r3, #2
 80035fc:	f8c7 3164 	str.w	r3, [r7, #356]	@ 0x164
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003600:	f8d7 3164 	ldr.w	r3, [r7, #356]	@ 0x164
 8003604:	fa93 f3a3 	rbit	r3, r3
 8003608:	f8c7 3160 	str.w	r3, [r7, #352]	@ 0x160
  return result;
 800360c:	f8d7 3160 	ldr.w	r3, [r7, #352]	@ 0x160
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003610:	fab3 f383 	clz	r3, r3
 8003614:	b2db      	uxtb	r3, r3
 8003616:	095b      	lsrs	r3, r3, #5
 8003618:	b2db      	uxtb	r3, r3
 800361a:	f043 0301 	orr.w	r3, r3, #1
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b01      	cmp	r3, #1
 8003622:	d102      	bne.n	800362a <HAL_RCC_OscConfig+0x4be>
 8003624:	4b45      	ldr	r3, [pc, #276]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	e013      	b.n	8003652 <HAL_RCC_OscConfig+0x4e6>
 800362a:	2302      	movs	r3, #2
 800362c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003630:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8003634:	fa93 f3a3 	rbit	r3, r3
 8003638:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 800363c:	2302      	movs	r3, #2
 800363e:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8003642:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8003646:	fa93 f3a3 	rbit	r3, r3
 800364a:	f8c7 3150 	str.w	r3, [r7, #336]	@ 0x150
 800364e:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 8003650:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003652:	2202      	movs	r2, #2
 8003654:	f8c7 214c 	str.w	r2, [r7, #332]	@ 0x14c
 8003658:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800365c:	fa92 f2a2 	rbit	r2, r2
 8003660:	f8c7 2148 	str.w	r2, [r7, #328]	@ 0x148
  return result;
 8003664:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8003668:	fab2 f282 	clz	r2, r2
 800366c:	b2d2      	uxtb	r2, r2
 800366e:	f042 0220 	orr.w	r2, r2, #32
 8003672:	b2d2      	uxtb	r2, r2
 8003674:	f002 021f 	and.w	r2, r2, #31
 8003678:	2101      	movs	r1, #1
 800367a:	fa01 f202 	lsl.w	r2, r1, r2
 800367e:	4013      	ands	r3, r2
 8003680:	2b00      	cmp	r3, #0
 8003682:	d0af      	beq.n	80035e4 <HAL_RCC_OscConfig+0x478>
          }
        }
                
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003684:	4b2d      	ldr	r3, [pc, #180]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800368c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003690:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	21f8      	movs	r1, #248	@ 0xf8
 800369a:	f8c7 1144 	str.w	r1, [r7, #324]	@ 0x144
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800369e:	f8d7 1144 	ldr.w	r1, [r7, #324]	@ 0x144
 80036a2:	fa91 f1a1 	rbit	r1, r1
 80036a6:	f8c7 1140 	str.w	r1, [r7, #320]	@ 0x140
  return result;
 80036aa:	f8d7 1140 	ldr.w	r1, [r7, #320]	@ 0x140
 80036ae:	fab1 f181 	clz	r1, r1
 80036b2:	b2c9      	uxtb	r1, r1
 80036b4:	408b      	lsls	r3, r1
 80036b6:	4921      	ldr	r1, [pc, #132]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 80036b8:	4313      	orrs	r3, r2
 80036ba:	600b      	str	r3, [r1, #0]
 80036bc:	e06d      	b.n	800379a <HAL_RCC_OscConfig+0x62e>
 80036be:	2301      	movs	r3, #1
 80036c0:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036c4:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 80036c8:	fa93 f3a3 	rbit	r3, r3
 80036cc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
  return result;
 80036d0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036d4:	fab3 f383 	clz	r3, r3
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 80036de:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	461a      	mov	r2, r3
 80036e6:	2300      	movs	r3, #0
 80036e8:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036ea:	f7fd ff63 	bl	80015b4 <HAL_GetTick>
 80036ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036f2:	e00a      	b.n	800370a <HAL_RCC_OscConfig+0x59e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036f4:	f7fd ff5e 	bl	80015b4 <HAL_GetTick>
 80036f8:	4602      	mov	r2, r0
 80036fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80036fe:	1ad3      	subs	r3, r2, r3
 8003700:	2b02      	cmp	r3, #2
 8003702:	d902      	bls.n	800370a <HAL_RCC_OscConfig+0x59e>
          {
            return HAL_TIMEOUT;
 8003704:	2303      	movs	r3, #3
 8003706:	f000 bd7e 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>
 800370a:	2302      	movs	r3, #2
 800370c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003710:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8003714:	fa93 f3a3 	rbit	r3, r3
 8003718:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
  return result;
 800371c:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003720:	fab3 f383 	clz	r3, r3
 8003724:	b2db      	uxtb	r3, r3
 8003726:	095b      	lsrs	r3, r3, #5
 8003728:	b2db      	uxtb	r3, r3
 800372a:	f043 0301 	orr.w	r3, r3, #1
 800372e:	b2db      	uxtb	r3, r3
 8003730:	2b01      	cmp	r3, #1
 8003732:	d105      	bne.n	8003740 <HAL_RCC_OscConfig+0x5d4>
 8003734:	4b01      	ldr	r3, [pc, #4]	@ (800373c <HAL_RCC_OscConfig+0x5d0>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	e016      	b.n	8003768 <HAL_RCC_OscConfig+0x5fc>
 800373a:	bf00      	nop
 800373c:	40021000 	.word	0x40021000
 8003740:	2302      	movs	r3, #2
 8003742:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003746:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800374a:	fa93 f3a3 	rbit	r3, r3
 800374e:	f8c7 3128 	str.w	r3, [r7, #296]	@ 0x128
 8003752:	2302      	movs	r3, #2
 8003754:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
 8003758:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800375c:	fa93 f3a3 	rbit	r3, r3
 8003760:	f8c7 3120 	str.w	r3, [r7, #288]	@ 0x120
 8003764:	4bbf      	ldr	r3, [pc, #764]	@ (8003a64 <HAL_RCC_OscConfig+0x8f8>)
 8003766:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003768:	2202      	movs	r2, #2
 800376a:	f8c7 211c 	str.w	r2, [r7, #284]	@ 0x11c
 800376e:	f8d7 211c 	ldr.w	r2, [r7, #284]	@ 0x11c
 8003772:	fa92 f2a2 	rbit	r2, r2
 8003776:	f8c7 2118 	str.w	r2, [r7, #280]	@ 0x118
  return result;
 800377a:	f8d7 2118 	ldr.w	r2, [r7, #280]	@ 0x118
 800377e:	fab2 f282 	clz	r2, r2
 8003782:	b2d2      	uxtb	r2, r2
 8003784:	f042 0220 	orr.w	r2, r2, #32
 8003788:	b2d2      	uxtb	r2, r2
 800378a:	f002 021f 	and.w	r2, r2, #31
 800378e:	2101      	movs	r1, #1
 8003790:	fa01 f202 	lsl.w	r2, r1, r2
 8003794:	4013      	ands	r3, r2
 8003796:	2b00      	cmp	r3, #0
 8003798:	d1ac      	bne.n	80036f4 <HAL_RCC_OscConfig+0x588>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800379a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800379e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0308 	and.w	r3, r3, #8
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	f000 8113 	beq.w	80039d6 <HAL_RCC_OscConfig+0x86a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
    
    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80037b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80037b4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	695b      	ldr	r3, [r3, #20]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d07c      	beq.n	80038ba <HAL_RCC_OscConfig+0x74e>
 80037c0:	2301      	movs	r3, #1
 80037c2:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037c6:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80037ca:	fa93 f3a3 	rbit	r3, r3
 80037ce:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
  return result;
 80037d2:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037d6:	fab3 f383 	clz	r3, r3
 80037da:	b2db      	uxtb	r3, r3
 80037dc:	461a      	mov	r2, r3
 80037de:	4ba2      	ldr	r3, [pc, #648]	@ (8003a68 <HAL_RCC_OscConfig+0x8fc>)
 80037e0:	4413      	add	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	461a      	mov	r2, r3
 80037e6:	2301      	movs	r3, #1
 80037e8:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037ea:	f7fd fee3 	bl	80015b4 <HAL_GetTick>
 80037ee:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037f2:	e00a      	b.n	800380a <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037f4:	f7fd fede 	bl	80015b4 <HAL_GetTick>
 80037f8:	4602      	mov	r2, r0
 80037fa:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d902      	bls.n	800380a <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	f000 bcfe 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>
 800380a:	2302      	movs	r3, #2
 800380c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003810:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8003814:	fa93 f2a3 	rbit	r2, r3
 8003818:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800381c:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8003820:	601a      	str	r2, [r3, #0]
 8003822:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003826:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 800382a:	2202      	movs	r2, #2
 800382c:	601a      	str	r2, [r3, #0]
 800382e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003832:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	fa93 f2a3 	rbit	r2, r3
 800383c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003840:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800384a:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800384e:	2202      	movs	r2, #2
 8003850:	601a      	str	r2, [r3, #0]
 8003852:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003856:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	fa93 f2a3 	rbit	r2, r3
 8003860:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003864:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8003868:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800386a:	4b7e      	ldr	r3, [pc, #504]	@ (8003a64 <HAL_RCC_OscConfig+0x8f8>)
 800386c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800386e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003872:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003876:	2102      	movs	r1, #2
 8003878:	6019      	str	r1, [r3, #0]
 800387a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800387e:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	fa93 f1a3 	rbit	r1, r3
 8003888:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800388c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8003890:	6019      	str	r1, [r3, #0]
  return result;
 8003892:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003896:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	fab3 f383 	clz	r3, r3
 80038a0:	b2db      	uxtb	r3, r3
 80038a2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80038a6:	b2db      	uxtb	r3, r3
 80038a8:	f003 031f 	and.w	r3, r3, #31
 80038ac:	2101      	movs	r1, #1
 80038ae:	fa01 f303 	lsl.w	r3, r1, r3
 80038b2:	4013      	ands	r3, r2
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d09d      	beq.n	80037f4 <HAL_RCC_OscConfig+0x688>
 80038b8:	e08d      	b.n	80039d6 <HAL_RCC_OscConfig+0x86a>
 80038ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038be:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80038c2:	2201      	movs	r2, #1
 80038c4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038ca:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	fa93 f2a3 	rbit	r2, r3
 80038d4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038d8:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038dc:	601a      	str	r2, [r3, #0]
  return result;
 80038de:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80038e2:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80038e6:	681b      	ldr	r3, [r3, #0]
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80038e8:	fab3 f383 	clz	r3, r3
 80038ec:	b2db      	uxtb	r3, r3
 80038ee:	461a      	mov	r2, r3
 80038f0:	4b5d      	ldr	r3, [pc, #372]	@ (8003a68 <HAL_RCC_OscConfig+0x8fc>)
 80038f2:	4413      	add	r3, r2
 80038f4:	009b      	lsls	r3, r3, #2
 80038f6:	461a      	mov	r2, r3
 80038f8:	2300      	movs	r3, #0
 80038fa:	6013      	str	r3, [r2, #0]
      
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038fc:	f7fd fe5a 	bl	80015b4 <HAL_GetTick>
 8003900:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSI is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003904:	e00a      	b.n	800391c <HAL_RCC_OscConfig+0x7b0>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003906:	f7fd fe55 	bl	80015b4 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003910:	1ad3      	subs	r3, r2, r3
 8003912:	2b02      	cmp	r3, #2
 8003914:	d902      	bls.n	800391c <HAL_RCC_OscConfig+0x7b0>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	f000 bc75 	b.w	8004206 <HAL_RCC_OscConfig+0x109a>
 800391c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003920:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003924:	2202      	movs	r2, #2
 8003926:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003928:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800392c:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	fa93 f2a3 	rbit	r2, r3
 8003936:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800393a:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 800393e:	601a      	str	r2, [r3, #0]
 8003940:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003944:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003948:	2202      	movs	r2, #2
 800394a:	601a      	str	r2, [r3, #0]
 800394c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003950:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	fa93 f2a3 	rbit	r2, r3
 800395a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800395e:	f5a3 7398 	sub.w	r3, r3, #304	@ 0x130
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003968:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 800396c:	2202      	movs	r2, #2
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003974:	f5a3 739a 	sub.w	r3, r3, #308	@ 0x134
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	fa93 f2a3 	rbit	r2, r3
 800397e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003982:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8003986:	601a      	str	r2, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003988:	4b36      	ldr	r3, [pc, #216]	@ (8003a64 <HAL_RCC_OscConfig+0x8f8>)
 800398a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800398c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003990:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8003994:	2102      	movs	r1, #2
 8003996:	6019      	str	r1, [r3, #0]
 8003998:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800399c:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	fa93 f1a3 	rbit	r1, r3
 80039a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039aa:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039ae:	6019      	str	r1, [r3, #0]
  return result;
 80039b0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039b4:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	fab3 f383 	clz	r3, r3
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	f003 031f 	and.w	r3, r3, #31
 80039ca:	2101      	movs	r1, #1
 80039cc:	fa01 f303 	lsl.w	r3, r1, r3
 80039d0:	4013      	ands	r3, r2
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d197      	bne.n	8003906 <HAL_RCC_OscConfig+0x79a>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/ 
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80039d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80039da:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 0304 	and.w	r3, r3, #4
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	f000 81a5 	beq.w	8003d36 <HAL_RCC_OscConfig+0xbca>
  {
    FlagStatus       pwrclkchanged = RESET;
 80039ec:	2300      	movs	r3, #0
 80039ee:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80039f2:	4b1c      	ldr	r3, [pc, #112]	@ (8003a64 <HAL_RCC_OscConfig+0x8f8>)
 80039f4:	69db      	ldr	r3, [r3, #28]
 80039f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d116      	bne.n	8003a2c <HAL_RCC_OscConfig+0x8c0>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80039fe:	4b19      	ldr	r3, [pc, #100]	@ (8003a64 <HAL_RCC_OscConfig+0x8f8>)
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	4a18      	ldr	r2, [pc, #96]	@ (8003a64 <HAL_RCC_OscConfig+0x8f8>)
 8003a04:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003a08:	61d3      	str	r3, [r2, #28]
 8003a0a:	4b16      	ldr	r3, [pc, #88]	@ (8003a64 <HAL_RCC_OscConfig+0x8f8>)
 8003a0c:	69db      	ldr	r3, [r3, #28]
 8003a0e:	f003 5280 	and.w	r2, r3, #268435456	@ 0x10000000
 8003a12:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a16:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a1a:	601a      	str	r2, [r3, #0]
 8003a1c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a20:	f5a3 73fe 	sub.w	r3, r3, #508	@ 0x1fc
 8003a24:	681b      	ldr	r3, [r3, #0]
      pwrclkchanged = SET;
 8003a26:	2301      	movs	r3, #1
 8003a28:	f887 3207 	strb.w	r3, [r7, #519]	@ 0x207
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a2c:	4b0f      	ldr	r3, [pc, #60]	@ (8003a6c <HAL_RCC_OscConfig+0x900>)
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d121      	bne.n	8003a7c <HAL_RCC_OscConfig+0x910>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003a38:	4b0c      	ldr	r3, [pc, #48]	@ (8003a6c <HAL_RCC_OscConfig+0x900>)
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a0b      	ldr	r2, [pc, #44]	@ (8003a6c <HAL_RCC_OscConfig+0x900>)
 8003a3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003a42:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003a44:	f7fd fdb6 	bl	80015b4 <HAL_GetTick>
 8003a48:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a4c:	e010      	b.n	8003a70 <HAL_RCC_OscConfig+0x904>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003a4e:	f7fd fdb1 	bl	80015b4 <HAL_GetTick>
 8003a52:	4602      	mov	r2, r0
 8003a54:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003a58:	1ad3      	subs	r3, r2, r3
 8003a5a:	2b64      	cmp	r3, #100	@ 0x64
 8003a5c:	d908      	bls.n	8003a70 <HAL_RCC_OscConfig+0x904>
        {
          return HAL_TIMEOUT;
 8003a5e:	2303      	movs	r3, #3
 8003a60:	e3d1      	b.n	8004206 <HAL_RCC_OscConfig+0x109a>
 8003a62:	bf00      	nop
 8003a64:	40021000 	.word	0x40021000
 8003a68:	10908120 	.word	0x10908120
 8003a6c:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003a70:	4b8d      	ldr	r3, [pc, #564]	@ (8003ca8 <HAL_RCC_OscConfig+0xb3c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d0e8      	beq.n	8003a4e <HAL_RCC_OscConfig+0x8e2>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003a7c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a80:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	2b01      	cmp	r3, #1
 8003a8a:	d106      	bne.n	8003a9a <HAL_RCC_OscConfig+0x92e>
 8003a8c:	4b87      	ldr	r3, [pc, #540]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003a8e:	6a1b      	ldr	r3, [r3, #32]
 8003a90:	4a86      	ldr	r2, [pc, #536]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003a92:	f043 0301 	orr.w	r3, r3, #1
 8003a96:	6213      	str	r3, [r2, #32]
 8003a98:	e035      	b.n	8003b06 <HAL_RCC_OscConfig+0x99a>
 8003a9a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003a9e:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d10c      	bne.n	8003ac4 <HAL_RCC_OscConfig+0x958>
 8003aaa:	4b80      	ldr	r3, [pc, #512]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003aac:	6a1b      	ldr	r3, [r3, #32]
 8003aae:	4a7f      	ldr	r2, [pc, #508]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003ab0:	f023 0301 	bic.w	r3, r3, #1
 8003ab4:	6213      	str	r3, [r2, #32]
 8003ab6:	4b7d      	ldr	r3, [pc, #500]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	4a7c      	ldr	r2, [pc, #496]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003abc:	f023 0304 	bic.w	r3, r3, #4
 8003ac0:	6213      	str	r3, [r2, #32]
 8003ac2:	e020      	b.n	8003b06 <HAL_RCC_OscConfig+0x99a>
 8003ac4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ac8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	2b05      	cmp	r3, #5
 8003ad2:	d10c      	bne.n	8003aee <HAL_RCC_OscConfig+0x982>
 8003ad4:	4b75      	ldr	r3, [pc, #468]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003ad6:	6a1b      	ldr	r3, [r3, #32]
 8003ad8:	4a74      	ldr	r2, [pc, #464]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003ada:	f043 0304 	orr.w	r3, r3, #4
 8003ade:	6213      	str	r3, [r2, #32]
 8003ae0:	4b72      	ldr	r3, [pc, #456]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003ae2:	6a1b      	ldr	r3, [r3, #32]
 8003ae4:	4a71      	ldr	r2, [pc, #452]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003ae6:	f043 0301 	orr.w	r3, r3, #1
 8003aea:	6213      	str	r3, [r2, #32]
 8003aec:	e00b      	b.n	8003b06 <HAL_RCC_OscConfig+0x99a>
 8003aee:	4b6f      	ldr	r3, [pc, #444]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003af0:	6a1b      	ldr	r3, [r3, #32]
 8003af2:	4a6e      	ldr	r2, [pc, #440]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003af4:	f023 0301 	bic.w	r3, r3, #1
 8003af8:	6213      	str	r3, [r2, #32]
 8003afa:	4b6c      	ldr	r3, [pc, #432]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003afc:	6a1b      	ldr	r3, [r3, #32]
 8003afe:	4a6b      	ldr	r2, [pc, #428]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003b00:	f023 0304 	bic.w	r3, r3, #4
 8003b04:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003b06:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b0a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	689b      	ldr	r3, [r3, #8]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	f000 8081 	beq.w	8003c1a <HAL_RCC_OscConfig+0xaae>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003b18:	f7fd fd4c 	bl	80015b4 <HAL_GetTick>
 8003b1c:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is ready */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b20:	e00b      	b.n	8003b3a <HAL_RCC_OscConfig+0x9ce>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003b22:	f7fd fd47 	bl	80015b4 <HAL_GetTick>
 8003b26:	4602      	mov	r2, r0
 8003b28:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003b2c:	1ad3      	subs	r3, r2, r3
 8003b2e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b32:	4293      	cmp	r3, r2
 8003b34:	d901      	bls.n	8003b3a <HAL_RCC_OscConfig+0x9ce>
        {
          return HAL_TIMEOUT;
 8003b36:	2303      	movs	r3, #3
 8003b38:	e365      	b.n	8004206 <HAL_RCC_OscConfig+0x109a>
 8003b3a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b3e:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003b42:	2202      	movs	r2, #2
 8003b44:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003b46:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b4a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	fa93 f2a3 	rbit	r2, r3
 8003b54:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b58:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8003b5c:	601a      	str	r2, [r3, #0]
 8003b5e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b62:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b66:	2202      	movs	r2, #2
 8003b68:	601a      	str	r2, [r3, #0]
 8003b6a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b6e:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	fa93 f2a3 	rbit	r2, r3
 8003b78:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b7c:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b80:	601a      	str	r2, [r3, #0]
  return result;
 8003b82:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003b86:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 8003b8a:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003b8c:	fab3 f383 	clz	r3, r3
 8003b90:	b2db      	uxtb	r3, r3
 8003b92:	095b      	lsrs	r3, r3, #5
 8003b94:	b2db      	uxtb	r3, r3
 8003b96:	f043 0302 	orr.w	r3, r3, #2
 8003b9a:	b2db      	uxtb	r3, r3
 8003b9c:	2b02      	cmp	r3, #2
 8003b9e:	d102      	bne.n	8003ba6 <HAL_RCC_OscConfig+0xa3a>
 8003ba0:	4b42      	ldr	r3, [pc, #264]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	e013      	b.n	8003bce <HAL_RCC_OscConfig+0xa62>
 8003ba6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003baa:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003bae:	2202      	movs	r2, #2
 8003bb0:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003bb2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bb6:	f5a3 73aa 	sub.w	r3, r3, #340	@ 0x154
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	fa93 f2a3 	rbit	r2, r3
 8003bc0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003bc4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 8003bc8:	601a      	str	r2, [r3, #0]
 8003bca:	4b38      	ldr	r3, [pc, #224]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003bcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bce:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bd2:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003bd6:	2102      	movs	r1, #2
 8003bd8:	6011      	str	r1, [r2, #0]
 8003bda:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bde:	f5a2 72ae 	sub.w	r2, r2, #348	@ 0x15c
 8003be2:	6812      	ldr	r2, [r2, #0]
 8003be4:	fa92 f1a2 	rbit	r1, r2
 8003be8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bec:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003bf0:	6011      	str	r1, [r2, #0]
  return result;
 8003bf2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003bf6:	f5a2 72b0 	sub.w	r2, r2, #352	@ 0x160
 8003bfa:	6812      	ldr	r2, [r2, #0]
 8003bfc:	fab2 f282 	clz	r2, r2
 8003c00:	b2d2      	uxtb	r2, r2
 8003c02:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c06:	b2d2      	uxtb	r2, r2
 8003c08:	f002 021f 	and.w	r2, r2, #31
 8003c0c:	2101      	movs	r1, #1
 8003c0e:	fa01 f202 	lsl.w	r2, r1, r2
 8003c12:	4013      	ands	r3, r2
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d084      	beq.n	8003b22 <HAL_RCC_OscConfig+0x9b6>
 8003c18:	e083      	b.n	8003d22 <HAL_RCC_OscConfig+0xbb6>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c1a:	f7fd fccb 	bl	80015b4 <HAL_GetTick>
 8003c1e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
      
      /* Wait till LSE is disabled */  
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c22:	e00b      	b.n	8003c3c <HAL_RCC_OscConfig+0xad0>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003c24:	f7fd fcc6 	bl	80015b4 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003c2e:	1ad3      	subs	r3, r2, r3
 8003c30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d901      	bls.n	8003c3c <HAL_RCC_OscConfig+0xad0>
        {
          return HAL_TIMEOUT;
 8003c38:	2303      	movs	r3, #3
 8003c3a:	e2e4      	b.n	8004206 <HAL_RCC_OscConfig+0x109a>
 8003c3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c40:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003c44:	2202      	movs	r2, #2
 8003c46:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003c48:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c4c:	f5a3 73b2 	sub.w	r3, r3, #356	@ 0x164
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	fa93 f2a3 	rbit	r2, r3
 8003c56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c5a:	f5a3 73b4 	sub.w	r3, r3, #360	@ 0x168
 8003c5e:	601a      	str	r2, [r3, #0]
 8003c60:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c64:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c68:	2202      	movs	r2, #2
 8003c6a:	601a      	str	r2, [r3, #0]
 8003c6c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c70:	f5a3 73b6 	sub.w	r3, r3, #364	@ 0x16c
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	fa93 f2a3 	rbit	r2, r3
 8003c7a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c7e:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c82:	601a      	str	r2, [r3, #0]
  return result;
 8003c84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003c88:	f5a3 73b8 	sub.w	r3, r3, #368	@ 0x170
 8003c8c:	681b      	ldr	r3, [r3, #0]
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003c8e:	fab3 f383 	clz	r3, r3
 8003c92:	b2db      	uxtb	r3, r3
 8003c94:	095b      	lsrs	r3, r3, #5
 8003c96:	b2db      	uxtb	r3, r3
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	b2db      	uxtb	r3, r3
 8003c9e:	2b02      	cmp	r3, #2
 8003ca0:	d106      	bne.n	8003cb0 <HAL_RCC_OscConfig+0xb44>
 8003ca2:	4b02      	ldr	r3, [pc, #8]	@ (8003cac <HAL_RCC_OscConfig+0xb40>)
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	e017      	b.n	8003cd8 <HAL_RCC_OscConfig+0xb6c>
 8003ca8:	40007000 	.word	0x40007000
 8003cac:	40021000 	.word	0x40021000
 8003cb0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cb4:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003cb8:	2202      	movs	r2, #2
 8003cba:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003cbc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cc0:	f5a3 73ba 	sub.w	r3, r3, #372	@ 0x174
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	fa93 f2a3 	rbit	r2, r3
 8003cca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003cce:	f5a3 73bc 	sub.w	r3, r3, #376	@ 0x178
 8003cd2:	601a      	str	r2, [r3, #0]
 8003cd4:	4bb3      	ldr	r3, [pc, #716]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cdc:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003ce0:	2102      	movs	r1, #2
 8003ce2:	6011      	str	r1, [r2, #0]
 8003ce4:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ce8:	f5a2 72be 	sub.w	r2, r2, #380	@ 0x17c
 8003cec:	6812      	ldr	r2, [r2, #0]
 8003cee:	fa92 f1a2 	rbit	r1, r2
 8003cf2:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003cf6:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003cfa:	6011      	str	r1, [r2, #0]
  return result;
 8003cfc:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003d00:	f5a2 72c0 	sub.w	r2, r2, #384	@ 0x180
 8003d04:	6812      	ldr	r2, [r2, #0]
 8003d06:	fab2 f282 	clz	r2, r2
 8003d0a:	b2d2      	uxtb	r2, r2
 8003d0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003d10:	b2d2      	uxtb	r2, r2
 8003d12:	f002 021f 	and.w	r2, r2, #31
 8003d16:	2101      	movs	r1, #1
 8003d18:	fa01 f202 	lsl.w	r2, r1, r2
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d180      	bne.n	8003c24 <HAL_RCC_OscConfig+0xab8>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003d22:	f897 3207 	ldrb.w	r3, [r7, #519]	@ 0x207
 8003d26:	2b01      	cmp	r3, #1
 8003d28:	d105      	bne.n	8003d36 <HAL_RCC_OscConfig+0xbca>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d2a:	4b9e      	ldr	r3, [pc, #632]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003d2c:	69db      	ldr	r3, [r3, #28]
 8003d2e:	4a9d      	ldr	r2, [pc, #628]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003d34:	61d3      	str	r3, [r2, #28]
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d36:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d3a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	699b      	ldr	r3, [r3, #24]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	f000 825e 	beq.w	8004204 <HAL_RCC_OscConfig+0x1098>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003d48:	4b96      	ldr	r3, [pc, #600]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003d4a:	685b      	ldr	r3, [r3, #4]
 8003d4c:	f003 030c 	and.w	r3, r3, #12
 8003d50:	2b08      	cmp	r3, #8
 8003d52:	f000 821f 	beq.w	8004194 <HAL_RCC_OscConfig+0x1028>
    { 
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d56:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d5a:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	699b      	ldr	r3, [r3, #24]
 8003d62:	2b02      	cmp	r3, #2
 8003d64:	f040 8170 	bne.w	8004048 <HAL_RCC_OscConfig+0xedc>
 8003d68:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d6c:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d70:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003d74:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d76:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d7a:	f5a3 73c2 	sub.w	r3, r3, #388	@ 0x184
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	fa93 f2a3 	rbit	r2, r3
 8003d84:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d88:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d8c:	601a      	str	r2, [r3, #0]
  return result;
 8003d8e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003d92:	f5a3 73c4 	sub.w	r3, r3, #392	@ 0x188
 8003d96:	681b      	ldr	r3, [r3, #0]
#if   defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        assert_param(IS_RCC_PREDIV(RCC_OscInitStruct->PLL.PREDIV));
#endif
  
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d98:	fab3 f383 	clz	r3, r3
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003da2:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003da6:	009b      	lsls	r3, r3, #2
 8003da8:	461a      	mov	r2, r3
 8003daa:	2300      	movs	r3, #0
 8003dac:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dae:	f7fd fc01 	bl	80015b4 <HAL_GetTick>
 8003db2:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003db6:	e009      	b.n	8003dcc <HAL_RCC_OscConfig+0xc60>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003db8:	f7fd fbfc 	bl	80015b4 <HAL_GetTick>
 8003dbc:	4602      	mov	r2, r0
 8003dbe:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003dc2:	1ad3      	subs	r3, r2, r3
 8003dc4:	2b02      	cmp	r3, #2
 8003dc6:	d901      	bls.n	8003dcc <HAL_RCC_OscConfig+0xc60>
          {
            return HAL_TIMEOUT;
 8003dc8:	2303      	movs	r3, #3
 8003dca:	e21c      	b.n	8004206 <HAL_RCC_OscConfig+0x109a>
 8003dcc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dd0:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003dd4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003dd8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003dda:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dde:	f5a3 73c6 	sub.w	r3, r3, #396	@ 0x18c
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	fa93 f2a3 	rbit	r2, r3
 8003de8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003dec:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003df0:	601a      	str	r2, [r3, #0]
  return result;
 8003df2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003df6:	f5a3 73c8 	sub.w	r3, r3, #400	@ 0x190
 8003dfa:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003dfc:	fab3 f383 	clz	r3, r3
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	095b      	lsrs	r3, r3, #5
 8003e04:	b2db      	uxtb	r3, r3
 8003e06:	f043 0301 	orr.w	r3, r3, #1
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d102      	bne.n	8003e16 <HAL_RCC_OscConfig+0xcaa>
 8003e10:	4b64      	ldr	r3, [pc, #400]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	e027      	b.n	8003e66 <HAL_RCC_OscConfig+0xcfa>
 8003e16:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e1a:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003e1e:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e22:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003e24:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e28:	f5a3 73ca 	sub.w	r3, r3, #404	@ 0x194
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	fa93 f2a3 	rbit	r2, r3
 8003e32:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e36:	f5a3 73cc 	sub.w	r3, r3, #408	@ 0x198
 8003e3a:	601a      	str	r2, [r3, #0]
 8003e3c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e40:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003e44:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003e48:	601a      	str	r2, [r3, #0]
 8003e4a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e4e:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	fa93 f2a3 	rbit	r2, r3
 8003e58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003e5c:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8003e60:	601a      	str	r2, [r3, #0]
 8003e62:	4b50      	ldr	r3, [pc, #320]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e6a:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e6e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8003e72:	6011      	str	r1, [r2, #0]
 8003e74:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e78:	f5a2 72d2 	sub.w	r2, r2, #420	@ 0x1a4
 8003e7c:	6812      	ldr	r2, [r2, #0]
 8003e7e:	fa92 f1a2 	rbit	r1, r2
 8003e82:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e86:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003e8a:	6011      	str	r1, [r2, #0]
  return result;
 8003e8c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003e90:	f5a2 72d4 	sub.w	r2, r2, #424	@ 0x1a8
 8003e94:	6812      	ldr	r2, [r2, #0]
 8003e96:	fab2 f282 	clz	r2, r2
 8003e9a:	b2d2      	uxtb	r2, r2
 8003e9c:	f042 0220 	orr.w	r2, r2, #32
 8003ea0:	b2d2      	uxtb	r2, r2
 8003ea2:	f002 021f 	and.w	r2, r2, #31
 8003ea6:	2101      	movs	r1, #1
 8003ea8:	fa01 f202 	lsl.w	r2, r1, r2
 8003eac:	4013      	ands	r3, r2
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d182      	bne.n	8003db8 <HAL_RCC_OscConfig+0xc4c>
          }
        }

#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        /* Configure the main PLL clock source, predivider and multiplication factor. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003eb2:	4b3c      	ldr	r3, [pc, #240]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003eb6:	f023 020f 	bic.w	r2, r3, #15
 8003eba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ebe:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ec6:	4937      	ldr	r1, [pc, #220]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	62cb      	str	r3, [r1, #44]	@ 0x2c
 8003ecc:	4b35      	ldr	r3, [pc, #212]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	f423 1276 	bic.w	r2, r3, #4030464	@ 0x3d8000
 8003ed4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ed8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003edc:	681b      	ldr	r3, [r3, #0]
 8003ede:	6a19      	ldr	r1, [r3, #32]
 8003ee0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ee4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	69db      	ldr	r3, [r3, #28]
 8003eec:	430b      	orrs	r3, r1
 8003eee:	492d      	ldr	r1, [pc, #180]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	604b      	str	r3, [r1, #4]
 8003ef4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003ef8:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003efc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8003f00:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f02:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f06:	f5a3 73d6 	sub.w	r3, r3, #428	@ 0x1ac
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	fa93 f2a3 	rbit	r2, r3
 8003f10:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f14:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f18:	601a      	str	r2, [r3, #0]
  return result;
 8003f1a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f1e:	f5a3 73d8 	sub.w	r3, r3, #432	@ 0x1b0
 8003f22:	681b      	ldr	r3, [r3, #0]
      /* Configure the main PLL clock source and multiplication factor. */
      __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
                           RCC_OscInitStruct->PLL.PLLMUL);
#endif /* RCC_CFGR_PLLSRC_HSI_PREDIV */
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f24:	fab3 f383 	clz	r3, r3
 8003f28:	b2db      	uxtb	r3, r3
 8003f2a:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8003f2e:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8003f32:	009b      	lsls	r3, r3, #2
 8003f34:	461a      	mov	r2, r3
 8003f36:	2301      	movs	r3, #1
 8003f38:	6013      	str	r3, [r2, #0]
        
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f3a:	f7fd fb3b 	bl	80015b4 <HAL_GetTick>
 8003f3e:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f42:	e009      	b.n	8003f58 <HAL_RCC_OscConfig+0xdec>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f44:	f7fd fb36 	bl	80015b4 <HAL_GetTick>
 8003f48:	4602      	mov	r2, r0
 8003f4a:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 8003f4e:	1ad3      	subs	r3, r2, r3
 8003f50:	2b02      	cmp	r3, #2
 8003f52:	d901      	bls.n	8003f58 <HAL_RCC_OscConfig+0xdec>
          {
            return HAL_TIMEOUT;
 8003f54:	2303      	movs	r3, #3
 8003f56:	e156      	b.n	8004206 <HAL_RCC_OscConfig+0x109a>
 8003f58:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f5c:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003f64:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003f66:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f6a:	f5a3 73da 	sub.w	r3, r3, #436	@ 0x1b4
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	fa93 f2a3 	rbit	r2, r3
 8003f74:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f78:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f7c:	601a      	str	r2, [r3, #0]
  return result;
 8003f7e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003f82:	f5a3 73dc 	sub.w	r3, r3, #440	@ 0x1b8
 8003f86:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003f88:	fab3 f383 	clz	r3, r3
 8003f8c:	b2db      	uxtb	r3, r3
 8003f8e:	095b      	lsrs	r3, r3, #5
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	f043 0301 	orr.w	r3, r3, #1
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d105      	bne.n	8003fa8 <HAL_RCC_OscConfig+0xe3c>
 8003f9c:	4b01      	ldr	r3, [pc, #4]	@ (8003fa4 <HAL_RCC_OscConfig+0xe38>)
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	e02a      	b.n	8003ff8 <HAL_RCC_OscConfig+0xe8c>
 8003fa2:	bf00      	nop
 8003fa4:	40021000 	.word	0x40021000
 8003fa8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fac:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003fb0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fb4:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003fb6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fba:	f5a3 73de 	sub.w	r3, r3, #444	@ 0x1bc
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	fa93 f2a3 	rbit	r2, r3
 8003fc4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fc8:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8003fcc:	601a      	str	r2, [r3, #0]
 8003fce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fd2:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003fd6:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003fda:	601a      	str	r2, [r3, #0]
 8003fdc:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fe0:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	fa93 f2a3 	rbit	r2, r3
 8003fea:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8003fee:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8003ff2:	601a      	str	r2, [r3, #0]
 8003ff4:	4b86      	ldr	r3, [pc, #536]	@ (8004210 <HAL_RCC_OscConfig+0x10a4>)
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8003ffc:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 8004000:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004004:	6011      	str	r1, [r2, #0]
 8004006:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800400a:	f5a2 72e6 	sub.w	r2, r2, #460	@ 0x1cc
 800400e:	6812      	ldr	r2, [r2, #0]
 8004010:	fa92 f1a2 	rbit	r1, r2
 8004014:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004018:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 800401c:	6011      	str	r1, [r2, #0]
  return result;
 800401e:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004022:	f5a2 72e8 	sub.w	r2, r2, #464	@ 0x1d0
 8004026:	6812      	ldr	r2, [r2, #0]
 8004028:	fab2 f282 	clz	r2, r2
 800402c:	b2d2      	uxtb	r2, r2
 800402e:	f042 0220 	orr.w	r2, r2, #32
 8004032:	b2d2      	uxtb	r2, r2
 8004034:	f002 021f 	and.w	r2, r2, #31
 8004038:	2101      	movs	r1, #1
 800403a:	fa01 f202 	lsl.w	r2, r1, r2
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	f43f af7f 	beq.w	8003f44 <HAL_RCC_OscConfig+0xdd8>
 8004046:	e0dd      	b.n	8004204 <HAL_RCC_OscConfig+0x1098>
 8004048:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800404c:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 8004050:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8004054:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004056:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800405a:	f5a3 73ea 	sub.w	r3, r3, #468	@ 0x1d4
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	fa93 f2a3 	rbit	r2, r3
 8004064:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004068:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 800406c:	601a      	str	r2, [r3, #0]
  return result;
 800406e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004072:	f5a3 73ec 	sub.w	r3, r3, #472	@ 0x1d8
 8004076:	681b      	ldr	r3, [r3, #0]
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004078:	fab3 f383 	clz	r3, r3
 800407c:	b2db      	uxtb	r3, r3
 800407e:	f103 5384 	add.w	r3, r3, #276824064	@ 0x10800000
 8004082:	f503 1384 	add.w	r3, r3, #1081344	@ 0x108000
 8004086:	009b      	lsls	r3, r3, #2
 8004088:	461a      	mov	r2, r3
 800408a:	2300      	movs	r3, #0
 800408c:	6013      	str	r3, [r2, #0]
 
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800408e:	f7fd fa91 	bl	80015b4 <HAL_GetTick>
 8004092:	f8c7 0200 	str.w	r0, [r7, #512]	@ 0x200
        
        /* Wait till PLL is disabled */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004096:	e009      	b.n	80040ac <HAL_RCC_OscConfig+0xf40>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004098:	f7fd fa8c 	bl	80015b4 <HAL_GetTick>
 800409c:	4602      	mov	r2, r0
 800409e:	f8d7 3200 	ldr.w	r3, [r7, #512]	@ 0x200
 80040a2:	1ad3      	subs	r3, r2, r3
 80040a4:	2b02      	cmp	r3, #2
 80040a6:	d901      	bls.n	80040ac <HAL_RCC_OscConfig+0xf40>
          {
            return HAL_TIMEOUT;
 80040a8:	2303      	movs	r3, #3
 80040aa:	e0ac      	b.n	8004206 <HAL_RCC_OscConfig+0x109a>
 80040ac:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040b0:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80040b4:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80040b8:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80040ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040be:	f5a3 73ee 	sub.w	r3, r3, #476	@ 0x1dc
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	fa93 f2a3 	rbit	r2, r3
 80040c8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040cc:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80040d0:	601a      	str	r2, [r3, #0]
  return result;
 80040d2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040d6:	f5a3 73f0 	sub.w	r3, r3, #480	@ 0x1e0
 80040da:	681b      	ldr	r3, [r3, #0]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80040dc:	fab3 f383 	clz	r3, r3
 80040e0:	b2db      	uxtb	r3, r3
 80040e2:	095b      	lsrs	r3, r3, #5
 80040e4:	b2db      	uxtb	r3, r3
 80040e6:	f043 0301 	orr.w	r3, r3, #1
 80040ea:	b2db      	uxtb	r3, r3
 80040ec:	2b01      	cmp	r3, #1
 80040ee:	d102      	bne.n	80040f6 <HAL_RCC_OscConfig+0xf8a>
 80040f0:	4b47      	ldr	r3, [pc, #284]	@ (8004210 <HAL_RCC_OscConfig+0x10a4>)
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	e027      	b.n	8004146 <HAL_RCC_OscConfig+0xfda>
 80040f6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80040fa:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 80040fe:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004102:	601a      	str	r2, [r3, #0]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004104:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004108:	f5a3 73f2 	sub.w	r3, r3, #484	@ 0x1e4
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	fa93 f2a3 	rbit	r2, r3
 8004112:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004116:	f5a3 73f4 	sub.w	r3, r3, #488	@ 0x1e8
 800411a:	601a      	str	r2, [r3, #0]
 800411c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004120:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004124:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004128:	601a      	str	r2, [r3, #0]
 800412a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800412e:	f5a3 73f6 	sub.w	r3, r3, #492	@ 0x1ec
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	fa93 f2a3 	rbit	r2, r3
 8004138:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800413c:	f5a3 73f8 	sub.w	r3, r3, #496	@ 0x1f0
 8004140:	601a      	str	r2, [r3, #0]
 8004142:	4b33      	ldr	r3, [pc, #204]	@ (8004210 <HAL_RCC_OscConfig+0x10a4>)
 8004144:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004146:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 800414a:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800414e:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
 8004152:	6011      	str	r1, [r2, #0]
 8004154:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004158:	f5a2 72fa 	sub.w	r2, r2, #500	@ 0x1f4
 800415c:	6812      	ldr	r2, [r2, #0]
 800415e:	fa92 f1a2 	rbit	r1, r2
 8004162:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004166:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 800416a:	6011      	str	r1, [r2, #0]
  return result;
 800416c:	f507 7202 	add.w	r2, r7, #520	@ 0x208
 8004170:	f5a2 72fc 	sub.w	r2, r2, #504	@ 0x1f8
 8004174:	6812      	ldr	r2, [r2, #0]
 8004176:	fab2 f282 	clz	r2, r2
 800417a:	b2d2      	uxtb	r2, r2
 800417c:	f042 0220 	orr.w	r2, r2, #32
 8004180:	b2d2      	uxtb	r2, r2
 8004182:	f002 021f 	and.w	r2, r2, #31
 8004186:	2101      	movs	r1, #1
 8004188:	fa01 f202 	lsl.w	r2, r1, r2
 800418c:	4013      	ands	r3, r2
 800418e:	2b00      	cmp	r3, #0
 8004190:	d182      	bne.n	8004098 <HAL_RCC_OscConfig+0xf2c>
 8004192:	e037      	b.n	8004204 <HAL_RCC_OscConfig+0x1098>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004194:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8004198:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	699b      	ldr	r3, [r3, #24]
 80041a0:	2b01      	cmp	r3, #1
 80041a2:	d101      	bne.n	80041a8 <HAL_RCC_OscConfig+0x103c>
      {
        return HAL_ERROR;
 80041a4:	2301      	movs	r3, #1
 80041a6:	e02e      	b.n	8004206 <HAL_RCC_OscConfig+0x109a>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80041a8:	4b19      	ldr	r3, [pc, #100]	@ (8004210 <HAL_RCC_OscConfig+0x10a4>)
 80041aa:	685b      	ldr	r3, [r3, #4]
 80041ac:	f8c7 31fc 	str.w	r3, [r7, #508]	@ 0x1fc
#if defined(RCC_CFGR_PLLSRC_HSI_PREDIV)
        pll_config2 = RCC->CFGR2;
 80041b0:	4b17      	ldr	r3, [pc, #92]	@ (8004210 <HAL_RCC_OscConfig+0x10a4>)
 80041b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041b4:	f8c7 31f8 	str.w	r3, [r7, #504]	@ 0x1f8
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041b8:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80041bc:	f403 32c0 	and.w	r2, r3, #98304	@ 0x18000
 80041c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041c4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	69db      	ldr	r3, [r3, #28]
 80041cc:	429a      	cmp	r2, r3
 80041ce:	d117      	bne.n	8004200 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041d0:	f8d7 31fc 	ldr.w	r3, [r7, #508]	@ 0x1fc
 80041d4:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80041d8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041dc:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d10b      	bne.n	8004200 <HAL_RCC_OscConfig+0x1094>
           (READ_BIT(pll_config2, RCC_CFGR2_PREDIV)  != RCC_OscInitStruct->PLL.PREDIV))     
 80041e8:	f8d7 31f8 	ldr.w	r3, [r7, #504]	@ 0x1f8
 80041ec:	f003 020f 	and.w	r2, r3, #15
 80041f0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80041f4:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL)    ||      
 80041fc:	429a      	cmp	r2, r3
 80041fe:	d001      	beq.n	8004204 <HAL_RCC_OscConfig+0x1098>
#else
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC)   != RCC_OscInitStruct->PLL.PLLSource) ||      
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL)   != RCC_OscInitStruct->PLL.PLLMUL))
#endif
        {
          return HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e000      	b.n	8004206 <HAL_RCC_OscConfig+0x109a>
        }
      }
    }
  }

  return HAL_OK;
 8004204:	2300      	movs	r3, #0
}
 8004206:	4618      	mov	r0, r3
 8004208:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 800420c:	46bd      	mov	sp, r7
 800420e:	bd80      	pop	{r7, pc}
 8004210:	40021000 	.word	0x40021000

08004214 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004214:	b580      	push	{r7, lr}
 8004216:	b09e      	sub	sp, #120	@ 0x78
 8004218:	af00      	add	r7, sp, #0
 800421a:	6078      	str	r0, [r7, #4]
 800421c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800421e:	2300      	movs	r3, #0
 8004220:	677b      	str	r3, [r7, #116]	@ 0x74

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d101      	bne.n	800422c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8004228:	2301      	movs	r3, #1
 800422a:	e162      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2de>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY) 
  must be correctly programmed according to the frequency of the CPU clock 
    (HCLK) of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800422c:	4b90      	ldr	r3, [pc, #576]	@ (8004470 <HAL_RCC_ClockConfig+0x25c>)
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f003 0307 	and.w	r3, r3, #7
 8004234:	683a      	ldr	r2, [r7, #0]
 8004236:	429a      	cmp	r2, r3
 8004238:	d910      	bls.n	800425c <HAL_RCC_ClockConfig+0x48>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800423a:	4b8d      	ldr	r3, [pc, #564]	@ (8004470 <HAL_RCC_ClockConfig+0x25c>)
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	f023 0207 	bic.w	r2, r3, #7
 8004242:	498b      	ldr	r1, [pc, #556]	@ (8004470 <HAL_RCC_ClockConfig+0x25c>)
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	4313      	orrs	r3, r2
 8004248:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800424a:	4b89      	ldr	r3, [pc, #548]	@ (8004470 <HAL_RCC_ClockConfig+0x25c>)
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	683a      	ldr	r2, [r7, #0]
 8004254:	429a      	cmp	r2, r3
 8004256:	d001      	beq.n	800425c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8004258:	2301      	movs	r3, #1
 800425a:	e14a      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2de>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f003 0302 	and.w	r3, r3, #2
 8004264:	2b00      	cmp	r3, #0
 8004266:	d008      	beq.n	800427a <HAL_RCC_ClockConfig+0x66>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004268:	4b82      	ldr	r3, [pc, #520]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	689b      	ldr	r3, [r3, #8]
 8004274:	497f      	ldr	r1, [pc, #508]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 8004276:	4313      	orrs	r3, r2
 8004278:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	f003 0301 	and.w	r3, r3, #1
 8004282:	2b00      	cmp	r3, #0
 8004284:	f000 80dc 	beq.w	8004440 <HAL_RCC_ClockConfig+0x22c>
  {    
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
    
    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	685b      	ldr	r3, [r3, #4]
 800428c:	2b01      	cmp	r3, #1
 800428e:	d13c      	bne.n	800430a <HAL_RCC_ClockConfig+0xf6>
 8004290:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8004294:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004296:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004298:	fa93 f3a3 	rbit	r3, r3
 800429c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  return result;
 800429e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
    {
      /* Check the HSE ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042a0:	fab3 f383 	clz	r3, r3
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	095b      	lsrs	r3, r3, #5
 80042a8:	b2db      	uxtb	r3, r3
 80042aa:	f043 0301 	orr.w	r3, r3, #1
 80042ae:	b2db      	uxtb	r3, r3
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d102      	bne.n	80042ba <HAL_RCC_ClockConfig+0xa6>
 80042b4:	4b6f      	ldr	r3, [pc, #444]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	e00f      	b.n	80042da <HAL_RCC_ClockConfig+0xc6>
 80042ba:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042be:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80042c0:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80042c2:	fa93 f3a3 	rbit	r3, r3
 80042c6:	667b      	str	r3, [r7, #100]	@ 0x64
 80042c8:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80042cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80042ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80042d0:	fa93 f3a3 	rbit	r3, r3
 80042d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80042d6:	4b67      	ldr	r3, [pc, #412]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 80042d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80042da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80042de:	65ba      	str	r2, [r7, #88]	@ 0x58
 80042e0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80042e2:	fa92 f2a2 	rbit	r2, r2
 80042e6:	657a      	str	r2, [r7, #84]	@ 0x54
  return result;
 80042e8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80042ea:	fab2 f282 	clz	r2, r2
 80042ee:	b2d2      	uxtb	r2, r2
 80042f0:	f042 0220 	orr.w	r2, r2, #32
 80042f4:	b2d2      	uxtb	r2, r2
 80042f6:	f002 021f 	and.w	r2, r2, #31
 80042fa:	2101      	movs	r1, #1
 80042fc:	fa01 f202 	lsl.w	r2, r1, r2
 8004300:	4013      	ands	r3, r2
 8004302:	2b00      	cmp	r3, #0
 8004304:	d17b      	bne.n	80043fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e0f3      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	685b      	ldr	r3, [r3, #4]
 800430e:	2b02      	cmp	r3, #2
 8004310:	d13c      	bne.n	800438c <HAL_RCC_ClockConfig+0x178>
 8004312:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004316:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004318:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800431a:	fa93 f3a3 	rbit	r3, r3
 800431e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8004320:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
    {
      /* Check the PLL ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004322:	fab3 f383 	clz	r3, r3
 8004326:	b2db      	uxtb	r3, r3
 8004328:	095b      	lsrs	r3, r3, #5
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f043 0301 	orr.w	r3, r3, #1
 8004330:	b2db      	uxtb	r3, r3
 8004332:	2b01      	cmp	r3, #1
 8004334:	d102      	bne.n	800433c <HAL_RCC_ClockConfig+0x128>
 8004336:	4b4f      	ldr	r3, [pc, #316]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	e00f      	b.n	800435c <HAL_RCC_ClockConfig+0x148>
 800433c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004340:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004342:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004344:	fa93 f3a3 	rbit	r3, r3
 8004348:	647b      	str	r3, [r7, #68]	@ 0x44
 800434a:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800434e:	643b      	str	r3, [r7, #64]	@ 0x40
 8004350:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004352:	fa93 f3a3 	rbit	r3, r3
 8004356:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004358:	4b46      	ldr	r3, [pc, #280]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 800435a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800435c:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8004360:	63ba      	str	r2, [r7, #56]	@ 0x38
 8004362:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004364:	fa92 f2a2 	rbit	r2, r2
 8004368:	637a      	str	r2, [r7, #52]	@ 0x34
  return result;
 800436a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800436c:	fab2 f282 	clz	r2, r2
 8004370:	b2d2      	uxtb	r2, r2
 8004372:	f042 0220 	orr.w	r2, r2, #32
 8004376:	b2d2      	uxtb	r2, r2
 8004378:	f002 021f 	and.w	r2, r2, #31
 800437c:	2101      	movs	r1, #1
 800437e:	fa01 f202 	lsl.w	r2, r1, r2
 8004382:	4013      	ands	r3, r2
 8004384:	2b00      	cmp	r3, #0
 8004386:	d13a      	bne.n	80043fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 8004388:	2301      	movs	r3, #1
 800438a:	e0b2      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2de>
 800438c:	2302      	movs	r3, #2
 800438e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004392:	fa93 f3a3 	rbit	r3, r3
 8004396:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */  
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800439a:	fab3 f383 	clz	r3, r3
 800439e:	b2db      	uxtb	r3, r3
 80043a0:	095b      	lsrs	r3, r3, #5
 80043a2:	b2db      	uxtb	r3, r3
 80043a4:	f043 0301 	orr.w	r3, r3, #1
 80043a8:	b2db      	uxtb	r3, r3
 80043aa:	2b01      	cmp	r3, #1
 80043ac:	d102      	bne.n	80043b4 <HAL_RCC_ClockConfig+0x1a0>
 80043ae:	4b31      	ldr	r3, [pc, #196]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	e00d      	b.n	80043d0 <HAL_RCC_ClockConfig+0x1bc>
 80043b4:	2302      	movs	r3, #2
 80043b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80043b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043ba:	fa93 f3a3 	rbit	r3, r3
 80043be:	627b      	str	r3, [r7, #36]	@ 0x24
 80043c0:	2302      	movs	r3, #2
 80043c2:	623b      	str	r3, [r7, #32]
 80043c4:	6a3b      	ldr	r3, [r7, #32]
 80043c6:	fa93 f3a3 	rbit	r3, r3
 80043ca:	61fb      	str	r3, [r7, #28]
 80043cc:	4b29      	ldr	r3, [pc, #164]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 80043ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043d0:	2202      	movs	r2, #2
 80043d2:	61ba      	str	r2, [r7, #24]
 80043d4:	69ba      	ldr	r2, [r7, #24]
 80043d6:	fa92 f2a2 	rbit	r2, r2
 80043da:	617a      	str	r2, [r7, #20]
  return result;
 80043dc:	697a      	ldr	r2, [r7, #20]
 80043de:	fab2 f282 	clz	r2, r2
 80043e2:	b2d2      	uxtb	r2, r2
 80043e4:	f042 0220 	orr.w	r2, r2, #32
 80043e8:	b2d2      	uxtb	r2, r2
 80043ea:	f002 021f 	and.w	r2, r2, #31
 80043ee:	2101      	movs	r1, #1
 80043f0:	fa01 f202 	lsl.w	r2, r1, r2
 80043f4:	4013      	ands	r3, r2
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d101      	bne.n	80043fe <HAL_RCC_ClockConfig+0x1ea>
      {
        return HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	e079      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2de>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80043fe:	4b1d      	ldr	r3, [pc, #116]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 8004400:	685b      	ldr	r3, [r3, #4]
 8004402:	f023 0203 	bic.w	r2, r3, #3
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	685b      	ldr	r3, [r3, #4]
 800440a:	491a      	ldr	r1, [pc, #104]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 800440c:	4313      	orrs	r3, r2
 800440e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004410:	f7fd f8d0 	bl	80015b4 <HAL_GetTick>
 8004414:	6778      	str	r0, [r7, #116]	@ 0x74
    
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004416:	e00a      	b.n	800442e <HAL_RCC_ClockConfig+0x21a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004418:	f7fd f8cc 	bl	80015b4 <HAL_GetTick>
 800441c:	4602      	mov	r2, r0
 800441e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004420:	1ad3      	subs	r3, r2, r3
 8004422:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004426:	4293      	cmp	r3, r2
 8004428:	d901      	bls.n	800442e <HAL_RCC_ClockConfig+0x21a>
      {
        return HAL_TIMEOUT;
 800442a:	2303      	movs	r3, #3
 800442c:	e061      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2de>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800442e:	4b11      	ldr	r3, [pc, #68]	@ (8004474 <HAL_RCC_ClockConfig+0x260>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	f003 020c 	and.w	r2, r3, #12
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	009b      	lsls	r3, r3, #2
 800443c:	429a      	cmp	r2, r3
 800443e:	d1eb      	bne.n	8004418 <HAL_RCC_ClockConfig+0x204>
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004440:	4b0b      	ldr	r3, [pc, #44]	@ (8004470 <HAL_RCC_ClockConfig+0x25c>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	f003 0307 	and.w	r3, r3, #7
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	429a      	cmp	r2, r3
 800444c:	d214      	bcs.n	8004478 <HAL_RCC_ClockConfig+0x264>
  {    
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800444e:	4b08      	ldr	r3, [pc, #32]	@ (8004470 <HAL_RCC_ClockConfig+0x25c>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f023 0207 	bic.w	r2, r3, #7
 8004456:	4906      	ldr	r1, [pc, #24]	@ (8004470 <HAL_RCC_ClockConfig+0x25c>)
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	4313      	orrs	r3, r2
 800445c:	600b      	str	r3, [r1, #0]
    
    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800445e:	4b04      	ldr	r3, [pc, #16]	@ (8004470 <HAL_RCC_ClockConfig+0x25c>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0307 	and.w	r3, r3, #7
 8004466:	683a      	ldr	r2, [r7, #0]
 8004468:	429a      	cmp	r2, r3
 800446a:	d005      	beq.n	8004478 <HAL_RCC_ClockConfig+0x264>
    {
      return HAL_ERROR;
 800446c:	2301      	movs	r3, #1
 800446e:	e040      	b.n	80044f2 <HAL_RCC_ClockConfig+0x2de>
 8004470:	40022000 	.word	0x40022000
 8004474:	40021000 	.word	0x40021000
    }
  }    

  /*-------------------------- PCLK1 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	f003 0304 	and.w	r3, r3, #4
 8004480:	2b00      	cmp	r3, #0
 8004482:	d008      	beq.n	8004496 <HAL_RCC_ClockConfig+0x282>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004484:	4b1d      	ldr	r3, [pc, #116]	@ (80044fc <HAL_RCC_ClockConfig+0x2e8>)
 8004486:	685b      	ldr	r3, [r3, #4]
 8004488:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	491a      	ldr	r1, [pc, #104]	@ (80044fc <HAL_RCC_ClockConfig+0x2e8>)
 8004492:	4313      	orrs	r3, r2
 8004494:	604b      	str	r3, [r1, #4]
  }
  
  /*-------------------------- PCLK2 Configuration ---------------------------*/ 
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	f003 0308 	and.w	r3, r3, #8
 800449e:	2b00      	cmp	r3, #0
 80044a0:	d009      	beq.n	80044b6 <HAL_RCC_ClockConfig+0x2a2>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80044a2:	4b16      	ldr	r3, [pc, #88]	@ (80044fc <HAL_RCC_ClockConfig+0x2e8>)
 80044a4:	685b      	ldr	r3, [r3, #4]
 80044a6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	691b      	ldr	r3, [r3, #16]
 80044ae:	00db      	lsls	r3, r3, #3
 80044b0:	4912      	ldr	r1, [pc, #72]	@ (80044fc <HAL_RCC_ClockConfig+0x2e8>)
 80044b2:	4313      	orrs	r3, r2
 80044b4:	604b      	str	r3, [r1, #4]
  }
 
  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_BITNUMBER];
 80044b6:	f000 f829 	bl	800450c <HAL_RCC_GetSysClockFreq>
 80044ba:	4601      	mov	r1, r0
 80044bc:	4b0f      	ldr	r3, [pc, #60]	@ (80044fc <HAL_RCC_ClockConfig+0x2e8>)
 80044be:	685b      	ldr	r3, [r3, #4]
 80044c0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044c4:	22f0      	movs	r2, #240	@ 0xf0
 80044c6:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80044c8:	693a      	ldr	r2, [r7, #16]
 80044ca:	fa92 f2a2 	rbit	r2, r2
 80044ce:	60fa      	str	r2, [r7, #12]
  return result;
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	fab2 f282 	clz	r2, r2
 80044d6:	b2d2      	uxtb	r2, r2
 80044d8:	40d3      	lsrs	r3, r2
 80044da:	4a09      	ldr	r2, [pc, #36]	@ (8004500 <HAL_RCC_ClockConfig+0x2ec>)
 80044dc:	5cd3      	ldrb	r3, [r2, r3]
 80044de:	fa21 f303 	lsr.w	r3, r1, r3
 80044e2:	4a08      	ldr	r2, [pc, #32]	@ (8004504 <HAL_RCC_ClockConfig+0x2f0>)
 80044e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick (uwTickPrio);
 80044e6:	4b08      	ldr	r3, [pc, #32]	@ (8004508 <HAL_RCC_ClockConfig+0x2f4>)
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	4618      	mov	r0, r3
 80044ec:	f7fd f81e 	bl	800152c <HAL_InitTick>
  
  return HAL_OK;
 80044f0:	2300      	movs	r3, #0
}
 80044f2:	4618      	mov	r0, r3
 80044f4:	3778      	adds	r7, #120	@ 0x78
 80044f6:	46bd      	mov	sp, r7
 80044f8:	bd80      	pop	{r7, pc}
 80044fa:	bf00      	nop
 80044fc:	40021000 	.word	0x40021000
 8004500:	08007d98 	.word	0x08007d98
 8004504:	20000000 	.word	0x20000000
 8004508:	20000004 	.word	0x20000004

0800450c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *         
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004512:	2300      	movs	r3, #0
 8004514:	60fb      	str	r3, [r7, #12]
 8004516:	2300      	movs	r3, #0
 8004518:	60bb      	str	r3, [r7, #8]
 800451a:	2300      	movs	r3, #0
 800451c:	617b      	str	r3, [r7, #20]
 800451e:	2300      	movs	r3, #0
 8004520:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004522:	2300      	movs	r3, #0
 8004524:	613b      	str	r3, [r7, #16]
  
  tmpreg = RCC->CFGR;
 8004526:	4b1f      	ldr	r3, [pc, #124]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	60fb      	str	r3, [r7, #12]
  
  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	f003 030c 	and.w	r3, r3, #12
 8004532:	2b04      	cmp	r3, #4
 8004534:	d002      	beq.n	800453c <HAL_RCC_GetSysClockFreq+0x30>
 8004536:	2b08      	cmp	r3, #8
 8004538:	d003      	beq.n	8004542 <HAL_RCC_GetSysClockFreq+0x36>
 800453a:	e029      	b.n	8004590 <HAL_RCC_GetSysClockFreq+0x84>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 800453c:	4b1a      	ldr	r3, [pc, #104]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800453e:	613b      	str	r3, [r7, #16]
      break;
 8004540:	e029      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8004542:	68fb      	ldr	r3, [r7, #12]
 8004544:	0c9b      	lsrs	r3, r3, #18
 8004546:	f003 030f 	and.w	r3, r3, #15
 800454a:	4a18      	ldr	r2, [pc, #96]	@ (80045ac <HAL_RCC_GetSysClockFreq+0xa0>)
 800454c:	5cd3      	ldrb	r3, [r2, r3]
 800454e:	607b      	str	r3, [r7, #4]
      prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV) >> RCC_CFGR2_PREDIV_Pos];
 8004550:	4b14      	ldr	r3, [pc, #80]	@ (80045a4 <HAL_RCC_GetSysClockFreq+0x98>)
 8004552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004554:	f003 030f 	and.w	r3, r3, #15
 8004558:	4a15      	ldr	r2, [pc, #84]	@ (80045b0 <HAL_RCC_GetSysClockFreq+0xa4>)
 800455a:	5cd3      	ldrb	r3, [r2, r3]
 800455c:	60bb      	str	r3, [r7, #8]
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((uint64_t) (HSI_VALUE >> 1U) * ((uint64_t) pllmul));
      }
#else
      if ((tmpreg & RCC_CFGR_PLLSRC_HSE_PREDIV) == RCC_CFGR_PLLSRC_HSE_PREDIV)
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004564:	2b00      	cmp	r3, #0
 8004566:	d008      	beq.n	800457a <HAL_RCC_GetSysClockFreq+0x6e>
      {
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSE_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 8004568:	4a0f      	ldr	r2, [pc, #60]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800456a:	68bb      	ldr	r3, [r7, #8]
 800456c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	fb02 f303 	mul.w	r3, r2, r3
 8004576:	617b      	str	r3, [r7, #20]
 8004578:	e007      	b.n	800458a <HAL_RCC_GetSysClockFreq+0x7e>
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/PREDIV * PLLMUL */
        pllclk = (uint32_t)((uint64_t) HSI_VALUE / (uint64_t) (prediv)) * ((uint64_t) pllmul);
 800457a:	4a0b      	ldr	r2, [pc, #44]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	fbb2 f2f3 	udiv	r2, r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	fb02 f303 	mul.w	r3, r2, r3
 8004588:	617b      	str	r3, [r7, #20]
      }
#endif /* RCC_CFGR_PLLSRC_HSI_DIV2 */
      sysclockfreq = pllclk;
 800458a:	697b      	ldr	r3, [r7, #20]
 800458c:	613b      	str	r3, [r7, #16]
      break;
 800458e:	e002      	b.n	8004596 <HAL_RCC_GetSysClockFreq+0x8a>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004590:	4b05      	ldr	r3, [pc, #20]	@ (80045a8 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004592:	613b      	str	r3, [r7, #16]
      break;
 8004594:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004596:	693b      	ldr	r3, [r7, #16]
}
 8004598:	4618      	mov	r0, r3
 800459a:	371c      	adds	r7, #28
 800459c:	46bd      	mov	sp, r7
 800459e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a2:	4770      	bx	lr
 80045a4:	40021000 	.word	0x40021000
 80045a8:	007a1200 	.word	0x007a1200
 80045ac:	08007db0 	.word	0x08007db0
 80045b0:	08007dc0 	.word	0x08007dc0

080045b4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency 
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80045b4:	b480      	push	{r7}
 80045b6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80045b8:	4b03      	ldr	r3, [pc, #12]	@ (80045c8 <HAL_RCC_GetHCLKFreq+0x14>)
 80045ba:	681b      	ldr	r3, [r3, #0]
}
 80045bc:	4618      	mov	r0, r3
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	20000000 	.word	0x20000000

080045cc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80045cc:	b580      	push	{r7, lr}
 80045ce:	b082      	sub	sp, #8
 80045d0:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_BITNUMBER]);
 80045d2:	f7ff ffef 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 80045d6:	4601      	mov	r1, r0
 80045d8:	4b0b      	ldr	r3, [pc, #44]	@ (8004608 <HAL_RCC_GetPCLK1Freq+0x3c>)
 80045da:	685b      	ldr	r3, [r3, #4]
 80045dc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80045e0:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80045e4:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80045e6:	687a      	ldr	r2, [r7, #4]
 80045e8:	fa92 f2a2 	rbit	r2, r2
 80045ec:	603a      	str	r2, [r7, #0]
  return result;
 80045ee:	683a      	ldr	r2, [r7, #0]
 80045f0:	fab2 f282 	clz	r2, r2
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	40d3      	lsrs	r3, r2
 80045f8:	4a04      	ldr	r2, [pc, #16]	@ (800460c <HAL_RCC_GetPCLK1Freq+0x40>)
 80045fa:	5cd3      	ldrb	r3, [r2, r3]
 80045fc:	fa21 f303 	lsr.w	r3, r1, r3
}    
 8004600:	4618      	mov	r0, r3
 8004602:	3708      	adds	r7, #8
 8004604:	46bd      	mov	sp, r7
 8004606:	bd80      	pop	{r7, pc}
 8004608:	40021000 	.word	0x40021000
 800460c:	08007da8 	.word	0x08007da8

08004610 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004610:	b580      	push	{r7, lr}
 8004612:	b082      	sub	sp, #8
 8004614:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_BITNUMBER]);
 8004616:	f7ff ffcd 	bl	80045b4 <HAL_RCC_GetHCLKFreq>
 800461a:	4601      	mov	r1, r0
 800461c:	4b0b      	ldr	r3, [pc, #44]	@ (800464c <HAL_RCC_GetPCLK2Freq+0x3c>)
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	f403 5360 	and.w	r3, r3, #14336	@ 0x3800
 8004624:	f44f 5260 	mov.w	r2, #14336	@ 0x3800
 8004628:	607a      	str	r2, [r7, #4]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800462a:	687a      	ldr	r2, [r7, #4]
 800462c:	fa92 f2a2 	rbit	r2, r2
 8004630:	603a      	str	r2, [r7, #0]
  return result;
 8004632:	683a      	ldr	r2, [r7, #0]
 8004634:	fab2 f282 	clz	r2, r2
 8004638:	b2d2      	uxtb	r2, r2
 800463a:	40d3      	lsrs	r3, r2
 800463c:	4a04      	ldr	r2, [pc, #16]	@ (8004650 <HAL_RCC_GetPCLK2Freq+0x40>)
 800463e:	5cd3      	ldrb	r3, [r2, r3]
 8004640:	fa21 f303 	lsr.w	r3, r1, r3
} 
 8004644:	4618      	mov	r0, r3
 8004646:	3708      	adds	r7, #8
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}
 800464c:	40021000 	.word	0x40021000
 8004650:	08007da8 	.word	0x08007da8

08004654 <HAL_RCCEx_PeriphCLKConfig>:
  *         When the TIMx clock source is PLL clock, so the TIMx clock is PLL clock x 2.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b092      	sub	sp, #72	@ 0x48
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800465c:	2300      	movs	r3, #0
 800465e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t temp_reg = 0U;
 8004660:	2300      	movs	r3, #0
 8004662:	63fb      	str	r3, [r7, #60]	@ 0x3c
  FlagStatus       pwrclkchanged = RESET;
 8004664:	2300      	movs	r3, #0
 8004666:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    
  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
  
  /*---------------------------- RTC configuration -------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004672:	2b00      	cmp	r3, #0
 8004674:	f000 80d4 	beq.w	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>


    /* As soon as function is called to change RTC clock source, activation of the 
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004678:	4b4e      	ldr	r3, [pc, #312]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800467a:	69db      	ldr	r3, [r3, #28]
 800467c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004680:	2b00      	cmp	r3, #0
 8004682:	d10e      	bne.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004684:	4b4b      	ldr	r3, [pc, #300]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004686:	69db      	ldr	r3, [r3, #28]
 8004688:	4a4a      	ldr	r2, [pc, #296]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800468a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800468e:	61d3      	str	r3, [r2, #28]
 8004690:	4b48      	ldr	r3, [pc, #288]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004692:	69db      	ldr	r3, [r3, #28]
 8004694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004698:	60bb      	str	r3, [r7, #8]
 800469a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800469c:	2301      	movs	r3, #1
 800469e:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
    }
    
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046a2:	4b45      	ldr	r3, [pc, #276]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d118      	bne.n	80046e0 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80046ae:	4b42      	ldr	r3, [pc, #264]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a41      	ldr	r2, [pc, #260]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80046b8:	6013      	str	r3, [r2, #0]
      
      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80046ba:	f7fc ff7b 	bl	80015b4 <HAL_GetTick>
 80046be:	6438      	str	r0, [r7, #64]	@ 0x40
      
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046c0:	e008      	b.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
          if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80046c2:	f7fc ff77 	bl	80015b4 <HAL_GetTick>
 80046c6:	4602      	mov	r2, r0
 80046c8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80046ca:	1ad3      	subs	r3, r2, r3
 80046cc:	2b64      	cmp	r3, #100	@ 0x64
 80046ce:	d901      	bls.n	80046d4 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	e1d6      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80046d4:	4b38      	ldr	r3, [pc, #224]	@ (80047b8 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d0f0      	beq.n	80046c2 <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }
    
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */ 
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80046e0:	4b34      	ldr	r3, [pc, #208]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80046e2:	6a1b      	ldr	r3, [r3, #32]
 80046e4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    if((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80046ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	f000 8084 	beq.w	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	685b      	ldr	r3, [r3, #4]
 80046f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80046fa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80046fc:	429a      	cmp	r2, r3
 80046fe:	d07c      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004700:	4b2c      	ldr	r3, [pc, #176]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004702:	6a1b      	ldr	r3, [r3, #32]
 8004704:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004708:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800470a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 800470e:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004712:	fa93 f3a3 	rbit	r3, r3
 8004716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return result;
 8004718:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800471a:	fab3 f383 	clz	r3, r3
 800471e:	b2db      	uxtb	r3, r3
 8004720:	461a      	mov	r2, r3
 8004722:	4b26      	ldr	r3, [pc, #152]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004724:	4413      	add	r3, r2
 8004726:	009b      	lsls	r3, r3, #2
 8004728:	461a      	mov	r2, r3
 800472a:	2301      	movs	r3, #1
 800472c:	6013      	str	r3, [r2, #0]
 800472e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004732:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004736:	fa93 f3a3 	rbit	r3, r3
 800473a:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800473c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
      __HAL_RCC_BACKUPRESET_RELEASE();
 800473e:	fab3 f383 	clz	r3, r3
 8004742:	b2db      	uxtb	r3, r3
 8004744:	461a      	mov	r2, r3
 8004746:	4b1d      	ldr	r3, [pc, #116]	@ (80047bc <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004748:	4413      	add	r3, r2
 800474a:	009b      	lsls	r3, r3, #2
 800474c:	461a      	mov	r2, r3
 800474e:	2300      	movs	r3, #0
 8004750:	6013      	str	r3, [r2, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004752:	4a18      	ldr	r2, [pc, #96]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004754:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004756:	6213      	str	r3, [r2, #32]
    
      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004758:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800475a:	f003 0301 	and.w	r3, r3, #1
 800475e:	2b00      	cmp	r3, #0
 8004760:	d04b      	beq.n	80047fa <HAL_RCCEx_PeriphCLKConfig+0x1a6>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004762:	f7fc ff27 	bl	80015b4 <HAL_GetTick>
 8004766:	6438      	str	r0, [r7, #64]	@ 0x40
        
        /* Wait till LSE is ready */  
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004768:	e00a      	b.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
        {
            if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800476a:	f7fc ff23 	bl	80015b4 <HAL_GetTick>
 800476e:	4602      	mov	r2, r0
 8004770:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8004772:	1ad3      	subs	r3, r2, r3
 8004774:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004778:	4293      	cmp	r3, r2
 800477a:	d901      	bls.n	8004780 <HAL_RCCEx_PeriphCLKConfig+0x12c>
          {
            return HAL_TIMEOUT;
 800477c:	2303      	movs	r3, #3
 800477e:	e180      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x42e>
 8004780:	2302      	movs	r3, #2
 8004782:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8004784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004786:	fa93 f3a3 	rbit	r3, r3
 800478a:	627b      	str	r3, [r7, #36]	@ 0x24
 800478c:	2302      	movs	r3, #2
 800478e:	623b      	str	r3, [r7, #32]
 8004790:	6a3b      	ldr	r3, [r7, #32]
 8004792:	fa93 f3a3 	rbit	r3, r3
 8004796:	61fb      	str	r3, [r7, #28]
  return result;
 8004798:	69fb      	ldr	r3, [r7, #28]
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800479a:	fab3 f383 	clz	r3, r3
 800479e:	b2db      	uxtb	r3, r3
 80047a0:	095b      	lsrs	r3, r3, #5
 80047a2:	b2db      	uxtb	r3, r3
 80047a4:	f043 0302 	orr.w	r3, r3, #2
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d108      	bne.n	80047c0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80047ae:	4b01      	ldr	r3, [pc, #4]	@ (80047b4 <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	e00d      	b.n	80047d0 <HAL_RCCEx_PeriphCLKConfig+0x17c>
 80047b4:	40021000 	.word	0x40021000
 80047b8:	40007000 	.word	0x40007000
 80047bc:	10908100 	.word	0x10908100
 80047c0:	2302      	movs	r3, #2
 80047c2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80047c4:	69bb      	ldr	r3, [r7, #24]
 80047c6:	fa93 f3a3 	rbit	r3, r3
 80047ca:	617b      	str	r3, [r7, #20]
 80047cc:	4b9a      	ldr	r3, [pc, #616]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80047d0:	2202      	movs	r2, #2
 80047d2:	613a      	str	r2, [r7, #16]
 80047d4:	693a      	ldr	r2, [r7, #16]
 80047d6:	fa92 f2a2 	rbit	r2, r2
 80047da:	60fa      	str	r2, [r7, #12]
  return result;
 80047dc:	68fa      	ldr	r2, [r7, #12]
 80047de:	fab2 f282 	clz	r2, r2
 80047e2:	b2d2      	uxtb	r2, r2
 80047e4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80047e8:	b2d2      	uxtb	r2, r2
 80047ea:	f002 021f 	and.w	r2, r2, #31
 80047ee:	2101      	movs	r1, #1
 80047f0:	fa01 f202 	lsl.w	r2, r1, r2
 80047f4:	4013      	ands	r3, r2
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d0b7      	beq.n	800476a <HAL_RCCEx_PeriphCLKConfig+0x116>
          }      
        }  
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection); 
 80047fa:	4b8f      	ldr	r3, [pc, #572]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80047fc:	6a1b      	ldr	r3, [r3, #32]
 80047fe:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	498c      	ldr	r1, [pc, #560]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004808:	4313      	orrs	r3, r2
 800480a:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 800480c:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8004810:	2b01      	cmp	r3, #1
 8004812:	d105      	bne.n	8004820 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004814:	4b88      	ldr	r3, [pc, #544]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004816:	69db      	ldr	r3, [r3, #28]
 8004818:	4a87      	ldr	r2, [pc, #540]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800481a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800481e:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	f003 0301 	and.w	r3, r3, #1
 8004828:	2b00      	cmp	r3, #0
 800482a:	d008      	beq.n	800483e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
    
    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800482c:	4b82      	ldr	r3, [pc, #520]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800482e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004830:	f023 0203 	bic.w	r2, r3, #3
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	689b      	ldr	r3, [r3, #8]
 8004838:	497f      	ldr	r1, [pc, #508]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800483a:	4313      	orrs	r3, r2
 800483c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

#if defined(RCC_CFGR3_USART2SW)
  /*----------------------------- USART2 Configuration --------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0302 	and.w	r3, r3, #2
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <HAL_RCCEx_PeriphCLKConfig+0x208>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
    
    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800484a:	4b7b      	ldr	r3, [pc, #492]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800484c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800484e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	68db      	ldr	r3, [r3, #12]
 8004856:	4978      	ldr	r1, [pc, #480]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004858:	4313      	orrs	r3, r2
 800485a:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART2SW */

#if defined(RCC_CFGR3_USART3SW)
  /*------------------------------ USART3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d008      	beq.n	800487a <HAL_RCCEx_PeriphCLKConfig+0x226>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
    
    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004868:	4b73      	ldr	r3, [pc, #460]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800486a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800486c:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	691b      	ldr	r3, [r3, #16]
 8004874:	4970      	ldr	r1, [pc, #448]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004876:	4313      	orrs	r3, r2
 8004878:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* RCC_CFGR3_USART3SW */

  /*------------------------------ I2C1 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f003 0320 	and.w	r3, r3, #32
 8004882:	2b00      	cmp	r3, #0
 8004884:	d008      	beq.n	8004898 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
    
    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004886:	4b6c      	ldr	r3, [pc, #432]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004888:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800488a:	f023 0210 	bic.w	r2, r3, #16
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	69db      	ldr	r3, [r3, #28]
 8004892:	4969      	ldr	r1, [pc, #420]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004894:	4313      	orrs	r3, r2
 8004896:	630b      	str	r3, [r1, #48]	@ 0x30
#if defined(STM32F302xE) || defined(STM32F303xE)\
 || defined(STM32F302xC) || defined(STM32F303xC)\
 || defined(STM32F302x8)                        \
 || defined(STM32F373xC)
  /*------------------------------ USB Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d008      	beq.n	80048b6 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->USBClockSelection));
    
    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->USBClockSelection);
 80048a4:	4b64      	ldr	r3, [pc, #400]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048b0:	4961      	ldr	r1, [pc, #388]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048b2:	4313      	orrs	r3, r2
 80048b4:	604b      	str	r3, [r1, #4]
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)\
 || defined(STM32F373xC) || defined(STM32F378xx)

  /*------------------------------ I2C2 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80048be:	2b00      	cmp	r3, #0
 80048c0:	d008      	beq.n	80048d4 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
    
    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80048c2:	4b5d      	ldr	r3, [pc, #372]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048c6:	f023 0220 	bic.w	r2, r3, #32
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6a1b      	ldr	r3, [r3, #32]
 80048ce:	495a      	ldr	r1, [pc, #360]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048d0:	4313      	orrs	r3, r2
 80048d2:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ I2C3 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d008      	beq.n	80048f2 <HAL_RCCEx_PeriphCLKConfig+0x29e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
    
    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80048e0:	4b55      	ldr	r3, [pc, #340]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048e4:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048ec:	4952      	ldr	r1, [pc, #328]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80048ee:	4313      	orrs	r3, r2
 80048f0:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ UART4 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f003 0308 	and.w	r3, r3, #8
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d008      	beq.n	8004910 <HAL_RCCEx_PeriphCLKConfig+0x2bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
    
    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80048fe:	4b4e      	ldr	r3, [pc, #312]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004900:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004902:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	695b      	ldr	r3, [r3, #20]
 800490a:	494b      	ldr	r1, [pc, #300]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800490c:	4313      	orrs	r3, r2
 800490e:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ UART5 Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f003 0310 	and.w	r3, r3, #16
 8004918:	2b00      	cmp	r3, #0
 800491a:	d008      	beq.n	800492e <HAL_RCCEx_PeriphCLKConfig+0x2da>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));
    
    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800491c:	4b46      	ldr	r3, [pc, #280]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800491e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004920:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	699b      	ldr	r3, [r3, #24]
 8004928:	4943      	ldr	r1, [pc, #268]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800492a:	4313      	orrs	r3, r2
 800492c:	630b      	str	r3, [r1, #48]	@ 0x30

#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)
  /*------------------------------ I2S Configuration ------------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004936:	2b00      	cmp	r3, #0
 8004938:	d008      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x2f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
    
    /* Configure the I2S clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800493a:	4b3f      	ldr	r3, [pc, #252]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	f423 0200 	bic.w	r2, r3, #8388608	@ 0x800000
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004946:	493c      	ldr	r1, [pc, #240]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004948:	4313      	orrs	r3, r2
 800494a:	604b      	str	r3, [r1, #4]
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)
      
  /*------------------------------ ADC1 & ADC2 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004954:	2b00      	cmp	r3, #0
 8004956:	d008      	beq.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12PLLCLK_DIV(PeriphClkInit->Adc12ClockSelection));
    
    /* Configure the ADC12 clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004958:	4b37      	ldr	r3, [pc, #220]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 800495a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800495c:	f423 72f8 	bic.w	r2, r3, #496	@ 0x1f0
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004964:	4934      	ldr	r1, [pc, #208]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004966:	4313      	orrs	r3, r2
 8004968:	62cb      	str	r3, [r1, #44]	@ 0x2c
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ ADC3 & ADC4 clock Configuration -------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC34) == RCC_PERIPHCLK_ADC34)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004972:	2b00      	cmp	r3, #0
 8004974:	d008      	beq.n	8004988 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC34PLLCLK_DIV(PeriphClkInit->Adc34ClockSelection));
    
    /* Configure the ADC34 clock source */
    __HAL_RCC_ADC34_CONFIG(PeriphClkInit->Adc34ClockSelection);
 8004976:	4b30      	ldr	r3, [pc, #192]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004978:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800497a:	f423 5278 	bic.w	r2, r3, #15872	@ 0x3e00
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004982:	492d      	ldr	r1, [pc, #180]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004984:	4313      	orrs	r3, r2
 8004986:	62cb      	str	r3, [r1, #44]	@ 0x2c
 || defined(STM32F302xC) || defined(STM32F303xC) || defined(STM32F358xx)\
 || defined(STM32F303x8) || defined(STM32F334x8) || defined(STM32F328xx)\
 || defined(STM32F301x8) || defined(STM32F302x8) || defined(STM32F318xx)

  /*------------------------------ TIM1 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004990:	2b00      	cmp	r3, #0
 8004992:	d008      	beq.n	80049a6 <HAL_RCCEx_PeriphCLKConfig+0x352>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));
    
    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8004994:	4b28      	ldr	r3, [pc, #160]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004998:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80049a0:	4925      	ldr	r1, [pc, #148]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	630b      	str	r3, [r1, #48]	@ 0x30
  
#if defined(STM32F303xE) || defined(STM32F398xx)\
 || defined(STM32F303xC) || defined(STM32F358xx)

  /*------------------------------ TIM8 clock Configuration ----------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM8) == RCC_PERIPHCLK_TIM8)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d008      	beq.n	80049c4 <HAL_RCCEx_PeriphCLKConfig+0x370>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM8CLKSOURCE(PeriphClkInit->Tim8ClockSelection));
    
    /* Configure the TIM8 clock source */
    __HAL_RCC_TIM8_CONFIG(PeriphClkInit->Tim8ClockSelection);
 80049b2:	4b21      	ldr	r3, [pc, #132]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049b6:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049be:	491e      	ldr	r1, [pc, #120]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049c0:	4313      	orrs	r3, r2
 80049c2:	630b      	str	r3, [r1, #48]	@ 0x30
#endif /* STM32F373xC || STM32F378xx */
  
#if defined(STM32F302xE) || defined(STM32F303xE) || defined(STM32F398xx)
  
  /*------------------------------ TIM2 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM2) == RCC_PERIPHCLK_TIM2)
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d008      	beq.n	80049e2 <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM2CLKSOURCE(PeriphClkInit->Tim2ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM2_CONFIG(PeriphClkInit->Tim2ClockSelection);
 80049d0:	4b19      	ldr	r3, [pc, #100]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049d4:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80049dc:	4916      	ldr	r1, [pc, #88]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049de:	4313      	orrs	r3, r2
 80049e0:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM3 clock Configuration -------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM34) == RCC_PERIPHCLK_TIM34)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d008      	beq.n	8004a00 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM3CLKSOURCE(PeriphClkInit->Tim34ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM34_CONFIG(PeriphClkInit->Tim34ClockSelection);
 80049ee:	4b12      	ldr	r3, [pc, #72]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80049f2:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fa:	490f      	ldr	r1, [pc, #60]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 80049fc:	4313      	orrs	r3, r2
 80049fe:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM15 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d008      	beq.n	8004a1e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8004a0c:	4b0a      	ldr	r3, [pc, #40]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a10:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004a18:	4907      	ldr	r1, [pc, #28]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a1a:	4313      	orrs	r3, r2
 8004a1c:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM16 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM16) == RCC_PERIPHCLK_TIM16)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d00c      	beq.n	8004a44 <HAL_RCCEx_PeriphCLKConfig+0x3f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM16CLKSOURCE(PeriphClkInit->Tim16ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM16_CONFIG(PeriphClkInit->Tim16ClockSelection);
 8004a2a:	4b03      	ldr	r3, [pc, #12]	@ (8004a38 <HAL_RCCEx_PeriphCLKConfig+0x3e4>)
 8004a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a2e:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	e002      	b.n	8004a3c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8004a36:	bf00      	nop
 8004a38:	40021000 	.word	0x40021000
 8004a3c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004a3e:	4913      	ldr	r1, [pc, #76]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a40:	4313      	orrs	r3, r2
 8004a42:	630b      	str	r3, [r1, #48]	@ 0x30
  }

  /*------------------------------ TIM17 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM17) == RCC_PERIPHCLK_TIM17)
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d008      	beq.n	8004a62 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM17CLKSOURCE(PeriphClkInit->Tim17ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM17_CONFIG(PeriphClkInit->Tim17ClockSelection);
 8004a50:	4b0e      	ldr	r3, [pc, #56]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a52:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a54:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004a5c:	490b      	ldr	r1, [pc, #44]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a5e:	4313      	orrs	r3, r2
 8004a60:	630b      	str	r3, [r1, #48]	@ 0x30

#endif /* STM32F302xE || STM32F303xE || STM32F398xx */  

#if defined(STM32F303xE) || defined(STM32F398xx)
  /*------------------------------ TIM20 clock Configuration ------------------*/ 
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM20) == RCC_PERIPHCLK_TIM20)
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d008      	beq.n	8004a80 <HAL_RCCEx_PeriphCLKConfig+0x42c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM20CLKSOURCE(PeriphClkInit->Tim20ClockSelection));
    
    /* Configure the CEC clock source */
    __HAL_RCC_TIM20_CONFIG(PeriphClkInit->Tim20ClockSelection);
 8004a6e:	4b07      	ldr	r3, [pc, #28]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a72:	f423 4200 	bic.w	r2, r3, #32768	@ 0x8000
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a7a:	4904      	ldr	r1, [pc, #16]	@ (8004a8c <HAL_RCCEx_PeriphCLKConfig+0x438>)
 8004a7c:	4313      	orrs	r3, r2
 8004a7e:	630b      	str	r3, [r1, #48]	@ 0x30
  }
#endif /* STM32F303xE || STM32F398xx */  

  
  return HAL_OK;
 8004a80:	2300      	movs	r3, #0
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3748      	adds	r7, #72	@ 0x48
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
 8004a8a:	bf00      	nop
 8004a8c:	40021000 	.word	0x40021000

08004a90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b082      	sub	sp, #8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d101      	bne.n	8004aa2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004a9e:	2301      	movs	r3, #1
 8004aa0:	e040      	b.n	8004b24 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d106      	bne.n	8004ab8 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	2200      	movs	r2, #0
 8004aae:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ab2:	6878      	ldr	r0, [r7, #4]
 8004ab4:	f7fc fba2 	bl	80011fc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	2224      	movs	r2, #36	@ 0x24
 8004abc:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	681a      	ldr	r2, [r3, #0]
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f022 0201 	bic.w	r2, r2, #1
 8004acc:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d002      	beq.n	8004adc <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 8004ad6:	6878      	ldr	r0, [r7, #4]
 8004ad8:	f000 fa86 	bl	8004fe8 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004adc:	6878      	ldr	r0, [r7, #4]
 8004ade:	f000 f8af 	bl	8004c40 <UART_SetConfig>
 8004ae2:	4603      	mov	r3, r0
 8004ae4:	2b01      	cmp	r3, #1
 8004ae6:	d101      	bne.n	8004aec <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 8004ae8:	2301      	movs	r3, #1
 8004aea:	e01b      	b.n	8004b24 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	685a      	ldr	r2, [r3, #4]
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004afa:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	689a      	ldr	r2, [r3, #8]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b0a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004b1c:	6878      	ldr	r0, [r7, #4]
 8004b1e:	f000 fb05 	bl	800512c <UART_CheckIdleState>
 8004b22:	4603      	mov	r3, r0
}
 8004b24:	4618      	mov	r0, r3
 8004b26:	3708      	adds	r7, #8
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	bd80      	pop	{r7, pc}

08004b2c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b08a      	sub	sp, #40	@ 0x28
 8004b30:	af02      	add	r7, sp, #8
 8004b32:	60f8      	str	r0, [r7, #12]
 8004b34:	60b9      	str	r1, [r7, #8]
 8004b36:	603b      	str	r3, [r7, #0]
 8004b38:	4613      	mov	r3, r2
 8004b3a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8004b40:	2b20      	cmp	r3, #32
 8004b42:	d177      	bne.n	8004c34 <HAL_UART_Transmit+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b44:	68bb      	ldr	r3, [r7, #8]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_UART_Transmit+0x24>
 8004b4a:	88fb      	ldrh	r3, [r7, #6]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d101      	bne.n	8004b54 <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8004b50:	2301      	movs	r3, #1
 8004b52:	e070      	b.n	8004c36 <HAL_UART_Transmit+0x10a>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	2200      	movs	r2, #0
 8004b58:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	2221      	movs	r2, #33	@ 0x21
 8004b60:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b62:	f7fc fd27 	bl	80015b4 <HAL_GetTick>
 8004b66:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	88fa      	ldrh	r2, [r7, #6]
 8004b6c:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
    huart->TxXferCount = Size;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	88fa      	ldrh	r2, [r7, #6]
 8004b74:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	689b      	ldr	r3, [r3, #8]
 8004b7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b80:	d108      	bne.n	8004b94 <HAL_UART_Transmit+0x68>
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	691b      	ldr	r3, [r3, #16]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d104      	bne.n	8004b94 <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	61bb      	str	r3, [r7, #24]
 8004b92:	e003      	b.n	8004b9c <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8004b94:	68bb      	ldr	r3, [r7, #8]
 8004b96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004b9c:	e02f      	b.n	8004bfe <HAL_UART_Transmit+0xd2>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	697b      	ldr	r3, [r7, #20]
 8004ba4:	2200      	movs	r2, #0
 8004ba6:	2180      	movs	r1, #128	@ 0x80
 8004ba8:	68f8      	ldr	r0, [r7, #12]
 8004baa:	f000 fb67 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 8004bae:	4603      	mov	r3, r0
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d004      	beq.n	8004bbe <HAL_UART_Transmit+0x92>
      {

        huart->gState = HAL_UART_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e03b      	b.n	8004c36 <HAL_UART_Transmit+0x10a>
      }
      if (pdata8bits == NULL)
 8004bbe:	69fb      	ldr	r3, [r7, #28]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d10b      	bne.n	8004bdc <HAL_UART_Transmit+0xb0>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bc4:	69bb      	ldr	r3, [r7, #24]
 8004bc6:	881a      	ldrh	r2, [r3, #0]
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bd0:	b292      	uxth	r2, r2
 8004bd2:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8004bd4:	69bb      	ldr	r3, [r7, #24]
 8004bd6:	3302      	adds	r3, #2
 8004bd8:	61bb      	str	r3, [r7, #24]
 8004bda:	e007      	b.n	8004bec <HAL_UART_Transmit+0xc0>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bdc:	69fb      	ldr	r3, [r7, #28]
 8004bde:	781a      	ldrb	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	851a      	strh	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004be6:	69fb      	ldr	r3, [r7, #28]
 8004be8:	3301      	adds	r3, #1
 8004bea:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004bf2:	b29b      	uxth	r3, r3
 8004bf4:	3b01      	subs	r3, #1
 8004bf6:	b29a      	uxth	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f8a3 2052 	strh.w	r2, [r3, #82]	@ 0x52
    while (huart->TxXferCount > 0U)
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	f8b3 3052 	ldrh.w	r3, [r3, #82]	@ 0x52
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d1c9      	bne.n	8004b9e <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c0a:	683b      	ldr	r3, [r7, #0]
 8004c0c:	9300      	str	r3, [sp, #0]
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	2200      	movs	r2, #0
 8004c12:	2140      	movs	r1, #64	@ 0x40
 8004c14:	68f8      	ldr	r0, [r7, #12]
 8004c16:	f000 fb31 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 8004c1a:	4603      	mov	r3, r0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d004      	beq.n	8004c2a <HAL_UART_Transmit+0xfe>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2220      	movs	r2, #32
 8004c24:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8004c26:	2303      	movs	r3, #3
 8004c28:	e005      	b.n	8004c36 <HAL_UART_Transmit+0x10a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	2220      	movs	r2, #32
 8004c2e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8004c30:	2300      	movs	r3, #0
 8004c32:	e000      	b.n	8004c36 <HAL_UART_Transmit+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8004c34:	2302      	movs	r3, #2
  }
}
 8004c36:	4618      	mov	r0, r3
 8004c38:	3720      	adds	r7, #32
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	bd80      	pop	{r7, pc}
	...

08004c40 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c40:	b580      	push	{r7, lr}
 8004c42:	b088      	sub	sp, #32
 8004c44:	af00      	add	r7, sp, #0
 8004c46:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689a      	ldr	r2, [r3, #8]
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	431a      	orrs	r2, r3
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	69db      	ldr	r3, [r3, #28]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	681a      	ldr	r2, [r3, #0]
 8004c6a:	4b92      	ldr	r3, [pc, #584]	@ (8004eb4 <UART_SetConfig+0x274>)
 8004c6c:	4013      	ands	r3, r2
 8004c6e:	687a      	ldr	r2, [r7, #4]
 8004c70:	6812      	ldr	r2, [r2, #0]
 8004c72:	6979      	ldr	r1, [r7, #20]
 8004c74:	430b      	orrs	r3, r1
 8004c76:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	68da      	ldr	r2, [r3, #12]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	681b      	ldr	r3, [r3, #0]
 8004c8a:	430a      	orrs	r2, r1
 8004c8c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	699b      	ldr	r3, [r3, #24]
 8004c92:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a1b      	ldr	r3, [r3, #32]
 8004c98:	697a      	ldr	r2, [r7, #20]
 8004c9a:	4313      	orrs	r3, r2
 8004c9c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	689b      	ldr	r3, [r3, #8]
 8004ca4:	f423 6130 	bic.w	r1, r3, #2816	@ 0xb00
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	697a      	ldr	r2, [r7, #20]
 8004cae:	430a      	orrs	r2, r1
 8004cb0:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	4a80      	ldr	r2, [pc, #512]	@ (8004eb8 <UART_SetConfig+0x278>)
 8004cb8:	4293      	cmp	r3, r2
 8004cba:	d120      	bne.n	8004cfe <UART_SetConfig+0xbe>
 8004cbc:	4b7f      	ldr	r3, [pc, #508]	@ (8004ebc <UART_SetConfig+0x27c>)
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004cc0:	f003 0303 	and.w	r3, r3, #3
 8004cc4:	2b03      	cmp	r3, #3
 8004cc6:	d817      	bhi.n	8004cf8 <UART_SetConfig+0xb8>
 8004cc8:	a201      	add	r2, pc, #4	@ (adr r2, 8004cd0 <UART_SetConfig+0x90>)
 8004cca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004cce:	bf00      	nop
 8004cd0:	08004ce1 	.word	0x08004ce1
 8004cd4:	08004ced 	.word	0x08004ced
 8004cd8:	08004cf3 	.word	0x08004cf3
 8004cdc:	08004ce7 	.word	0x08004ce7
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	77fb      	strb	r3, [r7, #31]
 8004ce4:	e0b5      	b.n	8004e52 <UART_SetConfig+0x212>
 8004ce6:	2302      	movs	r3, #2
 8004ce8:	77fb      	strb	r3, [r7, #31]
 8004cea:	e0b2      	b.n	8004e52 <UART_SetConfig+0x212>
 8004cec:	2304      	movs	r3, #4
 8004cee:	77fb      	strb	r3, [r7, #31]
 8004cf0:	e0af      	b.n	8004e52 <UART_SetConfig+0x212>
 8004cf2:	2308      	movs	r3, #8
 8004cf4:	77fb      	strb	r3, [r7, #31]
 8004cf6:	e0ac      	b.n	8004e52 <UART_SetConfig+0x212>
 8004cf8:	2310      	movs	r3, #16
 8004cfa:	77fb      	strb	r3, [r7, #31]
 8004cfc:	e0a9      	b.n	8004e52 <UART_SetConfig+0x212>
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	4a6f      	ldr	r2, [pc, #444]	@ (8004ec0 <UART_SetConfig+0x280>)
 8004d04:	4293      	cmp	r3, r2
 8004d06:	d124      	bne.n	8004d52 <UART_SetConfig+0x112>
 8004d08:	4b6c      	ldr	r3, [pc, #432]	@ (8004ebc <UART_SetConfig+0x27c>)
 8004d0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d0c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004d10:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d14:	d011      	beq.n	8004d3a <UART_SetConfig+0xfa>
 8004d16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8004d1a:	d817      	bhi.n	8004d4c <UART_SetConfig+0x10c>
 8004d1c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d20:	d011      	beq.n	8004d46 <UART_SetConfig+0x106>
 8004d22:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d26:	d811      	bhi.n	8004d4c <UART_SetConfig+0x10c>
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d003      	beq.n	8004d34 <UART_SetConfig+0xf4>
 8004d2c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d30:	d006      	beq.n	8004d40 <UART_SetConfig+0x100>
 8004d32:	e00b      	b.n	8004d4c <UART_SetConfig+0x10c>
 8004d34:	2300      	movs	r3, #0
 8004d36:	77fb      	strb	r3, [r7, #31]
 8004d38:	e08b      	b.n	8004e52 <UART_SetConfig+0x212>
 8004d3a:	2302      	movs	r3, #2
 8004d3c:	77fb      	strb	r3, [r7, #31]
 8004d3e:	e088      	b.n	8004e52 <UART_SetConfig+0x212>
 8004d40:	2304      	movs	r3, #4
 8004d42:	77fb      	strb	r3, [r7, #31]
 8004d44:	e085      	b.n	8004e52 <UART_SetConfig+0x212>
 8004d46:	2308      	movs	r3, #8
 8004d48:	77fb      	strb	r3, [r7, #31]
 8004d4a:	e082      	b.n	8004e52 <UART_SetConfig+0x212>
 8004d4c:	2310      	movs	r3, #16
 8004d4e:	77fb      	strb	r3, [r7, #31]
 8004d50:	e07f      	b.n	8004e52 <UART_SetConfig+0x212>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a5b      	ldr	r2, [pc, #364]	@ (8004ec4 <UART_SetConfig+0x284>)
 8004d58:	4293      	cmp	r3, r2
 8004d5a:	d124      	bne.n	8004da6 <UART_SetConfig+0x166>
 8004d5c:	4b57      	ldr	r3, [pc, #348]	@ (8004ebc <UART_SetConfig+0x27c>)
 8004d5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d60:	f403 2340 	and.w	r3, r3, #786432	@ 0xc0000
 8004d64:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d68:	d011      	beq.n	8004d8e <UART_SetConfig+0x14e>
 8004d6a:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004d6e:	d817      	bhi.n	8004da0 <UART_SetConfig+0x160>
 8004d70:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d74:	d011      	beq.n	8004d9a <UART_SetConfig+0x15a>
 8004d76:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d7a:	d811      	bhi.n	8004da0 <UART_SetConfig+0x160>
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d003      	beq.n	8004d88 <UART_SetConfig+0x148>
 8004d80:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004d84:	d006      	beq.n	8004d94 <UART_SetConfig+0x154>
 8004d86:	e00b      	b.n	8004da0 <UART_SetConfig+0x160>
 8004d88:	2300      	movs	r3, #0
 8004d8a:	77fb      	strb	r3, [r7, #31]
 8004d8c:	e061      	b.n	8004e52 <UART_SetConfig+0x212>
 8004d8e:	2302      	movs	r3, #2
 8004d90:	77fb      	strb	r3, [r7, #31]
 8004d92:	e05e      	b.n	8004e52 <UART_SetConfig+0x212>
 8004d94:	2304      	movs	r3, #4
 8004d96:	77fb      	strb	r3, [r7, #31]
 8004d98:	e05b      	b.n	8004e52 <UART_SetConfig+0x212>
 8004d9a:	2308      	movs	r3, #8
 8004d9c:	77fb      	strb	r3, [r7, #31]
 8004d9e:	e058      	b.n	8004e52 <UART_SetConfig+0x212>
 8004da0:	2310      	movs	r3, #16
 8004da2:	77fb      	strb	r3, [r7, #31]
 8004da4:	e055      	b.n	8004e52 <UART_SetConfig+0x212>
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	4a47      	ldr	r2, [pc, #284]	@ (8004ec8 <UART_SetConfig+0x288>)
 8004dac:	4293      	cmp	r3, r2
 8004dae:	d124      	bne.n	8004dfa <UART_SetConfig+0x1ba>
 8004db0:	4b42      	ldr	r3, [pc, #264]	@ (8004ebc <UART_SetConfig+0x27c>)
 8004db2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004db4:	f403 1340 	and.w	r3, r3, #3145728	@ 0x300000
 8004db8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dbc:	d011      	beq.n	8004de2 <UART_SetConfig+0x1a2>
 8004dbe:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8004dc2:	d817      	bhi.n	8004df4 <UART_SetConfig+0x1b4>
 8004dc4:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dc8:	d011      	beq.n	8004dee <UART_SetConfig+0x1ae>
 8004dca:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8004dce:	d811      	bhi.n	8004df4 <UART_SetConfig+0x1b4>
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d003      	beq.n	8004ddc <UART_SetConfig+0x19c>
 8004dd4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004dd8:	d006      	beq.n	8004de8 <UART_SetConfig+0x1a8>
 8004dda:	e00b      	b.n	8004df4 <UART_SetConfig+0x1b4>
 8004ddc:	2300      	movs	r3, #0
 8004dde:	77fb      	strb	r3, [r7, #31]
 8004de0:	e037      	b.n	8004e52 <UART_SetConfig+0x212>
 8004de2:	2302      	movs	r3, #2
 8004de4:	77fb      	strb	r3, [r7, #31]
 8004de6:	e034      	b.n	8004e52 <UART_SetConfig+0x212>
 8004de8:	2304      	movs	r3, #4
 8004dea:	77fb      	strb	r3, [r7, #31]
 8004dec:	e031      	b.n	8004e52 <UART_SetConfig+0x212>
 8004dee:	2308      	movs	r3, #8
 8004df0:	77fb      	strb	r3, [r7, #31]
 8004df2:	e02e      	b.n	8004e52 <UART_SetConfig+0x212>
 8004df4:	2310      	movs	r3, #16
 8004df6:	77fb      	strb	r3, [r7, #31]
 8004df8:	e02b      	b.n	8004e52 <UART_SetConfig+0x212>
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	4a33      	ldr	r2, [pc, #204]	@ (8004ecc <UART_SetConfig+0x28c>)
 8004e00:	4293      	cmp	r3, r2
 8004e02:	d124      	bne.n	8004e4e <UART_SetConfig+0x20e>
 8004e04:	4b2d      	ldr	r3, [pc, #180]	@ (8004ebc <UART_SetConfig+0x27c>)
 8004e06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e08:	f403 0340 	and.w	r3, r3, #12582912	@ 0xc00000
 8004e0c:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e10:	d011      	beq.n	8004e36 <UART_SetConfig+0x1f6>
 8004e12:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8004e16:	d817      	bhi.n	8004e48 <UART_SetConfig+0x208>
 8004e18:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e1c:	d011      	beq.n	8004e42 <UART_SetConfig+0x202>
 8004e1e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8004e22:	d811      	bhi.n	8004e48 <UART_SetConfig+0x208>
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d003      	beq.n	8004e30 <UART_SetConfig+0x1f0>
 8004e28:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004e2c:	d006      	beq.n	8004e3c <UART_SetConfig+0x1fc>
 8004e2e:	e00b      	b.n	8004e48 <UART_SetConfig+0x208>
 8004e30:	2300      	movs	r3, #0
 8004e32:	77fb      	strb	r3, [r7, #31]
 8004e34:	e00d      	b.n	8004e52 <UART_SetConfig+0x212>
 8004e36:	2302      	movs	r3, #2
 8004e38:	77fb      	strb	r3, [r7, #31]
 8004e3a:	e00a      	b.n	8004e52 <UART_SetConfig+0x212>
 8004e3c:	2304      	movs	r3, #4
 8004e3e:	77fb      	strb	r3, [r7, #31]
 8004e40:	e007      	b.n	8004e52 <UART_SetConfig+0x212>
 8004e42:	2308      	movs	r3, #8
 8004e44:	77fb      	strb	r3, [r7, #31]
 8004e46:	e004      	b.n	8004e52 <UART_SetConfig+0x212>
 8004e48:	2310      	movs	r3, #16
 8004e4a:	77fb      	strb	r3, [r7, #31]
 8004e4c:	e001      	b.n	8004e52 <UART_SetConfig+0x212>
 8004e4e:	2310      	movs	r3, #16
 8004e50:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e5a:	d16b      	bne.n	8004f34 <UART_SetConfig+0x2f4>
  {
    switch (clocksource)
 8004e5c:	7ffb      	ldrb	r3, [r7, #31]
 8004e5e:	2b08      	cmp	r3, #8
 8004e60:	d838      	bhi.n	8004ed4 <UART_SetConfig+0x294>
 8004e62:	a201      	add	r2, pc, #4	@ (adr r2, 8004e68 <UART_SetConfig+0x228>)
 8004e64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e68:	08004e8d 	.word	0x08004e8d
 8004e6c:	08004e95 	.word	0x08004e95
 8004e70:	08004e9d 	.word	0x08004e9d
 8004e74:	08004ed5 	.word	0x08004ed5
 8004e78:	08004ea3 	.word	0x08004ea3
 8004e7c:	08004ed5 	.word	0x08004ed5
 8004e80:	08004ed5 	.word	0x08004ed5
 8004e84:	08004ed5 	.word	0x08004ed5
 8004e88:	08004eab 	.word	0x08004eab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e8c:	f7ff fb9e 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8004e90:	61b8      	str	r0, [r7, #24]
        break;
 8004e92:	e024      	b.n	8004ede <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e94:	f7ff fbbc 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8004e98:	61b8      	str	r0, [r7, #24]
        break;
 8004e9a:	e020      	b.n	8004ede <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004e9c:	4b0c      	ldr	r3, [pc, #48]	@ (8004ed0 <UART_SetConfig+0x290>)
 8004e9e:	61bb      	str	r3, [r7, #24]
        break;
 8004ea0:	e01d      	b.n	8004ede <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004ea2:	f7ff fb33 	bl	800450c <HAL_RCC_GetSysClockFreq>
 8004ea6:	61b8      	str	r0, [r7, #24]
        break;
 8004ea8:	e019      	b.n	8004ede <UART_SetConfig+0x29e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004eaa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004eae:	61bb      	str	r3, [r7, #24]
        break;
 8004eb0:	e015      	b.n	8004ede <UART_SetConfig+0x29e>
 8004eb2:	bf00      	nop
 8004eb4:	efff69f3 	.word	0xefff69f3
 8004eb8:	40013800 	.word	0x40013800
 8004ebc:	40021000 	.word	0x40021000
 8004ec0:	40004400 	.word	0x40004400
 8004ec4:	40004800 	.word	0x40004800
 8004ec8:	40004c00 	.word	0x40004c00
 8004ecc:	40005000 	.word	0x40005000
 8004ed0:	007a1200 	.word	0x007a1200
      default:
        pclk = 0U;
 8004ed4:	2300      	movs	r3, #0
 8004ed6:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004ed8:	2301      	movs	r3, #1
 8004eda:	77bb      	strb	r3, [r7, #30]
        break;
 8004edc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004ede:	69bb      	ldr	r3, [r7, #24]
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d073      	beq.n	8004fcc <UART_SetConfig+0x38c>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8004ee4:	69bb      	ldr	r3, [r7, #24]
 8004ee6:	005a      	lsls	r2, r3, #1
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	685b      	ldr	r3, [r3, #4]
 8004eec:	085b      	lsrs	r3, r3, #1
 8004eee:	441a      	add	r2, r3
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	685b      	ldr	r3, [r3, #4]
 8004ef4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ef8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	2b0f      	cmp	r3, #15
 8004efe:	d916      	bls.n	8004f2e <UART_SetConfig+0x2ee>
 8004f00:	693b      	ldr	r3, [r7, #16]
 8004f02:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f06:	d212      	bcs.n	8004f2e <UART_SetConfig+0x2ee>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004f08:	693b      	ldr	r3, [r7, #16]
 8004f0a:	b29b      	uxth	r3, r3
 8004f0c:	f023 030f 	bic.w	r3, r3, #15
 8004f10:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	085b      	lsrs	r3, r3, #1
 8004f16:	b29b      	uxth	r3, r3
 8004f18:	f003 0307 	and.w	r3, r3, #7
 8004f1c:	b29a      	uxth	r2, r3
 8004f1e:	89fb      	ldrh	r3, [r7, #14]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	89fa      	ldrh	r2, [r7, #14]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	e04e      	b.n	8004fcc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004f2e:	2301      	movs	r3, #1
 8004f30:	77bb      	strb	r3, [r7, #30]
 8004f32:	e04b      	b.n	8004fcc <UART_SetConfig+0x38c>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004f34:	7ffb      	ldrb	r3, [r7, #31]
 8004f36:	2b08      	cmp	r3, #8
 8004f38:	d827      	bhi.n	8004f8a <UART_SetConfig+0x34a>
 8004f3a:	a201      	add	r2, pc, #4	@ (adr r2, 8004f40 <UART_SetConfig+0x300>)
 8004f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f40:	08004f65 	.word	0x08004f65
 8004f44:	08004f6d 	.word	0x08004f6d
 8004f48:	08004f75 	.word	0x08004f75
 8004f4c:	08004f8b 	.word	0x08004f8b
 8004f50:	08004f7b 	.word	0x08004f7b
 8004f54:	08004f8b 	.word	0x08004f8b
 8004f58:	08004f8b 	.word	0x08004f8b
 8004f5c:	08004f8b 	.word	0x08004f8b
 8004f60:	08004f83 	.word	0x08004f83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004f64:	f7ff fb32 	bl	80045cc <HAL_RCC_GetPCLK1Freq>
 8004f68:	61b8      	str	r0, [r7, #24]
        break;
 8004f6a:	e013      	b.n	8004f94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004f6c:	f7ff fb50 	bl	8004610 <HAL_RCC_GetPCLK2Freq>
 8004f70:	61b8      	str	r0, [r7, #24]
        break;
 8004f72:	e00f      	b.n	8004f94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004f74:	4b1b      	ldr	r3, [pc, #108]	@ (8004fe4 <UART_SetConfig+0x3a4>)
 8004f76:	61bb      	str	r3, [r7, #24]
        break;
 8004f78:	e00c      	b.n	8004f94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004f7a:	f7ff fac7 	bl	800450c <HAL_RCC_GetSysClockFreq>
 8004f7e:	61b8      	str	r0, [r7, #24]
        break;
 8004f80:	e008      	b.n	8004f94 <UART_SetConfig+0x354>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004f82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004f86:	61bb      	str	r3, [r7, #24]
        break;
 8004f88:	e004      	b.n	8004f94 <UART_SetConfig+0x354>
      default:
        pclk = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004f8e:	2301      	movs	r3, #1
 8004f90:	77bb      	strb	r3, [r7, #30]
        break;
 8004f92:	bf00      	nop
    }

    if (pclk != 0U)
 8004f94:	69bb      	ldr	r3, [r7, #24]
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d018      	beq.n	8004fcc <UART_SetConfig+0x38c>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	685b      	ldr	r3, [r3, #4]
 8004f9e:	085a      	lsrs	r2, r3, #1
 8004fa0:	69bb      	ldr	r3, [r7, #24]
 8004fa2:	441a      	add	r2, r3
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	685b      	ldr	r3, [r3, #4]
 8004fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8004fac:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	2b0f      	cmp	r3, #15
 8004fb2:	d909      	bls.n	8004fc8 <UART_SetConfig+0x388>
 8004fb4:	693b      	ldr	r3, [r7, #16]
 8004fb6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004fba:	d205      	bcs.n	8004fc8 <UART_SetConfig+0x388>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004fbc:	693b      	ldr	r3, [r7, #16]
 8004fbe:	b29a      	uxth	r2, r3
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	60da      	str	r2, [r3, #12]
 8004fc6:	e001      	b.n	8004fcc <UART_SetConfig+0x38c>
      }
      else
      {
        ret = HAL_ERROR;
 8004fc8:	2301      	movs	r3, #1
 8004fca:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2200      	movs	r2, #0
 8004fd0:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2200      	movs	r2, #0
 8004fd6:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8004fd8:	7fbb      	ldrb	r3, [r7, #30]
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3720      	adds	r7, #32
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	bd80      	pop	{r7, pc}
 8004fe2:	bf00      	nop
 8004fe4:	007a1200 	.word	0x007a1200

08004fe8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004fe8:	b480      	push	{r7}
 8004fea:	b083      	sub	sp, #12
 8004fec:	af00      	add	r7, sp, #0
 8004fee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff4:	f003 0308 	and.w	r3, r3, #8
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d00a      	beq.n	8005012 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	430a      	orrs	r2, r1
 8005010:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d00a      	beq.n	8005034 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	685b      	ldr	r3, [r3, #4]
 8005024:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	430a      	orrs	r2, r1
 8005032:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005038:	f003 0302 	and.w	r3, r3, #2
 800503c:	2b00      	cmp	r3, #0
 800503e:	d00a      	beq.n	8005056 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	430a      	orrs	r2, r1
 8005054:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800505a:	f003 0304 	and.w	r3, r3, #4
 800505e:	2b00      	cmp	r3, #0
 8005060:	d00a      	beq.n	8005078 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	685b      	ldr	r3, [r3, #4]
 8005068:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	430a      	orrs	r2, r1
 8005076:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800507c:	f003 0310 	and.w	r3, r3, #16
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00a      	beq.n	800509a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689b      	ldr	r3, [r3, #8]
 800508a:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	430a      	orrs	r2, r1
 8005098:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509e:	f003 0320 	and.w	r3, r3, #32
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d00a      	beq.n	80050bc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	689b      	ldr	r3, [r3, #8]
 80050ac:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	430a      	orrs	r2, r1
 80050ba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050c0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01a      	beq.n	80050fe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	430a      	orrs	r2, r1
 80050dc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050e2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80050e6:	d10a      	bne.n	80050fe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	685b      	ldr	r3, [r3, #4]
 80050ee:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	430a      	orrs	r2, r1
 80050fc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005106:	2b00      	cmp	r3, #0
 8005108:	d00a      	beq.n	8005120 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	430a      	orrs	r2, r1
 800511e:	605a      	str	r2, [r3, #4]
  }
}
 8005120:	bf00      	nop
 8005122:	370c      	adds	r7, #12
 8005124:	46bd      	mov	sp, r7
 8005126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800512a:	4770      	bx	lr

0800512c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800512c:	b580      	push	{r7, lr}
 800512e:	b098      	sub	sp, #96	@ 0x60
 8005130:	af02      	add	r7, sp, #8
 8005132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	2200      	movs	r2, #0
 8005138:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800513c:	f7fc fa3a 	bl	80015b4 <HAL_GetTick>
 8005140:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f003 0308 	and.w	r3, r3, #8
 800514c:	2b08      	cmp	r3, #8
 800514e:	d12e      	bne.n	80051ae <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005150:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005154:	9300      	str	r3, [sp, #0]
 8005156:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8005158:	2200      	movs	r2, #0
 800515a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 f88c 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 8005164:	4603      	mov	r3, r0
 8005166:	2b00      	cmp	r3, #0
 8005168:	d021      	beq.n	80051ae <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	681b      	ldr	r3, [r3, #0]
 800516e:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005170:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005172:	e853 3f00 	ldrex	r3, [r3]
 8005176:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8005178:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800517a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800517e:	653b      	str	r3, [r7, #80]	@ 0x50
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	461a      	mov	r2, r3
 8005186:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005188:	647b      	str	r3, [r7, #68]	@ 0x44
 800518a:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800518e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005190:	e841 2300 	strex	r3, r2, [r1]
 8005194:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005196:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005198:	2b00      	cmp	r3, #0
 800519a:	d1e6      	bne.n	800516a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	2220      	movs	r2, #32
 80051a0:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051aa:	2303      	movs	r3, #3
 80051ac:	e062      	b.n	8005274 <UART_CheckIdleState+0x148>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	681b      	ldr	r3, [r3, #0]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f003 0304 	and.w	r3, r3, #4
 80051b8:	2b04      	cmp	r3, #4
 80051ba:	d149      	bne.n	8005250 <UART_CheckIdleState+0x124>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80051bc:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80051c0:	9300      	str	r3, [sp, #0]
 80051c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80051c4:	2200      	movs	r2, #0
 80051c6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 f856 	bl	800527c <UART_WaitOnFlagUntilTimeout>
 80051d0:	4603      	mov	r3, r0
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d03c      	beq.n	8005250 <UART_CheckIdleState+0x124>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80051de:	e853 3f00 	ldrex	r3, [r3]
 80051e2:	623b      	str	r3, [r7, #32]
   return(result);
 80051e4:	6a3b      	ldr	r3, [r7, #32]
 80051e6:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051ec:	687b      	ldr	r3, [r7, #4]
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	461a      	mov	r2, r3
 80051f2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80051f4:	633b      	str	r3, [r7, #48]	@ 0x30
 80051f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051f8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80051fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80051fc:	e841 2300 	strex	r3, r2, [r1]
 8005200:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005202:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005204:	2b00      	cmp	r3, #0
 8005206:	d1e6      	bne.n	80051d6 <UART_CheckIdleState+0xaa>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3308      	adds	r3, #8
 800520e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005210:	693b      	ldr	r3, [r7, #16]
 8005212:	e853 3f00 	ldrex	r3, [r3]
 8005216:	60fb      	str	r3, [r7, #12]
   return(result);
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	f023 0301 	bic.w	r3, r3, #1
 800521e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	3308      	adds	r3, #8
 8005226:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005228:	61fa      	str	r2, [r7, #28]
 800522a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800522c:	69b9      	ldr	r1, [r7, #24]
 800522e:	69fa      	ldr	r2, [r7, #28]
 8005230:	e841 2300 	strex	r3, r2, [r1]
 8005234:	617b      	str	r3, [r7, #20]
   return(result);
 8005236:	697b      	ldr	r3, [r7, #20]
 8005238:	2b00      	cmp	r3, #0
 800523a:	d1e5      	bne.n	8005208 <UART_CheckIdleState+0xdc>

      huart->RxState = HAL_UART_STATE_READY;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2220      	movs	r2, #32
 8005240:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

      __HAL_UNLOCK(huart);
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	2200      	movs	r2, #0
 8005248:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800524c:	2303      	movs	r3, #3
 800524e:	e011      	b.n	8005274 <UART_CheckIdleState+0x148>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2220      	movs	r2, #32
 8005254:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2220      	movs	r2, #32
 800525a:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	2200      	movs	r2, #0
 8005262:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	2200      	movs	r2, #0
 8005268:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

  return HAL_OK;
 8005272:	2300      	movs	r3, #0
}
 8005274:	4618      	mov	r0, r3
 8005276:	3758      	adds	r7, #88	@ 0x58
 8005278:	46bd      	mov	sp, r7
 800527a:	bd80      	pop	{r7, pc}

0800527c <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b084      	sub	sp, #16
 8005280:	af00      	add	r7, sp, #0
 8005282:	60f8      	str	r0, [r7, #12]
 8005284:	60b9      	str	r1, [r7, #8]
 8005286:	603b      	str	r3, [r7, #0]
 8005288:	4613      	mov	r3, r2
 800528a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800528c:	e04f      	b.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800528e:	69bb      	ldr	r3, [r7, #24]
 8005290:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005294:	d04b      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005296:	f7fc f98d 	bl	80015b4 <HAL_GetTick>
 800529a:	4602      	mov	r2, r0
 800529c:	683b      	ldr	r3, [r7, #0]
 800529e:	1ad3      	subs	r3, r2, r3
 80052a0:	69ba      	ldr	r2, [r7, #24]
 80052a2:	429a      	cmp	r2, r3
 80052a4:	d302      	bcc.n	80052ac <UART_WaitOnFlagUntilTimeout+0x30>
 80052a6:	69bb      	ldr	r3, [r7, #24]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e04e      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681b      	ldr	r3, [r3, #0]
 80052b6:	f003 0304 	and.w	r3, r3, #4
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d037      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	2b80      	cmp	r3, #128	@ 0x80
 80052c2:	d034      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	2b40      	cmp	r3, #64	@ 0x40
 80052c8:	d031      	beq.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	69db      	ldr	r3, [r3, #28]
 80052d0:	f003 0308 	and.w	r3, r3, #8
 80052d4:	2b08      	cmp	r3, #8
 80052d6:	d110      	bne.n	80052fa <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	2208      	movs	r2, #8
 80052de:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80052e0:	68f8      	ldr	r0, [r7, #12]
 80052e2:	f000 f838 	bl	8005356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80052e6:	68fb      	ldr	r3, [r7, #12]
 80052e8:	2208      	movs	r2, #8
 80052ea:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	2200      	movs	r2, #0
 80052f2:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_ERROR;
 80052f6:	2301      	movs	r3, #1
 80052f8:	e029      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	69db      	ldr	r3, [r3, #28]
 8005300:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005304:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005308:	d111      	bne.n	800532e <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005312:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	f000 f81e 	bl	8005356 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	2220      	movs	r2, #32
 800531e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	2200      	movs	r2, #0
 8005326:	f883 2078 	strb.w	r2, [r3, #120]	@ 0x78

          return HAL_TIMEOUT;
 800532a:	2303      	movs	r3, #3
 800532c:	e00f      	b.n	800534e <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	69da      	ldr	r2, [r3, #28]
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	4013      	ands	r3, r2
 8005338:	68ba      	ldr	r2, [r7, #8]
 800533a:	429a      	cmp	r2, r3
 800533c:	bf0c      	ite	eq
 800533e:	2301      	moveq	r3, #1
 8005340:	2300      	movne	r3, #0
 8005342:	b2db      	uxtb	r3, r3
 8005344:	461a      	mov	r2, r3
 8005346:	79fb      	ldrb	r3, [r7, #7]
 8005348:	429a      	cmp	r2, r3
 800534a:	d0a0      	beq.n	800528e <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800534c:	2300      	movs	r3, #0
}
 800534e:	4618      	mov	r0, r3
 8005350:	3710      	adds	r7, #16
 8005352:	46bd      	mov	sp, r7
 8005354:	bd80      	pop	{r7, pc}

08005356 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005356:	b480      	push	{r7}
 8005358:	b095      	sub	sp, #84	@ 0x54
 800535a:	af00      	add	r7, sp, #0
 800535c:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005364:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005366:	e853 3f00 	ldrex	r3, [r3]
 800536a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800536c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800536e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005372:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	461a      	mov	r2, r3
 800537a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800537c:	643b      	str	r3, [r7, #64]	@ 0x40
 800537e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005380:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005382:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005384:	e841 2300 	strex	r3, r2, [r1]
 8005388:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800538a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800538c:	2b00      	cmp	r3, #0
 800538e:	d1e6      	bne.n	800535e <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	3308      	adds	r3, #8
 8005396:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005398:	6a3b      	ldr	r3, [r7, #32]
 800539a:	e853 3f00 	ldrex	r3, [r3]
 800539e:	61fb      	str	r3, [r7, #28]
   return(result);
 80053a0:	69fb      	ldr	r3, [r7, #28]
 80053a2:	f023 0301 	bic.w	r3, r3, #1
 80053a6:	64bb      	str	r3, [r7, #72]	@ 0x48
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	3308      	adds	r3, #8
 80053ae:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80053b0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80053b2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80053b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80053b8:	e841 2300 	strex	r3, r2, [r1]
 80053bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80053be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d1e5      	bne.n	8005390 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d118      	bne.n	80053fe <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	681b      	ldr	r3, [r3, #0]
 80053d0:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	e853 3f00 	ldrex	r3, [r3]
 80053d8:	60bb      	str	r3, [r7, #8]
   return(result);
 80053da:	68bb      	ldr	r3, [r7, #8]
 80053dc:	f023 0310 	bic.w	r3, r3, #16
 80053e0:	647b      	str	r3, [r7, #68]	@ 0x44
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	461a      	mov	r2, r3
 80053e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ee:	6979      	ldr	r1, [r7, #20]
 80053f0:	69ba      	ldr	r2, [r7, #24]
 80053f2:	e841 2300 	strex	r3, r2, [r1]
 80053f6:	613b      	str	r3, [r7, #16]
   return(result);
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d1e6      	bne.n	80053cc <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	2220      	movs	r2, #32
 8005402:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2200      	movs	r2, #0
 800540a:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	2200      	movs	r2, #0
 8005410:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8005412:	bf00      	nop
 8005414:	3754      	adds	r7, #84	@ 0x54
 8005416:	46bd      	mov	sp, r7
 8005418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800541c:	4770      	bx	lr

0800541e <__cvt>:
 800541e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005422:	ec57 6b10 	vmov	r6, r7, d0
 8005426:	2f00      	cmp	r7, #0
 8005428:	460c      	mov	r4, r1
 800542a:	4619      	mov	r1, r3
 800542c:	463b      	mov	r3, r7
 800542e:	bfbb      	ittet	lt
 8005430:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005434:	461f      	movlt	r7, r3
 8005436:	2300      	movge	r3, #0
 8005438:	232d      	movlt	r3, #45	@ 0x2d
 800543a:	700b      	strb	r3, [r1, #0]
 800543c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800543e:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005442:	4691      	mov	r9, r2
 8005444:	f023 0820 	bic.w	r8, r3, #32
 8005448:	bfbc      	itt	lt
 800544a:	4632      	movlt	r2, r6
 800544c:	4616      	movlt	r6, r2
 800544e:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005452:	d005      	beq.n	8005460 <__cvt+0x42>
 8005454:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8005458:	d100      	bne.n	800545c <__cvt+0x3e>
 800545a:	3401      	adds	r4, #1
 800545c:	2102      	movs	r1, #2
 800545e:	e000      	b.n	8005462 <__cvt+0x44>
 8005460:	2103      	movs	r1, #3
 8005462:	ab03      	add	r3, sp, #12
 8005464:	9301      	str	r3, [sp, #4]
 8005466:	ab02      	add	r3, sp, #8
 8005468:	9300      	str	r3, [sp, #0]
 800546a:	ec47 6b10 	vmov	d0, r6, r7
 800546e:	4653      	mov	r3, sl
 8005470:	4622      	mov	r2, r4
 8005472:	f000 fe4d 	bl	8006110 <_dtoa_r>
 8005476:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800547a:	4605      	mov	r5, r0
 800547c:	d119      	bne.n	80054b2 <__cvt+0x94>
 800547e:	f019 0f01 	tst.w	r9, #1
 8005482:	d00e      	beq.n	80054a2 <__cvt+0x84>
 8005484:	eb00 0904 	add.w	r9, r0, r4
 8005488:	2200      	movs	r2, #0
 800548a:	2300      	movs	r3, #0
 800548c:	4630      	mov	r0, r6
 800548e:	4639      	mov	r1, r7
 8005490:	f7fb fb22 	bl	8000ad8 <__aeabi_dcmpeq>
 8005494:	b108      	cbz	r0, 800549a <__cvt+0x7c>
 8005496:	f8cd 900c 	str.w	r9, [sp, #12]
 800549a:	2230      	movs	r2, #48	@ 0x30
 800549c:	9b03      	ldr	r3, [sp, #12]
 800549e:	454b      	cmp	r3, r9
 80054a0:	d31e      	bcc.n	80054e0 <__cvt+0xc2>
 80054a2:	9b03      	ldr	r3, [sp, #12]
 80054a4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80054a6:	1b5b      	subs	r3, r3, r5
 80054a8:	4628      	mov	r0, r5
 80054aa:	6013      	str	r3, [r2, #0]
 80054ac:	b004      	add	sp, #16
 80054ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80054b2:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80054b6:	eb00 0904 	add.w	r9, r0, r4
 80054ba:	d1e5      	bne.n	8005488 <__cvt+0x6a>
 80054bc:	7803      	ldrb	r3, [r0, #0]
 80054be:	2b30      	cmp	r3, #48	@ 0x30
 80054c0:	d10a      	bne.n	80054d8 <__cvt+0xba>
 80054c2:	2200      	movs	r2, #0
 80054c4:	2300      	movs	r3, #0
 80054c6:	4630      	mov	r0, r6
 80054c8:	4639      	mov	r1, r7
 80054ca:	f7fb fb05 	bl	8000ad8 <__aeabi_dcmpeq>
 80054ce:	b918      	cbnz	r0, 80054d8 <__cvt+0xba>
 80054d0:	f1c4 0401 	rsb	r4, r4, #1
 80054d4:	f8ca 4000 	str.w	r4, [sl]
 80054d8:	f8da 3000 	ldr.w	r3, [sl]
 80054dc:	4499      	add	r9, r3
 80054de:	e7d3      	b.n	8005488 <__cvt+0x6a>
 80054e0:	1c59      	adds	r1, r3, #1
 80054e2:	9103      	str	r1, [sp, #12]
 80054e4:	701a      	strb	r2, [r3, #0]
 80054e6:	e7d9      	b.n	800549c <__cvt+0x7e>

080054e8 <__exponent>:
 80054e8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ea:	2900      	cmp	r1, #0
 80054ec:	bfba      	itte	lt
 80054ee:	4249      	neglt	r1, r1
 80054f0:	232d      	movlt	r3, #45	@ 0x2d
 80054f2:	232b      	movge	r3, #43	@ 0x2b
 80054f4:	2909      	cmp	r1, #9
 80054f6:	7002      	strb	r2, [r0, #0]
 80054f8:	7043      	strb	r3, [r0, #1]
 80054fa:	dd29      	ble.n	8005550 <__exponent+0x68>
 80054fc:	f10d 0307 	add.w	r3, sp, #7
 8005500:	461d      	mov	r5, r3
 8005502:	270a      	movs	r7, #10
 8005504:	461a      	mov	r2, r3
 8005506:	fbb1 f6f7 	udiv	r6, r1, r7
 800550a:	fb07 1416 	mls	r4, r7, r6, r1
 800550e:	3430      	adds	r4, #48	@ 0x30
 8005510:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005514:	460c      	mov	r4, r1
 8005516:	2c63      	cmp	r4, #99	@ 0x63
 8005518:	f103 33ff 	add.w	r3, r3, #4294967295
 800551c:	4631      	mov	r1, r6
 800551e:	dcf1      	bgt.n	8005504 <__exponent+0x1c>
 8005520:	3130      	adds	r1, #48	@ 0x30
 8005522:	1e94      	subs	r4, r2, #2
 8005524:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005528:	1c41      	adds	r1, r0, #1
 800552a:	4623      	mov	r3, r4
 800552c:	42ab      	cmp	r3, r5
 800552e:	d30a      	bcc.n	8005546 <__exponent+0x5e>
 8005530:	f10d 0309 	add.w	r3, sp, #9
 8005534:	1a9b      	subs	r3, r3, r2
 8005536:	42ac      	cmp	r4, r5
 8005538:	bf88      	it	hi
 800553a:	2300      	movhi	r3, #0
 800553c:	3302      	adds	r3, #2
 800553e:	4403      	add	r3, r0
 8005540:	1a18      	subs	r0, r3, r0
 8005542:	b003      	add	sp, #12
 8005544:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005546:	f813 6b01 	ldrb.w	r6, [r3], #1
 800554a:	f801 6f01 	strb.w	r6, [r1, #1]!
 800554e:	e7ed      	b.n	800552c <__exponent+0x44>
 8005550:	2330      	movs	r3, #48	@ 0x30
 8005552:	3130      	adds	r1, #48	@ 0x30
 8005554:	7083      	strb	r3, [r0, #2]
 8005556:	70c1      	strb	r1, [r0, #3]
 8005558:	1d03      	adds	r3, r0, #4
 800555a:	e7f1      	b.n	8005540 <__exponent+0x58>

0800555c <_printf_float>:
 800555c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005560:	b08d      	sub	sp, #52	@ 0x34
 8005562:	460c      	mov	r4, r1
 8005564:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005568:	4616      	mov	r6, r2
 800556a:	461f      	mov	r7, r3
 800556c:	4605      	mov	r5, r0
 800556e:	f000 fccd 	bl	8005f0c <_localeconv_r>
 8005572:	6803      	ldr	r3, [r0, #0]
 8005574:	9304      	str	r3, [sp, #16]
 8005576:	4618      	mov	r0, r3
 8005578:	f7fa fe82 	bl	8000280 <strlen>
 800557c:	2300      	movs	r3, #0
 800557e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005580:	f8d8 3000 	ldr.w	r3, [r8]
 8005584:	9005      	str	r0, [sp, #20]
 8005586:	3307      	adds	r3, #7
 8005588:	f023 0307 	bic.w	r3, r3, #7
 800558c:	f103 0208 	add.w	r2, r3, #8
 8005590:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005594:	f8d4 b000 	ldr.w	fp, [r4]
 8005598:	f8c8 2000 	str.w	r2, [r8]
 800559c:	e9d3 8900 	ldrd	r8, r9, [r3]
 80055a0:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80055a4:	9307      	str	r3, [sp, #28]
 80055a6:	f8cd 8018 	str.w	r8, [sp, #24]
 80055aa:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80055ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055b2:	4b9c      	ldr	r3, [pc, #624]	@ (8005824 <_printf_float+0x2c8>)
 80055b4:	f04f 32ff 	mov.w	r2, #4294967295
 80055b8:	f7fb fac0 	bl	8000b3c <__aeabi_dcmpun>
 80055bc:	bb70      	cbnz	r0, 800561c <_printf_float+0xc0>
 80055be:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80055c2:	4b98      	ldr	r3, [pc, #608]	@ (8005824 <_printf_float+0x2c8>)
 80055c4:	f04f 32ff 	mov.w	r2, #4294967295
 80055c8:	f7fb fa9a 	bl	8000b00 <__aeabi_dcmple>
 80055cc:	bb30      	cbnz	r0, 800561c <_printf_float+0xc0>
 80055ce:	2200      	movs	r2, #0
 80055d0:	2300      	movs	r3, #0
 80055d2:	4640      	mov	r0, r8
 80055d4:	4649      	mov	r1, r9
 80055d6:	f7fb fa89 	bl	8000aec <__aeabi_dcmplt>
 80055da:	b110      	cbz	r0, 80055e2 <_printf_float+0x86>
 80055dc:	232d      	movs	r3, #45	@ 0x2d
 80055de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80055e2:	4a91      	ldr	r2, [pc, #580]	@ (8005828 <_printf_float+0x2cc>)
 80055e4:	4b91      	ldr	r3, [pc, #580]	@ (800582c <_printf_float+0x2d0>)
 80055e6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80055ea:	bf94      	ite	ls
 80055ec:	4690      	movls	r8, r2
 80055ee:	4698      	movhi	r8, r3
 80055f0:	2303      	movs	r3, #3
 80055f2:	6123      	str	r3, [r4, #16]
 80055f4:	f02b 0304 	bic.w	r3, fp, #4
 80055f8:	6023      	str	r3, [r4, #0]
 80055fa:	f04f 0900 	mov.w	r9, #0
 80055fe:	9700      	str	r7, [sp, #0]
 8005600:	4633      	mov	r3, r6
 8005602:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005604:	4621      	mov	r1, r4
 8005606:	4628      	mov	r0, r5
 8005608:	f000 f9d2 	bl	80059b0 <_printf_common>
 800560c:	3001      	adds	r0, #1
 800560e:	f040 808d 	bne.w	800572c <_printf_float+0x1d0>
 8005612:	f04f 30ff 	mov.w	r0, #4294967295
 8005616:	b00d      	add	sp, #52	@ 0x34
 8005618:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800561c:	4642      	mov	r2, r8
 800561e:	464b      	mov	r3, r9
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fb fa8a 	bl	8000b3c <__aeabi_dcmpun>
 8005628:	b140      	cbz	r0, 800563c <_printf_float+0xe0>
 800562a:	464b      	mov	r3, r9
 800562c:	2b00      	cmp	r3, #0
 800562e:	bfbc      	itt	lt
 8005630:	232d      	movlt	r3, #45	@ 0x2d
 8005632:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005636:	4a7e      	ldr	r2, [pc, #504]	@ (8005830 <_printf_float+0x2d4>)
 8005638:	4b7e      	ldr	r3, [pc, #504]	@ (8005834 <_printf_float+0x2d8>)
 800563a:	e7d4      	b.n	80055e6 <_printf_float+0x8a>
 800563c:	6863      	ldr	r3, [r4, #4]
 800563e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005642:	9206      	str	r2, [sp, #24]
 8005644:	1c5a      	adds	r2, r3, #1
 8005646:	d13b      	bne.n	80056c0 <_printf_float+0x164>
 8005648:	2306      	movs	r3, #6
 800564a:	6063      	str	r3, [r4, #4]
 800564c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005650:	2300      	movs	r3, #0
 8005652:	6022      	str	r2, [r4, #0]
 8005654:	9303      	str	r3, [sp, #12]
 8005656:	ab0a      	add	r3, sp, #40	@ 0x28
 8005658:	e9cd a301 	strd	sl, r3, [sp, #4]
 800565c:	ab09      	add	r3, sp, #36	@ 0x24
 800565e:	9300      	str	r3, [sp, #0]
 8005660:	6861      	ldr	r1, [r4, #4]
 8005662:	ec49 8b10 	vmov	d0, r8, r9
 8005666:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800566a:	4628      	mov	r0, r5
 800566c:	f7ff fed7 	bl	800541e <__cvt>
 8005670:	9b06      	ldr	r3, [sp, #24]
 8005672:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005674:	2b47      	cmp	r3, #71	@ 0x47
 8005676:	4680      	mov	r8, r0
 8005678:	d129      	bne.n	80056ce <_printf_float+0x172>
 800567a:	1cc8      	adds	r0, r1, #3
 800567c:	db02      	blt.n	8005684 <_printf_float+0x128>
 800567e:	6863      	ldr	r3, [r4, #4]
 8005680:	4299      	cmp	r1, r3
 8005682:	dd41      	ble.n	8005708 <_printf_float+0x1ac>
 8005684:	f1aa 0a02 	sub.w	sl, sl, #2
 8005688:	fa5f fa8a 	uxtb.w	sl, sl
 800568c:	3901      	subs	r1, #1
 800568e:	4652      	mov	r2, sl
 8005690:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005694:	9109      	str	r1, [sp, #36]	@ 0x24
 8005696:	f7ff ff27 	bl	80054e8 <__exponent>
 800569a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800569c:	1813      	adds	r3, r2, r0
 800569e:	2a01      	cmp	r2, #1
 80056a0:	4681      	mov	r9, r0
 80056a2:	6123      	str	r3, [r4, #16]
 80056a4:	dc02      	bgt.n	80056ac <_printf_float+0x150>
 80056a6:	6822      	ldr	r2, [r4, #0]
 80056a8:	07d2      	lsls	r2, r2, #31
 80056aa:	d501      	bpl.n	80056b0 <_printf_float+0x154>
 80056ac:	3301      	adds	r3, #1
 80056ae:	6123      	str	r3, [r4, #16]
 80056b0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d0a2      	beq.n	80055fe <_printf_float+0xa2>
 80056b8:	232d      	movs	r3, #45	@ 0x2d
 80056ba:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80056be:	e79e      	b.n	80055fe <_printf_float+0xa2>
 80056c0:	9a06      	ldr	r2, [sp, #24]
 80056c2:	2a47      	cmp	r2, #71	@ 0x47
 80056c4:	d1c2      	bne.n	800564c <_printf_float+0xf0>
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d1c0      	bne.n	800564c <_printf_float+0xf0>
 80056ca:	2301      	movs	r3, #1
 80056cc:	e7bd      	b.n	800564a <_printf_float+0xee>
 80056ce:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80056d2:	d9db      	bls.n	800568c <_printf_float+0x130>
 80056d4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80056d8:	d118      	bne.n	800570c <_printf_float+0x1b0>
 80056da:	2900      	cmp	r1, #0
 80056dc:	6863      	ldr	r3, [r4, #4]
 80056de:	dd0b      	ble.n	80056f8 <_printf_float+0x19c>
 80056e0:	6121      	str	r1, [r4, #16]
 80056e2:	b913      	cbnz	r3, 80056ea <_printf_float+0x18e>
 80056e4:	6822      	ldr	r2, [r4, #0]
 80056e6:	07d0      	lsls	r0, r2, #31
 80056e8:	d502      	bpl.n	80056f0 <_printf_float+0x194>
 80056ea:	3301      	adds	r3, #1
 80056ec:	440b      	add	r3, r1
 80056ee:	6123      	str	r3, [r4, #16]
 80056f0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80056f2:	f04f 0900 	mov.w	r9, #0
 80056f6:	e7db      	b.n	80056b0 <_printf_float+0x154>
 80056f8:	b913      	cbnz	r3, 8005700 <_printf_float+0x1a4>
 80056fa:	6822      	ldr	r2, [r4, #0]
 80056fc:	07d2      	lsls	r2, r2, #31
 80056fe:	d501      	bpl.n	8005704 <_printf_float+0x1a8>
 8005700:	3302      	adds	r3, #2
 8005702:	e7f4      	b.n	80056ee <_printf_float+0x192>
 8005704:	2301      	movs	r3, #1
 8005706:	e7f2      	b.n	80056ee <_printf_float+0x192>
 8005708:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800570c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800570e:	4299      	cmp	r1, r3
 8005710:	db05      	blt.n	800571e <_printf_float+0x1c2>
 8005712:	6823      	ldr	r3, [r4, #0]
 8005714:	6121      	str	r1, [r4, #16]
 8005716:	07d8      	lsls	r0, r3, #31
 8005718:	d5ea      	bpl.n	80056f0 <_printf_float+0x194>
 800571a:	1c4b      	adds	r3, r1, #1
 800571c:	e7e7      	b.n	80056ee <_printf_float+0x192>
 800571e:	2900      	cmp	r1, #0
 8005720:	bfd4      	ite	le
 8005722:	f1c1 0202 	rsble	r2, r1, #2
 8005726:	2201      	movgt	r2, #1
 8005728:	4413      	add	r3, r2
 800572a:	e7e0      	b.n	80056ee <_printf_float+0x192>
 800572c:	6823      	ldr	r3, [r4, #0]
 800572e:	055a      	lsls	r2, r3, #21
 8005730:	d407      	bmi.n	8005742 <_printf_float+0x1e6>
 8005732:	6923      	ldr	r3, [r4, #16]
 8005734:	4642      	mov	r2, r8
 8005736:	4631      	mov	r1, r6
 8005738:	4628      	mov	r0, r5
 800573a:	47b8      	blx	r7
 800573c:	3001      	adds	r0, #1
 800573e:	d12b      	bne.n	8005798 <_printf_float+0x23c>
 8005740:	e767      	b.n	8005612 <_printf_float+0xb6>
 8005742:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005746:	f240 80dd 	bls.w	8005904 <_printf_float+0x3a8>
 800574a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800574e:	2200      	movs	r2, #0
 8005750:	2300      	movs	r3, #0
 8005752:	f7fb f9c1 	bl	8000ad8 <__aeabi_dcmpeq>
 8005756:	2800      	cmp	r0, #0
 8005758:	d033      	beq.n	80057c2 <_printf_float+0x266>
 800575a:	4a37      	ldr	r2, [pc, #220]	@ (8005838 <_printf_float+0x2dc>)
 800575c:	2301      	movs	r3, #1
 800575e:	4631      	mov	r1, r6
 8005760:	4628      	mov	r0, r5
 8005762:	47b8      	blx	r7
 8005764:	3001      	adds	r0, #1
 8005766:	f43f af54 	beq.w	8005612 <_printf_float+0xb6>
 800576a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800576e:	4543      	cmp	r3, r8
 8005770:	db02      	blt.n	8005778 <_printf_float+0x21c>
 8005772:	6823      	ldr	r3, [r4, #0]
 8005774:	07d8      	lsls	r0, r3, #31
 8005776:	d50f      	bpl.n	8005798 <_printf_float+0x23c>
 8005778:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800577c:	4631      	mov	r1, r6
 800577e:	4628      	mov	r0, r5
 8005780:	47b8      	blx	r7
 8005782:	3001      	adds	r0, #1
 8005784:	f43f af45 	beq.w	8005612 <_printf_float+0xb6>
 8005788:	f04f 0900 	mov.w	r9, #0
 800578c:	f108 38ff 	add.w	r8, r8, #4294967295
 8005790:	f104 0a1a 	add.w	sl, r4, #26
 8005794:	45c8      	cmp	r8, r9
 8005796:	dc09      	bgt.n	80057ac <_printf_float+0x250>
 8005798:	6823      	ldr	r3, [r4, #0]
 800579a:	079b      	lsls	r3, r3, #30
 800579c:	f100 8103 	bmi.w	80059a6 <_printf_float+0x44a>
 80057a0:	68e0      	ldr	r0, [r4, #12]
 80057a2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80057a4:	4298      	cmp	r0, r3
 80057a6:	bfb8      	it	lt
 80057a8:	4618      	movlt	r0, r3
 80057aa:	e734      	b.n	8005616 <_printf_float+0xba>
 80057ac:	2301      	movs	r3, #1
 80057ae:	4652      	mov	r2, sl
 80057b0:	4631      	mov	r1, r6
 80057b2:	4628      	mov	r0, r5
 80057b4:	47b8      	blx	r7
 80057b6:	3001      	adds	r0, #1
 80057b8:	f43f af2b 	beq.w	8005612 <_printf_float+0xb6>
 80057bc:	f109 0901 	add.w	r9, r9, #1
 80057c0:	e7e8      	b.n	8005794 <_printf_float+0x238>
 80057c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	dc39      	bgt.n	800583c <_printf_float+0x2e0>
 80057c8:	4a1b      	ldr	r2, [pc, #108]	@ (8005838 <_printf_float+0x2dc>)
 80057ca:	2301      	movs	r3, #1
 80057cc:	4631      	mov	r1, r6
 80057ce:	4628      	mov	r0, r5
 80057d0:	47b8      	blx	r7
 80057d2:	3001      	adds	r0, #1
 80057d4:	f43f af1d 	beq.w	8005612 <_printf_float+0xb6>
 80057d8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80057dc:	ea59 0303 	orrs.w	r3, r9, r3
 80057e0:	d102      	bne.n	80057e8 <_printf_float+0x28c>
 80057e2:	6823      	ldr	r3, [r4, #0]
 80057e4:	07d9      	lsls	r1, r3, #31
 80057e6:	d5d7      	bpl.n	8005798 <_printf_float+0x23c>
 80057e8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80057ec:	4631      	mov	r1, r6
 80057ee:	4628      	mov	r0, r5
 80057f0:	47b8      	blx	r7
 80057f2:	3001      	adds	r0, #1
 80057f4:	f43f af0d 	beq.w	8005612 <_printf_float+0xb6>
 80057f8:	f04f 0a00 	mov.w	sl, #0
 80057fc:	f104 0b1a 	add.w	fp, r4, #26
 8005800:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005802:	425b      	negs	r3, r3
 8005804:	4553      	cmp	r3, sl
 8005806:	dc01      	bgt.n	800580c <_printf_float+0x2b0>
 8005808:	464b      	mov	r3, r9
 800580a:	e793      	b.n	8005734 <_printf_float+0x1d8>
 800580c:	2301      	movs	r3, #1
 800580e:	465a      	mov	r2, fp
 8005810:	4631      	mov	r1, r6
 8005812:	4628      	mov	r0, r5
 8005814:	47b8      	blx	r7
 8005816:	3001      	adds	r0, #1
 8005818:	f43f aefb 	beq.w	8005612 <_printf_float+0xb6>
 800581c:	f10a 0a01 	add.w	sl, sl, #1
 8005820:	e7ee      	b.n	8005800 <_printf_float+0x2a4>
 8005822:	bf00      	nop
 8005824:	7fefffff 	.word	0x7fefffff
 8005828:	08007dd0 	.word	0x08007dd0
 800582c:	08007dd4 	.word	0x08007dd4
 8005830:	08007dd8 	.word	0x08007dd8
 8005834:	08007ddc 	.word	0x08007ddc
 8005838:	08007de0 	.word	0x08007de0
 800583c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800583e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005842:	4553      	cmp	r3, sl
 8005844:	bfa8      	it	ge
 8005846:	4653      	movge	r3, sl
 8005848:	2b00      	cmp	r3, #0
 800584a:	4699      	mov	r9, r3
 800584c:	dc36      	bgt.n	80058bc <_printf_float+0x360>
 800584e:	f04f 0b00 	mov.w	fp, #0
 8005852:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005856:	f104 021a 	add.w	r2, r4, #26
 800585a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800585c:	9306      	str	r3, [sp, #24]
 800585e:	eba3 0309 	sub.w	r3, r3, r9
 8005862:	455b      	cmp	r3, fp
 8005864:	dc31      	bgt.n	80058ca <_printf_float+0x36e>
 8005866:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005868:	459a      	cmp	sl, r3
 800586a:	dc3a      	bgt.n	80058e2 <_printf_float+0x386>
 800586c:	6823      	ldr	r3, [r4, #0]
 800586e:	07da      	lsls	r2, r3, #31
 8005870:	d437      	bmi.n	80058e2 <_printf_float+0x386>
 8005872:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005874:	ebaa 0903 	sub.w	r9, sl, r3
 8005878:	9b06      	ldr	r3, [sp, #24]
 800587a:	ebaa 0303 	sub.w	r3, sl, r3
 800587e:	4599      	cmp	r9, r3
 8005880:	bfa8      	it	ge
 8005882:	4699      	movge	r9, r3
 8005884:	f1b9 0f00 	cmp.w	r9, #0
 8005888:	dc33      	bgt.n	80058f2 <_printf_float+0x396>
 800588a:	f04f 0800 	mov.w	r8, #0
 800588e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005892:	f104 0b1a 	add.w	fp, r4, #26
 8005896:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005898:	ebaa 0303 	sub.w	r3, sl, r3
 800589c:	eba3 0309 	sub.w	r3, r3, r9
 80058a0:	4543      	cmp	r3, r8
 80058a2:	f77f af79 	ble.w	8005798 <_printf_float+0x23c>
 80058a6:	2301      	movs	r3, #1
 80058a8:	465a      	mov	r2, fp
 80058aa:	4631      	mov	r1, r6
 80058ac:	4628      	mov	r0, r5
 80058ae:	47b8      	blx	r7
 80058b0:	3001      	adds	r0, #1
 80058b2:	f43f aeae 	beq.w	8005612 <_printf_float+0xb6>
 80058b6:	f108 0801 	add.w	r8, r8, #1
 80058ba:	e7ec      	b.n	8005896 <_printf_float+0x33a>
 80058bc:	4642      	mov	r2, r8
 80058be:	4631      	mov	r1, r6
 80058c0:	4628      	mov	r0, r5
 80058c2:	47b8      	blx	r7
 80058c4:	3001      	adds	r0, #1
 80058c6:	d1c2      	bne.n	800584e <_printf_float+0x2f2>
 80058c8:	e6a3      	b.n	8005612 <_printf_float+0xb6>
 80058ca:	2301      	movs	r3, #1
 80058cc:	4631      	mov	r1, r6
 80058ce:	4628      	mov	r0, r5
 80058d0:	9206      	str	r2, [sp, #24]
 80058d2:	47b8      	blx	r7
 80058d4:	3001      	adds	r0, #1
 80058d6:	f43f ae9c 	beq.w	8005612 <_printf_float+0xb6>
 80058da:	9a06      	ldr	r2, [sp, #24]
 80058dc:	f10b 0b01 	add.w	fp, fp, #1
 80058e0:	e7bb      	b.n	800585a <_printf_float+0x2fe>
 80058e2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80058e6:	4631      	mov	r1, r6
 80058e8:	4628      	mov	r0, r5
 80058ea:	47b8      	blx	r7
 80058ec:	3001      	adds	r0, #1
 80058ee:	d1c0      	bne.n	8005872 <_printf_float+0x316>
 80058f0:	e68f      	b.n	8005612 <_printf_float+0xb6>
 80058f2:	9a06      	ldr	r2, [sp, #24]
 80058f4:	464b      	mov	r3, r9
 80058f6:	4442      	add	r2, r8
 80058f8:	4631      	mov	r1, r6
 80058fa:	4628      	mov	r0, r5
 80058fc:	47b8      	blx	r7
 80058fe:	3001      	adds	r0, #1
 8005900:	d1c3      	bne.n	800588a <_printf_float+0x32e>
 8005902:	e686      	b.n	8005612 <_printf_float+0xb6>
 8005904:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005908:	f1ba 0f01 	cmp.w	sl, #1
 800590c:	dc01      	bgt.n	8005912 <_printf_float+0x3b6>
 800590e:	07db      	lsls	r3, r3, #31
 8005910:	d536      	bpl.n	8005980 <_printf_float+0x424>
 8005912:	2301      	movs	r3, #1
 8005914:	4642      	mov	r2, r8
 8005916:	4631      	mov	r1, r6
 8005918:	4628      	mov	r0, r5
 800591a:	47b8      	blx	r7
 800591c:	3001      	adds	r0, #1
 800591e:	f43f ae78 	beq.w	8005612 <_printf_float+0xb6>
 8005922:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005926:	4631      	mov	r1, r6
 8005928:	4628      	mov	r0, r5
 800592a:	47b8      	blx	r7
 800592c:	3001      	adds	r0, #1
 800592e:	f43f ae70 	beq.w	8005612 <_printf_float+0xb6>
 8005932:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005936:	2200      	movs	r2, #0
 8005938:	2300      	movs	r3, #0
 800593a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800593e:	f7fb f8cb 	bl	8000ad8 <__aeabi_dcmpeq>
 8005942:	b9c0      	cbnz	r0, 8005976 <_printf_float+0x41a>
 8005944:	4653      	mov	r3, sl
 8005946:	f108 0201 	add.w	r2, r8, #1
 800594a:	4631      	mov	r1, r6
 800594c:	4628      	mov	r0, r5
 800594e:	47b8      	blx	r7
 8005950:	3001      	adds	r0, #1
 8005952:	d10c      	bne.n	800596e <_printf_float+0x412>
 8005954:	e65d      	b.n	8005612 <_printf_float+0xb6>
 8005956:	2301      	movs	r3, #1
 8005958:	465a      	mov	r2, fp
 800595a:	4631      	mov	r1, r6
 800595c:	4628      	mov	r0, r5
 800595e:	47b8      	blx	r7
 8005960:	3001      	adds	r0, #1
 8005962:	f43f ae56 	beq.w	8005612 <_printf_float+0xb6>
 8005966:	f108 0801 	add.w	r8, r8, #1
 800596a:	45d0      	cmp	r8, sl
 800596c:	dbf3      	blt.n	8005956 <_printf_float+0x3fa>
 800596e:	464b      	mov	r3, r9
 8005970:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005974:	e6df      	b.n	8005736 <_printf_float+0x1da>
 8005976:	f04f 0800 	mov.w	r8, #0
 800597a:	f104 0b1a 	add.w	fp, r4, #26
 800597e:	e7f4      	b.n	800596a <_printf_float+0x40e>
 8005980:	2301      	movs	r3, #1
 8005982:	4642      	mov	r2, r8
 8005984:	e7e1      	b.n	800594a <_printf_float+0x3ee>
 8005986:	2301      	movs	r3, #1
 8005988:	464a      	mov	r2, r9
 800598a:	4631      	mov	r1, r6
 800598c:	4628      	mov	r0, r5
 800598e:	47b8      	blx	r7
 8005990:	3001      	adds	r0, #1
 8005992:	f43f ae3e 	beq.w	8005612 <_printf_float+0xb6>
 8005996:	f108 0801 	add.w	r8, r8, #1
 800599a:	68e3      	ldr	r3, [r4, #12]
 800599c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800599e:	1a5b      	subs	r3, r3, r1
 80059a0:	4543      	cmp	r3, r8
 80059a2:	dcf0      	bgt.n	8005986 <_printf_float+0x42a>
 80059a4:	e6fc      	b.n	80057a0 <_printf_float+0x244>
 80059a6:	f04f 0800 	mov.w	r8, #0
 80059aa:	f104 0919 	add.w	r9, r4, #25
 80059ae:	e7f4      	b.n	800599a <_printf_float+0x43e>

080059b0 <_printf_common>:
 80059b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80059b4:	4616      	mov	r6, r2
 80059b6:	4698      	mov	r8, r3
 80059b8:	688a      	ldr	r2, [r1, #8]
 80059ba:	690b      	ldr	r3, [r1, #16]
 80059bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80059c0:	4293      	cmp	r3, r2
 80059c2:	bfb8      	it	lt
 80059c4:	4613      	movlt	r3, r2
 80059c6:	6033      	str	r3, [r6, #0]
 80059c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80059cc:	4607      	mov	r7, r0
 80059ce:	460c      	mov	r4, r1
 80059d0:	b10a      	cbz	r2, 80059d6 <_printf_common+0x26>
 80059d2:	3301      	adds	r3, #1
 80059d4:	6033      	str	r3, [r6, #0]
 80059d6:	6823      	ldr	r3, [r4, #0]
 80059d8:	0699      	lsls	r1, r3, #26
 80059da:	bf42      	ittt	mi
 80059dc:	6833      	ldrmi	r3, [r6, #0]
 80059de:	3302      	addmi	r3, #2
 80059e0:	6033      	strmi	r3, [r6, #0]
 80059e2:	6825      	ldr	r5, [r4, #0]
 80059e4:	f015 0506 	ands.w	r5, r5, #6
 80059e8:	d106      	bne.n	80059f8 <_printf_common+0x48>
 80059ea:	f104 0a19 	add.w	sl, r4, #25
 80059ee:	68e3      	ldr	r3, [r4, #12]
 80059f0:	6832      	ldr	r2, [r6, #0]
 80059f2:	1a9b      	subs	r3, r3, r2
 80059f4:	42ab      	cmp	r3, r5
 80059f6:	dc26      	bgt.n	8005a46 <_printf_common+0x96>
 80059f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80059fc:	6822      	ldr	r2, [r4, #0]
 80059fe:	3b00      	subs	r3, #0
 8005a00:	bf18      	it	ne
 8005a02:	2301      	movne	r3, #1
 8005a04:	0692      	lsls	r2, r2, #26
 8005a06:	d42b      	bmi.n	8005a60 <_printf_common+0xb0>
 8005a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005a0c:	4641      	mov	r1, r8
 8005a0e:	4638      	mov	r0, r7
 8005a10:	47c8      	blx	r9
 8005a12:	3001      	adds	r0, #1
 8005a14:	d01e      	beq.n	8005a54 <_printf_common+0xa4>
 8005a16:	6823      	ldr	r3, [r4, #0]
 8005a18:	6922      	ldr	r2, [r4, #16]
 8005a1a:	f003 0306 	and.w	r3, r3, #6
 8005a1e:	2b04      	cmp	r3, #4
 8005a20:	bf02      	ittt	eq
 8005a22:	68e5      	ldreq	r5, [r4, #12]
 8005a24:	6833      	ldreq	r3, [r6, #0]
 8005a26:	1aed      	subeq	r5, r5, r3
 8005a28:	68a3      	ldr	r3, [r4, #8]
 8005a2a:	bf0c      	ite	eq
 8005a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005a30:	2500      	movne	r5, #0
 8005a32:	4293      	cmp	r3, r2
 8005a34:	bfc4      	itt	gt
 8005a36:	1a9b      	subgt	r3, r3, r2
 8005a38:	18ed      	addgt	r5, r5, r3
 8005a3a:	2600      	movs	r6, #0
 8005a3c:	341a      	adds	r4, #26
 8005a3e:	42b5      	cmp	r5, r6
 8005a40:	d11a      	bne.n	8005a78 <_printf_common+0xc8>
 8005a42:	2000      	movs	r0, #0
 8005a44:	e008      	b.n	8005a58 <_printf_common+0xa8>
 8005a46:	2301      	movs	r3, #1
 8005a48:	4652      	mov	r2, sl
 8005a4a:	4641      	mov	r1, r8
 8005a4c:	4638      	mov	r0, r7
 8005a4e:	47c8      	blx	r9
 8005a50:	3001      	adds	r0, #1
 8005a52:	d103      	bne.n	8005a5c <_printf_common+0xac>
 8005a54:	f04f 30ff 	mov.w	r0, #4294967295
 8005a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005a5c:	3501      	adds	r5, #1
 8005a5e:	e7c6      	b.n	80059ee <_printf_common+0x3e>
 8005a60:	18e1      	adds	r1, r4, r3
 8005a62:	1c5a      	adds	r2, r3, #1
 8005a64:	2030      	movs	r0, #48	@ 0x30
 8005a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005a6a:	4422      	add	r2, r4
 8005a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005a74:	3302      	adds	r3, #2
 8005a76:	e7c7      	b.n	8005a08 <_printf_common+0x58>
 8005a78:	2301      	movs	r3, #1
 8005a7a:	4622      	mov	r2, r4
 8005a7c:	4641      	mov	r1, r8
 8005a7e:	4638      	mov	r0, r7
 8005a80:	47c8      	blx	r9
 8005a82:	3001      	adds	r0, #1
 8005a84:	d0e6      	beq.n	8005a54 <_printf_common+0xa4>
 8005a86:	3601      	adds	r6, #1
 8005a88:	e7d9      	b.n	8005a3e <_printf_common+0x8e>
	...

08005a8c <_printf_i>:
 8005a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005a90:	7e0f      	ldrb	r7, [r1, #24]
 8005a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005a94:	2f78      	cmp	r7, #120	@ 0x78
 8005a96:	4691      	mov	r9, r2
 8005a98:	4680      	mov	r8, r0
 8005a9a:	460c      	mov	r4, r1
 8005a9c:	469a      	mov	sl, r3
 8005a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005aa2:	d807      	bhi.n	8005ab4 <_printf_i+0x28>
 8005aa4:	2f62      	cmp	r7, #98	@ 0x62
 8005aa6:	d80a      	bhi.n	8005abe <_printf_i+0x32>
 8005aa8:	2f00      	cmp	r7, #0
 8005aaa:	f000 80d2 	beq.w	8005c52 <_printf_i+0x1c6>
 8005aae:	2f58      	cmp	r7, #88	@ 0x58
 8005ab0:	f000 80b9 	beq.w	8005c26 <_printf_i+0x19a>
 8005ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005abc:	e03a      	b.n	8005b34 <_printf_i+0xa8>
 8005abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005ac2:	2b15      	cmp	r3, #21
 8005ac4:	d8f6      	bhi.n	8005ab4 <_printf_i+0x28>
 8005ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8005acc <_printf_i+0x40>)
 8005ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005acc:	08005b25 	.word	0x08005b25
 8005ad0:	08005b39 	.word	0x08005b39
 8005ad4:	08005ab5 	.word	0x08005ab5
 8005ad8:	08005ab5 	.word	0x08005ab5
 8005adc:	08005ab5 	.word	0x08005ab5
 8005ae0:	08005ab5 	.word	0x08005ab5
 8005ae4:	08005b39 	.word	0x08005b39
 8005ae8:	08005ab5 	.word	0x08005ab5
 8005aec:	08005ab5 	.word	0x08005ab5
 8005af0:	08005ab5 	.word	0x08005ab5
 8005af4:	08005ab5 	.word	0x08005ab5
 8005af8:	08005c39 	.word	0x08005c39
 8005afc:	08005b63 	.word	0x08005b63
 8005b00:	08005bf3 	.word	0x08005bf3
 8005b04:	08005ab5 	.word	0x08005ab5
 8005b08:	08005ab5 	.word	0x08005ab5
 8005b0c:	08005c5b 	.word	0x08005c5b
 8005b10:	08005ab5 	.word	0x08005ab5
 8005b14:	08005b63 	.word	0x08005b63
 8005b18:	08005ab5 	.word	0x08005ab5
 8005b1c:	08005ab5 	.word	0x08005ab5
 8005b20:	08005bfb 	.word	0x08005bfb
 8005b24:	6833      	ldr	r3, [r6, #0]
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	681b      	ldr	r3, [r3, #0]
 8005b2a:	6032      	str	r2, [r6, #0]
 8005b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005b34:	2301      	movs	r3, #1
 8005b36:	e09d      	b.n	8005c74 <_printf_i+0x1e8>
 8005b38:	6833      	ldr	r3, [r6, #0]
 8005b3a:	6820      	ldr	r0, [r4, #0]
 8005b3c:	1d19      	adds	r1, r3, #4
 8005b3e:	6031      	str	r1, [r6, #0]
 8005b40:	0606      	lsls	r6, r0, #24
 8005b42:	d501      	bpl.n	8005b48 <_printf_i+0xbc>
 8005b44:	681d      	ldr	r5, [r3, #0]
 8005b46:	e003      	b.n	8005b50 <_printf_i+0xc4>
 8005b48:	0645      	lsls	r5, r0, #25
 8005b4a:	d5fb      	bpl.n	8005b44 <_printf_i+0xb8>
 8005b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005b50:	2d00      	cmp	r5, #0
 8005b52:	da03      	bge.n	8005b5c <_printf_i+0xd0>
 8005b54:	232d      	movs	r3, #45	@ 0x2d
 8005b56:	426d      	negs	r5, r5
 8005b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005b5c:	4859      	ldr	r0, [pc, #356]	@ (8005cc4 <_printf_i+0x238>)
 8005b5e:	230a      	movs	r3, #10
 8005b60:	e011      	b.n	8005b86 <_printf_i+0xfa>
 8005b62:	6821      	ldr	r1, [r4, #0]
 8005b64:	6833      	ldr	r3, [r6, #0]
 8005b66:	0608      	lsls	r0, r1, #24
 8005b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8005b6c:	d402      	bmi.n	8005b74 <_printf_i+0xe8>
 8005b6e:	0649      	lsls	r1, r1, #25
 8005b70:	bf48      	it	mi
 8005b72:	b2ad      	uxthmi	r5, r5
 8005b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8005b76:	4853      	ldr	r0, [pc, #332]	@ (8005cc4 <_printf_i+0x238>)
 8005b78:	6033      	str	r3, [r6, #0]
 8005b7a:	bf14      	ite	ne
 8005b7c:	230a      	movne	r3, #10
 8005b7e:	2308      	moveq	r3, #8
 8005b80:	2100      	movs	r1, #0
 8005b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005b86:	6866      	ldr	r6, [r4, #4]
 8005b88:	60a6      	str	r6, [r4, #8]
 8005b8a:	2e00      	cmp	r6, #0
 8005b8c:	bfa2      	ittt	ge
 8005b8e:	6821      	ldrge	r1, [r4, #0]
 8005b90:	f021 0104 	bicge.w	r1, r1, #4
 8005b94:	6021      	strge	r1, [r4, #0]
 8005b96:	b90d      	cbnz	r5, 8005b9c <_printf_i+0x110>
 8005b98:	2e00      	cmp	r6, #0
 8005b9a:	d04b      	beq.n	8005c34 <_printf_i+0x1a8>
 8005b9c:	4616      	mov	r6, r2
 8005b9e:	fbb5 f1f3 	udiv	r1, r5, r3
 8005ba2:	fb03 5711 	mls	r7, r3, r1, r5
 8005ba6:	5dc7      	ldrb	r7, [r0, r7]
 8005ba8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005bac:	462f      	mov	r7, r5
 8005bae:	42bb      	cmp	r3, r7
 8005bb0:	460d      	mov	r5, r1
 8005bb2:	d9f4      	bls.n	8005b9e <_printf_i+0x112>
 8005bb4:	2b08      	cmp	r3, #8
 8005bb6:	d10b      	bne.n	8005bd0 <_printf_i+0x144>
 8005bb8:	6823      	ldr	r3, [r4, #0]
 8005bba:	07df      	lsls	r7, r3, #31
 8005bbc:	d508      	bpl.n	8005bd0 <_printf_i+0x144>
 8005bbe:	6923      	ldr	r3, [r4, #16]
 8005bc0:	6861      	ldr	r1, [r4, #4]
 8005bc2:	4299      	cmp	r1, r3
 8005bc4:	bfde      	ittt	le
 8005bc6:	2330      	movle	r3, #48	@ 0x30
 8005bc8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005bcc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005bd0:	1b92      	subs	r2, r2, r6
 8005bd2:	6122      	str	r2, [r4, #16]
 8005bd4:	f8cd a000 	str.w	sl, [sp]
 8005bd8:	464b      	mov	r3, r9
 8005bda:	aa03      	add	r2, sp, #12
 8005bdc:	4621      	mov	r1, r4
 8005bde:	4640      	mov	r0, r8
 8005be0:	f7ff fee6 	bl	80059b0 <_printf_common>
 8005be4:	3001      	adds	r0, #1
 8005be6:	d14a      	bne.n	8005c7e <_printf_i+0x1f2>
 8005be8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bec:	b004      	add	sp, #16
 8005bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005bf2:	6823      	ldr	r3, [r4, #0]
 8005bf4:	f043 0320 	orr.w	r3, r3, #32
 8005bf8:	6023      	str	r3, [r4, #0]
 8005bfa:	4833      	ldr	r0, [pc, #204]	@ (8005cc8 <_printf_i+0x23c>)
 8005bfc:	2778      	movs	r7, #120	@ 0x78
 8005bfe:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005c02:	6823      	ldr	r3, [r4, #0]
 8005c04:	6831      	ldr	r1, [r6, #0]
 8005c06:	061f      	lsls	r7, r3, #24
 8005c08:	f851 5b04 	ldr.w	r5, [r1], #4
 8005c0c:	d402      	bmi.n	8005c14 <_printf_i+0x188>
 8005c0e:	065f      	lsls	r7, r3, #25
 8005c10:	bf48      	it	mi
 8005c12:	b2ad      	uxthmi	r5, r5
 8005c14:	6031      	str	r1, [r6, #0]
 8005c16:	07d9      	lsls	r1, r3, #31
 8005c18:	bf44      	itt	mi
 8005c1a:	f043 0320 	orrmi.w	r3, r3, #32
 8005c1e:	6023      	strmi	r3, [r4, #0]
 8005c20:	b11d      	cbz	r5, 8005c2a <_printf_i+0x19e>
 8005c22:	2310      	movs	r3, #16
 8005c24:	e7ac      	b.n	8005b80 <_printf_i+0xf4>
 8005c26:	4827      	ldr	r0, [pc, #156]	@ (8005cc4 <_printf_i+0x238>)
 8005c28:	e7e9      	b.n	8005bfe <_printf_i+0x172>
 8005c2a:	6823      	ldr	r3, [r4, #0]
 8005c2c:	f023 0320 	bic.w	r3, r3, #32
 8005c30:	6023      	str	r3, [r4, #0]
 8005c32:	e7f6      	b.n	8005c22 <_printf_i+0x196>
 8005c34:	4616      	mov	r6, r2
 8005c36:	e7bd      	b.n	8005bb4 <_printf_i+0x128>
 8005c38:	6833      	ldr	r3, [r6, #0]
 8005c3a:	6825      	ldr	r5, [r4, #0]
 8005c3c:	6961      	ldr	r1, [r4, #20]
 8005c3e:	1d18      	adds	r0, r3, #4
 8005c40:	6030      	str	r0, [r6, #0]
 8005c42:	062e      	lsls	r6, r5, #24
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	d501      	bpl.n	8005c4c <_printf_i+0x1c0>
 8005c48:	6019      	str	r1, [r3, #0]
 8005c4a:	e002      	b.n	8005c52 <_printf_i+0x1c6>
 8005c4c:	0668      	lsls	r0, r5, #25
 8005c4e:	d5fb      	bpl.n	8005c48 <_printf_i+0x1bc>
 8005c50:	8019      	strh	r1, [r3, #0]
 8005c52:	2300      	movs	r3, #0
 8005c54:	6123      	str	r3, [r4, #16]
 8005c56:	4616      	mov	r6, r2
 8005c58:	e7bc      	b.n	8005bd4 <_printf_i+0x148>
 8005c5a:	6833      	ldr	r3, [r6, #0]
 8005c5c:	1d1a      	adds	r2, r3, #4
 8005c5e:	6032      	str	r2, [r6, #0]
 8005c60:	681e      	ldr	r6, [r3, #0]
 8005c62:	6862      	ldr	r2, [r4, #4]
 8005c64:	2100      	movs	r1, #0
 8005c66:	4630      	mov	r0, r6
 8005c68:	f7fa faba 	bl	80001e0 <memchr>
 8005c6c:	b108      	cbz	r0, 8005c72 <_printf_i+0x1e6>
 8005c6e:	1b80      	subs	r0, r0, r6
 8005c70:	6060      	str	r0, [r4, #4]
 8005c72:	6863      	ldr	r3, [r4, #4]
 8005c74:	6123      	str	r3, [r4, #16]
 8005c76:	2300      	movs	r3, #0
 8005c78:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c7c:	e7aa      	b.n	8005bd4 <_printf_i+0x148>
 8005c7e:	6923      	ldr	r3, [r4, #16]
 8005c80:	4632      	mov	r2, r6
 8005c82:	4649      	mov	r1, r9
 8005c84:	4640      	mov	r0, r8
 8005c86:	47d0      	blx	sl
 8005c88:	3001      	adds	r0, #1
 8005c8a:	d0ad      	beq.n	8005be8 <_printf_i+0x15c>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	079b      	lsls	r3, r3, #30
 8005c90:	d413      	bmi.n	8005cba <_printf_i+0x22e>
 8005c92:	68e0      	ldr	r0, [r4, #12]
 8005c94:	9b03      	ldr	r3, [sp, #12]
 8005c96:	4298      	cmp	r0, r3
 8005c98:	bfb8      	it	lt
 8005c9a:	4618      	movlt	r0, r3
 8005c9c:	e7a6      	b.n	8005bec <_printf_i+0x160>
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	4632      	mov	r2, r6
 8005ca2:	4649      	mov	r1, r9
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	47d0      	blx	sl
 8005ca8:	3001      	adds	r0, #1
 8005caa:	d09d      	beq.n	8005be8 <_printf_i+0x15c>
 8005cac:	3501      	adds	r5, #1
 8005cae:	68e3      	ldr	r3, [r4, #12]
 8005cb0:	9903      	ldr	r1, [sp, #12]
 8005cb2:	1a5b      	subs	r3, r3, r1
 8005cb4:	42ab      	cmp	r3, r5
 8005cb6:	dcf2      	bgt.n	8005c9e <_printf_i+0x212>
 8005cb8:	e7eb      	b.n	8005c92 <_printf_i+0x206>
 8005cba:	2500      	movs	r5, #0
 8005cbc:	f104 0619 	add.w	r6, r4, #25
 8005cc0:	e7f5      	b.n	8005cae <_printf_i+0x222>
 8005cc2:	bf00      	nop
 8005cc4:	08007de2 	.word	0x08007de2
 8005cc8:	08007df3 	.word	0x08007df3

08005ccc <std>:
 8005ccc:	2300      	movs	r3, #0
 8005cce:	b510      	push	{r4, lr}
 8005cd0:	4604      	mov	r4, r0
 8005cd2:	e9c0 3300 	strd	r3, r3, [r0]
 8005cd6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cda:	6083      	str	r3, [r0, #8]
 8005cdc:	8181      	strh	r1, [r0, #12]
 8005cde:	6643      	str	r3, [r0, #100]	@ 0x64
 8005ce0:	81c2      	strh	r2, [r0, #14]
 8005ce2:	6183      	str	r3, [r0, #24]
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	2208      	movs	r2, #8
 8005ce8:	305c      	adds	r0, #92	@ 0x5c
 8005cea:	f000 f906 	bl	8005efa <memset>
 8005cee:	4b0d      	ldr	r3, [pc, #52]	@ (8005d24 <std+0x58>)
 8005cf0:	6263      	str	r3, [r4, #36]	@ 0x24
 8005cf2:	4b0d      	ldr	r3, [pc, #52]	@ (8005d28 <std+0x5c>)
 8005cf4:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005cf6:	4b0d      	ldr	r3, [pc, #52]	@ (8005d2c <std+0x60>)
 8005cf8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8005d30 <std+0x64>)
 8005cfc:	6323      	str	r3, [r4, #48]	@ 0x30
 8005cfe:	4b0d      	ldr	r3, [pc, #52]	@ (8005d34 <std+0x68>)
 8005d00:	6224      	str	r4, [r4, #32]
 8005d02:	429c      	cmp	r4, r3
 8005d04:	d006      	beq.n	8005d14 <std+0x48>
 8005d06:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d0a:	4294      	cmp	r4, r2
 8005d0c:	d002      	beq.n	8005d14 <std+0x48>
 8005d0e:	33d0      	adds	r3, #208	@ 0xd0
 8005d10:	429c      	cmp	r4, r3
 8005d12:	d105      	bne.n	8005d20 <std+0x54>
 8005d14:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d1c:	f000 b96a 	b.w	8005ff4 <__retarget_lock_init_recursive>
 8005d20:	bd10      	pop	{r4, pc}
 8005d22:	bf00      	nop
 8005d24:	08005e75 	.word	0x08005e75
 8005d28:	08005e97 	.word	0x08005e97
 8005d2c:	08005ecf 	.word	0x08005ecf
 8005d30:	08005ef3 	.word	0x08005ef3
 8005d34:	20000330 	.word	0x20000330

08005d38 <stdio_exit_handler>:
 8005d38:	4a02      	ldr	r2, [pc, #8]	@ (8005d44 <stdio_exit_handler+0xc>)
 8005d3a:	4903      	ldr	r1, [pc, #12]	@ (8005d48 <stdio_exit_handler+0x10>)
 8005d3c:	4803      	ldr	r0, [pc, #12]	@ (8005d4c <stdio_exit_handler+0x14>)
 8005d3e:	f000 b869 	b.w	8005e14 <_fwalk_sglue>
 8005d42:	bf00      	nop
 8005d44:	2000000c 	.word	0x2000000c
 8005d48:	08007929 	.word	0x08007929
 8005d4c:	2000001c 	.word	0x2000001c

08005d50 <cleanup_stdio>:
 8005d50:	6841      	ldr	r1, [r0, #4]
 8005d52:	4b0c      	ldr	r3, [pc, #48]	@ (8005d84 <cleanup_stdio+0x34>)
 8005d54:	4299      	cmp	r1, r3
 8005d56:	b510      	push	{r4, lr}
 8005d58:	4604      	mov	r4, r0
 8005d5a:	d001      	beq.n	8005d60 <cleanup_stdio+0x10>
 8005d5c:	f001 fde4 	bl	8007928 <_fflush_r>
 8005d60:	68a1      	ldr	r1, [r4, #8]
 8005d62:	4b09      	ldr	r3, [pc, #36]	@ (8005d88 <cleanup_stdio+0x38>)
 8005d64:	4299      	cmp	r1, r3
 8005d66:	d002      	beq.n	8005d6e <cleanup_stdio+0x1e>
 8005d68:	4620      	mov	r0, r4
 8005d6a:	f001 fddd 	bl	8007928 <_fflush_r>
 8005d6e:	68e1      	ldr	r1, [r4, #12]
 8005d70:	4b06      	ldr	r3, [pc, #24]	@ (8005d8c <cleanup_stdio+0x3c>)
 8005d72:	4299      	cmp	r1, r3
 8005d74:	d004      	beq.n	8005d80 <cleanup_stdio+0x30>
 8005d76:	4620      	mov	r0, r4
 8005d78:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d7c:	f001 bdd4 	b.w	8007928 <_fflush_r>
 8005d80:	bd10      	pop	{r4, pc}
 8005d82:	bf00      	nop
 8005d84:	20000330 	.word	0x20000330
 8005d88:	20000398 	.word	0x20000398
 8005d8c:	20000400 	.word	0x20000400

08005d90 <global_stdio_init.part.0>:
 8005d90:	b510      	push	{r4, lr}
 8005d92:	4b0b      	ldr	r3, [pc, #44]	@ (8005dc0 <global_stdio_init.part.0+0x30>)
 8005d94:	4c0b      	ldr	r4, [pc, #44]	@ (8005dc4 <global_stdio_init.part.0+0x34>)
 8005d96:	4a0c      	ldr	r2, [pc, #48]	@ (8005dc8 <global_stdio_init.part.0+0x38>)
 8005d98:	601a      	str	r2, [r3, #0]
 8005d9a:	4620      	mov	r0, r4
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	2104      	movs	r1, #4
 8005da0:	f7ff ff94 	bl	8005ccc <std>
 8005da4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005da8:	2201      	movs	r2, #1
 8005daa:	2109      	movs	r1, #9
 8005dac:	f7ff ff8e 	bl	8005ccc <std>
 8005db0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005db4:	2202      	movs	r2, #2
 8005db6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dba:	2112      	movs	r1, #18
 8005dbc:	f7ff bf86 	b.w	8005ccc <std>
 8005dc0:	20000468 	.word	0x20000468
 8005dc4:	20000330 	.word	0x20000330
 8005dc8:	08005d39 	.word	0x08005d39

08005dcc <__sfp_lock_acquire>:
 8005dcc:	4801      	ldr	r0, [pc, #4]	@ (8005dd4 <__sfp_lock_acquire+0x8>)
 8005dce:	f000 b912 	b.w	8005ff6 <__retarget_lock_acquire_recursive>
 8005dd2:	bf00      	nop
 8005dd4:	20000471 	.word	0x20000471

08005dd8 <__sfp_lock_release>:
 8005dd8:	4801      	ldr	r0, [pc, #4]	@ (8005de0 <__sfp_lock_release+0x8>)
 8005dda:	f000 b90d 	b.w	8005ff8 <__retarget_lock_release_recursive>
 8005dde:	bf00      	nop
 8005de0:	20000471 	.word	0x20000471

08005de4 <__sinit>:
 8005de4:	b510      	push	{r4, lr}
 8005de6:	4604      	mov	r4, r0
 8005de8:	f7ff fff0 	bl	8005dcc <__sfp_lock_acquire>
 8005dec:	6a23      	ldr	r3, [r4, #32]
 8005dee:	b11b      	cbz	r3, 8005df8 <__sinit+0x14>
 8005df0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005df4:	f7ff bff0 	b.w	8005dd8 <__sfp_lock_release>
 8005df8:	4b04      	ldr	r3, [pc, #16]	@ (8005e0c <__sinit+0x28>)
 8005dfa:	6223      	str	r3, [r4, #32]
 8005dfc:	4b04      	ldr	r3, [pc, #16]	@ (8005e10 <__sinit+0x2c>)
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d1f5      	bne.n	8005df0 <__sinit+0xc>
 8005e04:	f7ff ffc4 	bl	8005d90 <global_stdio_init.part.0>
 8005e08:	e7f2      	b.n	8005df0 <__sinit+0xc>
 8005e0a:	bf00      	nop
 8005e0c:	08005d51 	.word	0x08005d51
 8005e10:	20000468 	.word	0x20000468

08005e14 <_fwalk_sglue>:
 8005e14:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e18:	4607      	mov	r7, r0
 8005e1a:	4688      	mov	r8, r1
 8005e1c:	4614      	mov	r4, r2
 8005e1e:	2600      	movs	r6, #0
 8005e20:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e24:	f1b9 0901 	subs.w	r9, r9, #1
 8005e28:	d505      	bpl.n	8005e36 <_fwalk_sglue+0x22>
 8005e2a:	6824      	ldr	r4, [r4, #0]
 8005e2c:	2c00      	cmp	r4, #0
 8005e2e:	d1f7      	bne.n	8005e20 <_fwalk_sglue+0xc>
 8005e30:	4630      	mov	r0, r6
 8005e32:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e36:	89ab      	ldrh	r3, [r5, #12]
 8005e38:	2b01      	cmp	r3, #1
 8005e3a:	d907      	bls.n	8005e4c <_fwalk_sglue+0x38>
 8005e3c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e40:	3301      	adds	r3, #1
 8005e42:	d003      	beq.n	8005e4c <_fwalk_sglue+0x38>
 8005e44:	4629      	mov	r1, r5
 8005e46:	4638      	mov	r0, r7
 8005e48:	47c0      	blx	r8
 8005e4a:	4306      	orrs	r6, r0
 8005e4c:	3568      	adds	r5, #104	@ 0x68
 8005e4e:	e7e9      	b.n	8005e24 <_fwalk_sglue+0x10>

08005e50 <iprintf>:
 8005e50:	b40f      	push	{r0, r1, r2, r3}
 8005e52:	b507      	push	{r0, r1, r2, lr}
 8005e54:	4906      	ldr	r1, [pc, #24]	@ (8005e70 <iprintf+0x20>)
 8005e56:	ab04      	add	r3, sp, #16
 8005e58:	6808      	ldr	r0, [r1, #0]
 8005e5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e5e:	6881      	ldr	r1, [r0, #8]
 8005e60:	9301      	str	r3, [sp, #4]
 8005e62:	f001 fbc5 	bl	80075f0 <_vfiprintf_r>
 8005e66:	b003      	add	sp, #12
 8005e68:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e6c:	b004      	add	sp, #16
 8005e6e:	4770      	bx	lr
 8005e70:	20000018 	.word	0x20000018

08005e74 <__sread>:
 8005e74:	b510      	push	{r4, lr}
 8005e76:	460c      	mov	r4, r1
 8005e78:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e7c:	f000 f86c 	bl	8005f58 <_read_r>
 8005e80:	2800      	cmp	r0, #0
 8005e82:	bfab      	itete	ge
 8005e84:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e86:	89a3      	ldrhlt	r3, [r4, #12]
 8005e88:	181b      	addge	r3, r3, r0
 8005e8a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005e8e:	bfac      	ite	ge
 8005e90:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005e92:	81a3      	strhlt	r3, [r4, #12]
 8005e94:	bd10      	pop	{r4, pc}

08005e96 <__swrite>:
 8005e96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e9a:	461f      	mov	r7, r3
 8005e9c:	898b      	ldrh	r3, [r1, #12]
 8005e9e:	05db      	lsls	r3, r3, #23
 8005ea0:	4605      	mov	r5, r0
 8005ea2:	460c      	mov	r4, r1
 8005ea4:	4616      	mov	r6, r2
 8005ea6:	d505      	bpl.n	8005eb4 <__swrite+0x1e>
 8005ea8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eac:	2302      	movs	r3, #2
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f000 f840 	bl	8005f34 <_lseek_r>
 8005eb4:	89a3      	ldrh	r3, [r4, #12]
 8005eb6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ebe:	81a3      	strh	r3, [r4, #12]
 8005ec0:	4632      	mov	r2, r6
 8005ec2:	463b      	mov	r3, r7
 8005ec4:	4628      	mov	r0, r5
 8005ec6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005eca:	f000 b857 	b.w	8005f7c <_write_r>

08005ece <__sseek>:
 8005ece:	b510      	push	{r4, lr}
 8005ed0:	460c      	mov	r4, r1
 8005ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ed6:	f000 f82d 	bl	8005f34 <_lseek_r>
 8005eda:	1c43      	adds	r3, r0, #1
 8005edc:	89a3      	ldrh	r3, [r4, #12]
 8005ede:	bf15      	itete	ne
 8005ee0:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ee2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005ee6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005eea:	81a3      	strheq	r3, [r4, #12]
 8005eec:	bf18      	it	ne
 8005eee:	81a3      	strhne	r3, [r4, #12]
 8005ef0:	bd10      	pop	{r4, pc}

08005ef2 <__sclose>:
 8005ef2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ef6:	f000 b80d 	b.w	8005f14 <_close_r>

08005efa <memset>:
 8005efa:	4402      	add	r2, r0
 8005efc:	4603      	mov	r3, r0
 8005efe:	4293      	cmp	r3, r2
 8005f00:	d100      	bne.n	8005f04 <memset+0xa>
 8005f02:	4770      	bx	lr
 8005f04:	f803 1b01 	strb.w	r1, [r3], #1
 8005f08:	e7f9      	b.n	8005efe <memset+0x4>
	...

08005f0c <_localeconv_r>:
 8005f0c:	4800      	ldr	r0, [pc, #0]	@ (8005f10 <_localeconv_r+0x4>)
 8005f0e:	4770      	bx	lr
 8005f10:	20000158 	.word	0x20000158

08005f14 <_close_r>:
 8005f14:	b538      	push	{r3, r4, r5, lr}
 8005f16:	4d06      	ldr	r5, [pc, #24]	@ (8005f30 <_close_r+0x1c>)
 8005f18:	2300      	movs	r3, #0
 8005f1a:	4604      	mov	r4, r0
 8005f1c:	4608      	mov	r0, r1
 8005f1e:	602b      	str	r3, [r5, #0]
 8005f20:	f7fb fa48 	bl	80013b4 <_close>
 8005f24:	1c43      	adds	r3, r0, #1
 8005f26:	d102      	bne.n	8005f2e <_close_r+0x1a>
 8005f28:	682b      	ldr	r3, [r5, #0]
 8005f2a:	b103      	cbz	r3, 8005f2e <_close_r+0x1a>
 8005f2c:	6023      	str	r3, [r4, #0]
 8005f2e:	bd38      	pop	{r3, r4, r5, pc}
 8005f30:	2000046c 	.word	0x2000046c

08005f34 <_lseek_r>:
 8005f34:	b538      	push	{r3, r4, r5, lr}
 8005f36:	4d07      	ldr	r5, [pc, #28]	@ (8005f54 <_lseek_r+0x20>)
 8005f38:	4604      	mov	r4, r0
 8005f3a:	4608      	mov	r0, r1
 8005f3c:	4611      	mov	r1, r2
 8005f3e:	2200      	movs	r2, #0
 8005f40:	602a      	str	r2, [r5, #0]
 8005f42:	461a      	mov	r2, r3
 8005f44:	f7fb fa5d 	bl	8001402 <_lseek>
 8005f48:	1c43      	adds	r3, r0, #1
 8005f4a:	d102      	bne.n	8005f52 <_lseek_r+0x1e>
 8005f4c:	682b      	ldr	r3, [r5, #0]
 8005f4e:	b103      	cbz	r3, 8005f52 <_lseek_r+0x1e>
 8005f50:	6023      	str	r3, [r4, #0]
 8005f52:	bd38      	pop	{r3, r4, r5, pc}
 8005f54:	2000046c 	.word	0x2000046c

08005f58 <_read_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	4d07      	ldr	r5, [pc, #28]	@ (8005f78 <_read_r+0x20>)
 8005f5c:	4604      	mov	r4, r0
 8005f5e:	4608      	mov	r0, r1
 8005f60:	4611      	mov	r1, r2
 8005f62:	2200      	movs	r2, #0
 8005f64:	602a      	str	r2, [r5, #0]
 8005f66:	461a      	mov	r2, r3
 8005f68:	f7fb f9eb 	bl	8001342 <_read>
 8005f6c:	1c43      	adds	r3, r0, #1
 8005f6e:	d102      	bne.n	8005f76 <_read_r+0x1e>
 8005f70:	682b      	ldr	r3, [r5, #0]
 8005f72:	b103      	cbz	r3, 8005f76 <_read_r+0x1e>
 8005f74:	6023      	str	r3, [r4, #0]
 8005f76:	bd38      	pop	{r3, r4, r5, pc}
 8005f78:	2000046c 	.word	0x2000046c

08005f7c <_write_r>:
 8005f7c:	b538      	push	{r3, r4, r5, lr}
 8005f7e:	4d07      	ldr	r5, [pc, #28]	@ (8005f9c <_write_r+0x20>)
 8005f80:	4604      	mov	r4, r0
 8005f82:	4608      	mov	r0, r1
 8005f84:	4611      	mov	r1, r2
 8005f86:	2200      	movs	r2, #0
 8005f88:	602a      	str	r2, [r5, #0]
 8005f8a:	461a      	mov	r2, r3
 8005f8c:	f7fb f9f6 	bl	800137c <_write>
 8005f90:	1c43      	adds	r3, r0, #1
 8005f92:	d102      	bne.n	8005f9a <_write_r+0x1e>
 8005f94:	682b      	ldr	r3, [r5, #0]
 8005f96:	b103      	cbz	r3, 8005f9a <_write_r+0x1e>
 8005f98:	6023      	str	r3, [r4, #0]
 8005f9a:	bd38      	pop	{r3, r4, r5, pc}
 8005f9c:	2000046c 	.word	0x2000046c

08005fa0 <__errno>:
 8005fa0:	4b01      	ldr	r3, [pc, #4]	@ (8005fa8 <__errno+0x8>)
 8005fa2:	6818      	ldr	r0, [r3, #0]
 8005fa4:	4770      	bx	lr
 8005fa6:	bf00      	nop
 8005fa8:	20000018 	.word	0x20000018

08005fac <__libc_init_array>:
 8005fac:	b570      	push	{r4, r5, r6, lr}
 8005fae:	4d0d      	ldr	r5, [pc, #52]	@ (8005fe4 <__libc_init_array+0x38>)
 8005fb0:	4c0d      	ldr	r4, [pc, #52]	@ (8005fe8 <__libc_init_array+0x3c>)
 8005fb2:	1b64      	subs	r4, r4, r5
 8005fb4:	10a4      	asrs	r4, r4, #2
 8005fb6:	2600      	movs	r6, #0
 8005fb8:	42a6      	cmp	r6, r4
 8005fba:	d109      	bne.n	8005fd0 <__libc_init_array+0x24>
 8005fbc:	4d0b      	ldr	r5, [pc, #44]	@ (8005fec <__libc_init_array+0x40>)
 8005fbe:	4c0c      	ldr	r4, [pc, #48]	@ (8005ff0 <__libc_init_array+0x44>)
 8005fc0:	f001 fec0 	bl	8007d44 <_init>
 8005fc4:	1b64      	subs	r4, r4, r5
 8005fc6:	10a4      	asrs	r4, r4, #2
 8005fc8:	2600      	movs	r6, #0
 8005fca:	42a6      	cmp	r6, r4
 8005fcc:	d105      	bne.n	8005fda <__libc_init_array+0x2e>
 8005fce:	bd70      	pop	{r4, r5, r6, pc}
 8005fd0:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fd4:	4798      	blx	r3
 8005fd6:	3601      	adds	r6, #1
 8005fd8:	e7ee      	b.n	8005fb8 <__libc_init_array+0xc>
 8005fda:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fde:	4798      	blx	r3
 8005fe0:	3601      	adds	r6, #1
 8005fe2:	e7f2      	b.n	8005fca <__libc_init_array+0x1e>
 8005fe4:	08008148 	.word	0x08008148
 8005fe8:	08008148 	.word	0x08008148
 8005fec:	08008148 	.word	0x08008148
 8005ff0:	0800814c 	.word	0x0800814c

08005ff4 <__retarget_lock_init_recursive>:
 8005ff4:	4770      	bx	lr

08005ff6 <__retarget_lock_acquire_recursive>:
 8005ff6:	4770      	bx	lr

08005ff8 <__retarget_lock_release_recursive>:
 8005ff8:	4770      	bx	lr

08005ffa <quorem>:
 8005ffa:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ffe:	6903      	ldr	r3, [r0, #16]
 8006000:	690c      	ldr	r4, [r1, #16]
 8006002:	42a3      	cmp	r3, r4
 8006004:	4607      	mov	r7, r0
 8006006:	db7e      	blt.n	8006106 <quorem+0x10c>
 8006008:	3c01      	subs	r4, #1
 800600a:	f101 0814 	add.w	r8, r1, #20
 800600e:	00a3      	lsls	r3, r4, #2
 8006010:	f100 0514 	add.w	r5, r0, #20
 8006014:	9300      	str	r3, [sp, #0]
 8006016:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800601a:	9301      	str	r3, [sp, #4]
 800601c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006020:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006024:	3301      	adds	r3, #1
 8006026:	429a      	cmp	r2, r3
 8006028:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800602c:	fbb2 f6f3 	udiv	r6, r2, r3
 8006030:	d32e      	bcc.n	8006090 <quorem+0x96>
 8006032:	f04f 0a00 	mov.w	sl, #0
 8006036:	46c4      	mov	ip, r8
 8006038:	46ae      	mov	lr, r5
 800603a:	46d3      	mov	fp, sl
 800603c:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006040:	b298      	uxth	r0, r3
 8006042:	fb06 a000 	mla	r0, r6, r0, sl
 8006046:	0c02      	lsrs	r2, r0, #16
 8006048:	0c1b      	lsrs	r3, r3, #16
 800604a:	fb06 2303 	mla	r3, r6, r3, r2
 800604e:	f8de 2000 	ldr.w	r2, [lr]
 8006052:	b280      	uxth	r0, r0
 8006054:	b292      	uxth	r2, r2
 8006056:	1a12      	subs	r2, r2, r0
 8006058:	445a      	add	r2, fp
 800605a:	f8de 0000 	ldr.w	r0, [lr]
 800605e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006062:	b29b      	uxth	r3, r3
 8006064:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006068:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800606c:	b292      	uxth	r2, r2
 800606e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8006072:	45e1      	cmp	r9, ip
 8006074:	f84e 2b04 	str.w	r2, [lr], #4
 8006078:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800607c:	d2de      	bcs.n	800603c <quorem+0x42>
 800607e:	9b00      	ldr	r3, [sp, #0]
 8006080:	58eb      	ldr	r3, [r5, r3]
 8006082:	b92b      	cbnz	r3, 8006090 <quorem+0x96>
 8006084:	9b01      	ldr	r3, [sp, #4]
 8006086:	3b04      	subs	r3, #4
 8006088:	429d      	cmp	r5, r3
 800608a:	461a      	mov	r2, r3
 800608c:	d32f      	bcc.n	80060ee <quorem+0xf4>
 800608e:	613c      	str	r4, [r7, #16]
 8006090:	4638      	mov	r0, r7
 8006092:	f001 f97b 	bl	800738c <__mcmp>
 8006096:	2800      	cmp	r0, #0
 8006098:	db25      	blt.n	80060e6 <quorem+0xec>
 800609a:	4629      	mov	r1, r5
 800609c:	2000      	movs	r0, #0
 800609e:	f858 2b04 	ldr.w	r2, [r8], #4
 80060a2:	f8d1 c000 	ldr.w	ip, [r1]
 80060a6:	fa1f fe82 	uxth.w	lr, r2
 80060aa:	fa1f f38c 	uxth.w	r3, ip
 80060ae:	eba3 030e 	sub.w	r3, r3, lr
 80060b2:	4403      	add	r3, r0
 80060b4:	0c12      	lsrs	r2, r2, #16
 80060b6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80060ba:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80060be:	b29b      	uxth	r3, r3
 80060c0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80060c4:	45c1      	cmp	r9, r8
 80060c6:	f841 3b04 	str.w	r3, [r1], #4
 80060ca:	ea4f 4022 	mov.w	r0, r2, asr #16
 80060ce:	d2e6      	bcs.n	800609e <quorem+0xa4>
 80060d0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80060d4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80060d8:	b922      	cbnz	r2, 80060e4 <quorem+0xea>
 80060da:	3b04      	subs	r3, #4
 80060dc:	429d      	cmp	r5, r3
 80060de:	461a      	mov	r2, r3
 80060e0:	d30b      	bcc.n	80060fa <quorem+0x100>
 80060e2:	613c      	str	r4, [r7, #16]
 80060e4:	3601      	adds	r6, #1
 80060e6:	4630      	mov	r0, r6
 80060e8:	b003      	add	sp, #12
 80060ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060ee:	6812      	ldr	r2, [r2, #0]
 80060f0:	3b04      	subs	r3, #4
 80060f2:	2a00      	cmp	r2, #0
 80060f4:	d1cb      	bne.n	800608e <quorem+0x94>
 80060f6:	3c01      	subs	r4, #1
 80060f8:	e7c6      	b.n	8006088 <quorem+0x8e>
 80060fa:	6812      	ldr	r2, [r2, #0]
 80060fc:	3b04      	subs	r3, #4
 80060fe:	2a00      	cmp	r2, #0
 8006100:	d1ef      	bne.n	80060e2 <quorem+0xe8>
 8006102:	3c01      	subs	r4, #1
 8006104:	e7ea      	b.n	80060dc <quorem+0xe2>
 8006106:	2000      	movs	r0, #0
 8006108:	e7ee      	b.n	80060e8 <quorem+0xee>
 800610a:	0000      	movs	r0, r0
 800610c:	0000      	movs	r0, r0
	...

08006110 <_dtoa_r>:
 8006110:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006114:	69c7      	ldr	r7, [r0, #28]
 8006116:	b099      	sub	sp, #100	@ 0x64
 8006118:	ed8d 0b02 	vstr	d0, [sp, #8]
 800611c:	ec55 4b10 	vmov	r4, r5, d0
 8006120:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006122:	9109      	str	r1, [sp, #36]	@ 0x24
 8006124:	4683      	mov	fp, r0
 8006126:	920e      	str	r2, [sp, #56]	@ 0x38
 8006128:	9313      	str	r3, [sp, #76]	@ 0x4c
 800612a:	b97f      	cbnz	r7, 800614c <_dtoa_r+0x3c>
 800612c:	2010      	movs	r0, #16
 800612e:	f000 fdfd 	bl	8006d2c <malloc>
 8006132:	4602      	mov	r2, r0
 8006134:	f8cb 001c 	str.w	r0, [fp, #28]
 8006138:	b920      	cbnz	r0, 8006144 <_dtoa_r+0x34>
 800613a:	4ba7      	ldr	r3, [pc, #668]	@ (80063d8 <_dtoa_r+0x2c8>)
 800613c:	21ef      	movs	r1, #239	@ 0xef
 800613e:	48a7      	ldr	r0, [pc, #668]	@ (80063dc <_dtoa_r+0x2cc>)
 8006140:	f001 fccc 	bl	8007adc <__assert_func>
 8006144:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006148:	6007      	str	r7, [r0, #0]
 800614a:	60c7      	str	r7, [r0, #12]
 800614c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006150:	6819      	ldr	r1, [r3, #0]
 8006152:	b159      	cbz	r1, 800616c <_dtoa_r+0x5c>
 8006154:	685a      	ldr	r2, [r3, #4]
 8006156:	604a      	str	r2, [r1, #4]
 8006158:	2301      	movs	r3, #1
 800615a:	4093      	lsls	r3, r2
 800615c:	608b      	str	r3, [r1, #8]
 800615e:	4658      	mov	r0, fp
 8006160:	f000 feda 	bl	8006f18 <_Bfree>
 8006164:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006168:	2200      	movs	r2, #0
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	1e2b      	subs	r3, r5, #0
 800616e:	bfb9      	ittee	lt
 8006170:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8006174:	9303      	strlt	r3, [sp, #12]
 8006176:	2300      	movge	r3, #0
 8006178:	6033      	strge	r3, [r6, #0]
 800617a:	9f03      	ldr	r7, [sp, #12]
 800617c:	4b98      	ldr	r3, [pc, #608]	@ (80063e0 <_dtoa_r+0x2d0>)
 800617e:	bfbc      	itt	lt
 8006180:	2201      	movlt	r2, #1
 8006182:	6032      	strlt	r2, [r6, #0]
 8006184:	43bb      	bics	r3, r7
 8006186:	d112      	bne.n	80061ae <_dtoa_r+0x9e>
 8006188:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800618a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800618e:	6013      	str	r3, [r2, #0]
 8006190:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8006194:	4323      	orrs	r3, r4
 8006196:	f000 854d 	beq.w	8006c34 <_dtoa_r+0xb24>
 800619a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800619c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 80063f4 <_dtoa_r+0x2e4>
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	f000 854f 	beq.w	8006c44 <_dtoa_r+0xb34>
 80061a6:	f10a 0303 	add.w	r3, sl, #3
 80061aa:	f000 bd49 	b.w	8006c40 <_dtoa_r+0xb30>
 80061ae:	ed9d 7b02 	vldr	d7, [sp, #8]
 80061b2:	2200      	movs	r2, #0
 80061b4:	ec51 0b17 	vmov	r0, r1, d7
 80061b8:	2300      	movs	r3, #0
 80061ba:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80061be:	f7fa fc8b 	bl	8000ad8 <__aeabi_dcmpeq>
 80061c2:	4680      	mov	r8, r0
 80061c4:	b158      	cbz	r0, 80061de <_dtoa_r+0xce>
 80061c6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80061c8:	2301      	movs	r3, #1
 80061ca:	6013      	str	r3, [r2, #0]
 80061cc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80061ce:	b113      	cbz	r3, 80061d6 <_dtoa_r+0xc6>
 80061d0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80061d2:	4b84      	ldr	r3, [pc, #528]	@ (80063e4 <_dtoa_r+0x2d4>)
 80061d4:	6013      	str	r3, [r2, #0]
 80061d6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 80063f8 <_dtoa_r+0x2e8>
 80061da:	f000 bd33 	b.w	8006c44 <_dtoa_r+0xb34>
 80061de:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80061e2:	aa16      	add	r2, sp, #88	@ 0x58
 80061e4:	a917      	add	r1, sp, #92	@ 0x5c
 80061e6:	4658      	mov	r0, fp
 80061e8:	f001 f980 	bl	80074ec <__d2b>
 80061ec:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80061f0:	4681      	mov	r9, r0
 80061f2:	2e00      	cmp	r6, #0
 80061f4:	d077      	beq.n	80062e6 <_dtoa_r+0x1d6>
 80061f6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80061f8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80061fc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006200:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006204:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006208:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800620c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006210:	4619      	mov	r1, r3
 8006212:	2200      	movs	r2, #0
 8006214:	4b74      	ldr	r3, [pc, #464]	@ (80063e8 <_dtoa_r+0x2d8>)
 8006216:	f7fa f83f 	bl	8000298 <__aeabi_dsub>
 800621a:	a369      	add	r3, pc, #420	@ (adr r3, 80063c0 <_dtoa_r+0x2b0>)
 800621c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006220:	f7fa f9f2 	bl	8000608 <__aeabi_dmul>
 8006224:	a368      	add	r3, pc, #416	@ (adr r3, 80063c8 <_dtoa_r+0x2b8>)
 8006226:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622a:	f7fa f837 	bl	800029c <__adddf3>
 800622e:	4604      	mov	r4, r0
 8006230:	4630      	mov	r0, r6
 8006232:	460d      	mov	r5, r1
 8006234:	f7fa f97e 	bl	8000534 <__aeabi_i2d>
 8006238:	a365      	add	r3, pc, #404	@ (adr r3, 80063d0 <_dtoa_r+0x2c0>)
 800623a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800623e:	f7fa f9e3 	bl	8000608 <__aeabi_dmul>
 8006242:	4602      	mov	r2, r0
 8006244:	460b      	mov	r3, r1
 8006246:	4620      	mov	r0, r4
 8006248:	4629      	mov	r1, r5
 800624a:	f7fa f827 	bl	800029c <__adddf3>
 800624e:	4604      	mov	r4, r0
 8006250:	460d      	mov	r5, r1
 8006252:	f7fa fc89 	bl	8000b68 <__aeabi_d2iz>
 8006256:	2200      	movs	r2, #0
 8006258:	4607      	mov	r7, r0
 800625a:	2300      	movs	r3, #0
 800625c:	4620      	mov	r0, r4
 800625e:	4629      	mov	r1, r5
 8006260:	f7fa fc44 	bl	8000aec <__aeabi_dcmplt>
 8006264:	b140      	cbz	r0, 8006278 <_dtoa_r+0x168>
 8006266:	4638      	mov	r0, r7
 8006268:	f7fa f964 	bl	8000534 <__aeabi_i2d>
 800626c:	4622      	mov	r2, r4
 800626e:	462b      	mov	r3, r5
 8006270:	f7fa fc32 	bl	8000ad8 <__aeabi_dcmpeq>
 8006274:	b900      	cbnz	r0, 8006278 <_dtoa_r+0x168>
 8006276:	3f01      	subs	r7, #1
 8006278:	2f16      	cmp	r7, #22
 800627a:	d851      	bhi.n	8006320 <_dtoa_r+0x210>
 800627c:	4b5b      	ldr	r3, [pc, #364]	@ (80063ec <_dtoa_r+0x2dc>)
 800627e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006282:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006286:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800628a:	f7fa fc2f 	bl	8000aec <__aeabi_dcmplt>
 800628e:	2800      	cmp	r0, #0
 8006290:	d048      	beq.n	8006324 <_dtoa_r+0x214>
 8006292:	3f01      	subs	r7, #1
 8006294:	2300      	movs	r3, #0
 8006296:	9312      	str	r3, [sp, #72]	@ 0x48
 8006298:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800629a:	1b9b      	subs	r3, r3, r6
 800629c:	1e5a      	subs	r2, r3, #1
 800629e:	bf44      	itt	mi
 80062a0:	f1c3 0801 	rsbmi	r8, r3, #1
 80062a4:	2300      	movmi	r3, #0
 80062a6:	9208      	str	r2, [sp, #32]
 80062a8:	bf54      	ite	pl
 80062aa:	f04f 0800 	movpl.w	r8, #0
 80062ae:	9308      	strmi	r3, [sp, #32]
 80062b0:	2f00      	cmp	r7, #0
 80062b2:	db39      	blt.n	8006328 <_dtoa_r+0x218>
 80062b4:	9b08      	ldr	r3, [sp, #32]
 80062b6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80062b8:	443b      	add	r3, r7
 80062ba:	9308      	str	r3, [sp, #32]
 80062bc:	2300      	movs	r3, #0
 80062be:	930a      	str	r3, [sp, #40]	@ 0x28
 80062c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062c2:	2b09      	cmp	r3, #9
 80062c4:	d864      	bhi.n	8006390 <_dtoa_r+0x280>
 80062c6:	2b05      	cmp	r3, #5
 80062c8:	bfc4      	itt	gt
 80062ca:	3b04      	subgt	r3, #4
 80062cc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80062ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80062d0:	f1a3 0302 	sub.w	r3, r3, #2
 80062d4:	bfcc      	ite	gt
 80062d6:	2400      	movgt	r4, #0
 80062d8:	2401      	movle	r4, #1
 80062da:	2b03      	cmp	r3, #3
 80062dc:	d863      	bhi.n	80063a6 <_dtoa_r+0x296>
 80062de:	e8df f003 	tbb	[pc, r3]
 80062e2:	372a      	.short	0x372a
 80062e4:	5535      	.short	0x5535
 80062e6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 80062ea:	441e      	add	r6, r3
 80062ec:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 80062f0:	2b20      	cmp	r3, #32
 80062f2:	bfc1      	itttt	gt
 80062f4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80062f8:	409f      	lslgt	r7, r3
 80062fa:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80062fe:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006302:	bfd6      	itet	le
 8006304:	f1c3 0320 	rsble	r3, r3, #32
 8006308:	ea47 0003 	orrgt.w	r0, r7, r3
 800630c:	fa04 f003 	lslle.w	r0, r4, r3
 8006310:	f7fa f900 	bl	8000514 <__aeabi_ui2d>
 8006314:	2201      	movs	r2, #1
 8006316:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800631a:	3e01      	subs	r6, #1
 800631c:	9214      	str	r2, [sp, #80]	@ 0x50
 800631e:	e777      	b.n	8006210 <_dtoa_r+0x100>
 8006320:	2301      	movs	r3, #1
 8006322:	e7b8      	b.n	8006296 <_dtoa_r+0x186>
 8006324:	9012      	str	r0, [sp, #72]	@ 0x48
 8006326:	e7b7      	b.n	8006298 <_dtoa_r+0x188>
 8006328:	427b      	negs	r3, r7
 800632a:	930a      	str	r3, [sp, #40]	@ 0x28
 800632c:	2300      	movs	r3, #0
 800632e:	eba8 0807 	sub.w	r8, r8, r7
 8006332:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006334:	e7c4      	b.n	80062c0 <_dtoa_r+0x1b0>
 8006336:	2300      	movs	r3, #0
 8006338:	930b      	str	r3, [sp, #44]	@ 0x2c
 800633a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800633c:	2b00      	cmp	r3, #0
 800633e:	dc35      	bgt.n	80063ac <_dtoa_r+0x29c>
 8006340:	2301      	movs	r3, #1
 8006342:	9300      	str	r3, [sp, #0]
 8006344:	9307      	str	r3, [sp, #28]
 8006346:	461a      	mov	r2, r3
 8006348:	920e      	str	r2, [sp, #56]	@ 0x38
 800634a:	e00b      	b.n	8006364 <_dtoa_r+0x254>
 800634c:	2301      	movs	r3, #1
 800634e:	e7f3      	b.n	8006338 <_dtoa_r+0x228>
 8006350:	2300      	movs	r3, #0
 8006352:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006354:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006356:	18fb      	adds	r3, r7, r3
 8006358:	9300      	str	r3, [sp, #0]
 800635a:	3301      	adds	r3, #1
 800635c:	2b01      	cmp	r3, #1
 800635e:	9307      	str	r3, [sp, #28]
 8006360:	bfb8      	it	lt
 8006362:	2301      	movlt	r3, #1
 8006364:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006368:	2100      	movs	r1, #0
 800636a:	2204      	movs	r2, #4
 800636c:	f102 0514 	add.w	r5, r2, #20
 8006370:	429d      	cmp	r5, r3
 8006372:	d91f      	bls.n	80063b4 <_dtoa_r+0x2a4>
 8006374:	6041      	str	r1, [r0, #4]
 8006376:	4658      	mov	r0, fp
 8006378:	f000 fd8e 	bl	8006e98 <_Balloc>
 800637c:	4682      	mov	sl, r0
 800637e:	2800      	cmp	r0, #0
 8006380:	d13c      	bne.n	80063fc <_dtoa_r+0x2ec>
 8006382:	4b1b      	ldr	r3, [pc, #108]	@ (80063f0 <_dtoa_r+0x2e0>)
 8006384:	4602      	mov	r2, r0
 8006386:	f240 11af 	movw	r1, #431	@ 0x1af
 800638a:	e6d8      	b.n	800613e <_dtoa_r+0x2e>
 800638c:	2301      	movs	r3, #1
 800638e:	e7e0      	b.n	8006352 <_dtoa_r+0x242>
 8006390:	2401      	movs	r4, #1
 8006392:	2300      	movs	r3, #0
 8006394:	9309      	str	r3, [sp, #36]	@ 0x24
 8006396:	940b      	str	r4, [sp, #44]	@ 0x2c
 8006398:	f04f 33ff 	mov.w	r3, #4294967295
 800639c:	9300      	str	r3, [sp, #0]
 800639e:	9307      	str	r3, [sp, #28]
 80063a0:	2200      	movs	r2, #0
 80063a2:	2312      	movs	r3, #18
 80063a4:	e7d0      	b.n	8006348 <_dtoa_r+0x238>
 80063a6:	2301      	movs	r3, #1
 80063a8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80063aa:	e7f5      	b.n	8006398 <_dtoa_r+0x288>
 80063ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063ae:	9300      	str	r3, [sp, #0]
 80063b0:	9307      	str	r3, [sp, #28]
 80063b2:	e7d7      	b.n	8006364 <_dtoa_r+0x254>
 80063b4:	3101      	adds	r1, #1
 80063b6:	0052      	lsls	r2, r2, #1
 80063b8:	e7d8      	b.n	800636c <_dtoa_r+0x25c>
 80063ba:	bf00      	nop
 80063bc:	f3af 8000 	nop.w
 80063c0:	636f4361 	.word	0x636f4361
 80063c4:	3fd287a7 	.word	0x3fd287a7
 80063c8:	8b60c8b3 	.word	0x8b60c8b3
 80063cc:	3fc68a28 	.word	0x3fc68a28
 80063d0:	509f79fb 	.word	0x509f79fb
 80063d4:	3fd34413 	.word	0x3fd34413
 80063d8:	08007e11 	.word	0x08007e11
 80063dc:	08007e28 	.word	0x08007e28
 80063e0:	7ff00000 	.word	0x7ff00000
 80063e4:	08007de1 	.word	0x08007de1
 80063e8:	3ff80000 	.word	0x3ff80000
 80063ec:	08007f20 	.word	0x08007f20
 80063f0:	08007e80 	.word	0x08007e80
 80063f4:	08007e0d 	.word	0x08007e0d
 80063f8:	08007de0 	.word	0x08007de0
 80063fc:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006400:	6018      	str	r0, [r3, #0]
 8006402:	9b07      	ldr	r3, [sp, #28]
 8006404:	2b0e      	cmp	r3, #14
 8006406:	f200 80a4 	bhi.w	8006552 <_dtoa_r+0x442>
 800640a:	2c00      	cmp	r4, #0
 800640c:	f000 80a1 	beq.w	8006552 <_dtoa_r+0x442>
 8006410:	2f00      	cmp	r7, #0
 8006412:	dd33      	ble.n	800647c <_dtoa_r+0x36c>
 8006414:	4bad      	ldr	r3, [pc, #692]	@ (80066cc <_dtoa_r+0x5bc>)
 8006416:	f007 020f 	and.w	r2, r7, #15
 800641a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800641e:	ed93 7b00 	vldr	d7, [r3]
 8006422:	05f8      	lsls	r0, r7, #23
 8006424:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006428:	ea4f 1427 	mov.w	r4, r7, asr #4
 800642c:	d516      	bpl.n	800645c <_dtoa_r+0x34c>
 800642e:	4ba8      	ldr	r3, [pc, #672]	@ (80066d0 <_dtoa_r+0x5c0>)
 8006430:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006434:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006438:	f7fa fa10 	bl	800085c <__aeabi_ddiv>
 800643c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006440:	f004 040f 	and.w	r4, r4, #15
 8006444:	2603      	movs	r6, #3
 8006446:	4da2      	ldr	r5, [pc, #648]	@ (80066d0 <_dtoa_r+0x5c0>)
 8006448:	b954      	cbnz	r4, 8006460 <_dtoa_r+0x350>
 800644a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800644e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006452:	f7fa fa03 	bl	800085c <__aeabi_ddiv>
 8006456:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800645a:	e028      	b.n	80064ae <_dtoa_r+0x39e>
 800645c:	2602      	movs	r6, #2
 800645e:	e7f2      	b.n	8006446 <_dtoa_r+0x336>
 8006460:	07e1      	lsls	r1, r4, #31
 8006462:	d508      	bpl.n	8006476 <_dtoa_r+0x366>
 8006464:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006468:	e9d5 2300 	ldrd	r2, r3, [r5]
 800646c:	f7fa f8cc 	bl	8000608 <__aeabi_dmul>
 8006470:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006474:	3601      	adds	r6, #1
 8006476:	1064      	asrs	r4, r4, #1
 8006478:	3508      	adds	r5, #8
 800647a:	e7e5      	b.n	8006448 <_dtoa_r+0x338>
 800647c:	f000 80d2 	beq.w	8006624 <_dtoa_r+0x514>
 8006480:	427c      	negs	r4, r7
 8006482:	4b92      	ldr	r3, [pc, #584]	@ (80066cc <_dtoa_r+0x5bc>)
 8006484:	4d92      	ldr	r5, [pc, #584]	@ (80066d0 <_dtoa_r+0x5c0>)
 8006486:	f004 020f 	and.w	r2, r4, #15
 800648a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800648e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006492:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006496:	f7fa f8b7 	bl	8000608 <__aeabi_dmul>
 800649a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800649e:	1124      	asrs	r4, r4, #4
 80064a0:	2300      	movs	r3, #0
 80064a2:	2602      	movs	r6, #2
 80064a4:	2c00      	cmp	r4, #0
 80064a6:	f040 80b2 	bne.w	800660e <_dtoa_r+0x4fe>
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d1d3      	bne.n	8006456 <_dtoa_r+0x346>
 80064ae:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80064b0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80064b4:	2b00      	cmp	r3, #0
 80064b6:	f000 80b7 	beq.w	8006628 <_dtoa_r+0x518>
 80064ba:	4b86      	ldr	r3, [pc, #536]	@ (80066d4 <_dtoa_r+0x5c4>)
 80064bc:	2200      	movs	r2, #0
 80064be:	4620      	mov	r0, r4
 80064c0:	4629      	mov	r1, r5
 80064c2:	f7fa fb13 	bl	8000aec <__aeabi_dcmplt>
 80064c6:	2800      	cmp	r0, #0
 80064c8:	f000 80ae 	beq.w	8006628 <_dtoa_r+0x518>
 80064cc:	9b07      	ldr	r3, [sp, #28]
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	f000 80aa 	beq.w	8006628 <_dtoa_r+0x518>
 80064d4:	9b00      	ldr	r3, [sp, #0]
 80064d6:	2b00      	cmp	r3, #0
 80064d8:	dd37      	ble.n	800654a <_dtoa_r+0x43a>
 80064da:	1e7b      	subs	r3, r7, #1
 80064dc:	9304      	str	r3, [sp, #16]
 80064de:	4620      	mov	r0, r4
 80064e0:	4b7d      	ldr	r3, [pc, #500]	@ (80066d8 <_dtoa_r+0x5c8>)
 80064e2:	2200      	movs	r2, #0
 80064e4:	4629      	mov	r1, r5
 80064e6:	f7fa f88f 	bl	8000608 <__aeabi_dmul>
 80064ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80064ee:	9c00      	ldr	r4, [sp, #0]
 80064f0:	3601      	adds	r6, #1
 80064f2:	4630      	mov	r0, r6
 80064f4:	f7fa f81e 	bl	8000534 <__aeabi_i2d>
 80064f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80064fc:	f7fa f884 	bl	8000608 <__aeabi_dmul>
 8006500:	4b76      	ldr	r3, [pc, #472]	@ (80066dc <_dtoa_r+0x5cc>)
 8006502:	2200      	movs	r2, #0
 8006504:	f7f9 feca 	bl	800029c <__adddf3>
 8006508:	4605      	mov	r5, r0
 800650a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800650e:	2c00      	cmp	r4, #0
 8006510:	f040 808d 	bne.w	800662e <_dtoa_r+0x51e>
 8006514:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006518:	4b71      	ldr	r3, [pc, #452]	@ (80066e0 <_dtoa_r+0x5d0>)
 800651a:	2200      	movs	r2, #0
 800651c:	f7f9 febc 	bl	8000298 <__aeabi_dsub>
 8006520:	4602      	mov	r2, r0
 8006522:	460b      	mov	r3, r1
 8006524:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006528:	462a      	mov	r2, r5
 800652a:	4633      	mov	r3, r6
 800652c:	f7fa fafc 	bl	8000b28 <__aeabi_dcmpgt>
 8006530:	2800      	cmp	r0, #0
 8006532:	f040 828b 	bne.w	8006a4c <_dtoa_r+0x93c>
 8006536:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800653a:	462a      	mov	r2, r5
 800653c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006540:	f7fa fad4 	bl	8000aec <__aeabi_dcmplt>
 8006544:	2800      	cmp	r0, #0
 8006546:	f040 8128 	bne.w	800679a <_dtoa_r+0x68a>
 800654a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800654e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006552:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006554:	2b00      	cmp	r3, #0
 8006556:	f2c0 815a 	blt.w	800680e <_dtoa_r+0x6fe>
 800655a:	2f0e      	cmp	r7, #14
 800655c:	f300 8157 	bgt.w	800680e <_dtoa_r+0x6fe>
 8006560:	4b5a      	ldr	r3, [pc, #360]	@ (80066cc <_dtoa_r+0x5bc>)
 8006562:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006566:	ed93 7b00 	vldr	d7, [r3]
 800656a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800656c:	2b00      	cmp	r3, #0
 800656e:	ed8d 7b00 	vstr	d7, [sp]
 8006572:	da03      	bge.n	800657c <_dtoa_r+0x46c>
 8006574:	9b07      	ldr	r3, [sp, #28]
 8006576:	2b00      	cmp	r3, #0
 8006578:	f340 8101 	ble.w	800677e <_dtoa_r+0x66e>
 800657c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006580:	4656      	mov	r6, sl
 8006582:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006586:	4620      	mov	r0, r4
 8006588:	4629      	mov	r1, r5
 800658a:	f7fa f967 	bl	800085c <__aeabi_ddiv>
 800658e:	f7fa faeb 	bl	8000b68 <__aeabi_d2iz>
 8006592:	4680      	mov	r8, r0
 8006594:	f7f9 ffce 	bl	8000534 <__aeabi_i2d>
 8006598:	e9dd 2300 	ldrd	r2, r3, [sp]
 800659c:	f7fa f834 	bl	8000608 <__aeabi_dmul>
 80065a0:	4602      	mov	r2, r0
 80065a2:	460b      	mov	r3, r1
 80065a4:	4620      	mov	r0, r4
 80065a6:	4629      	mov	r1, r5
 80065a8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80065ac:	f7f9 fe74 	bl	8000298 <__aeabi_dsub>
 80065b0:	f806 4b01 	strb.w	r4, [r6], #1
 80065b4:	9d07      	ldr	r5, [sp, #28]
 80065b6:	eba6 040a 	sub.w	r4, r6, sl
 80065ba:	42a5      	cmp	r5, r4
 80065bc:	4602      	mov	r2, r0
 80065be:	460b      	mov	r3, r1
 80065c0:	f040 8117 	bne.w	80067f2 <_dtoa_r+0x6e2>
 80065c4:	f7f9 fe6a 	bl	800029c <__adddf3>
 80065c8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065cc:	4604      	mov	r4, r0
 80065ce:	460d      	mov	r5, r1
 80065d0:	f7fa faaa 	bl	8000b28 <__aeabi_dcmpgt>
 80065d4:	2800      	cmp	r0, #0
 80065d6:	f040 80f9 	bne.w	80067cc <_dtoa_r+0x6bc>
 80065da:	e9dd 2300 	ldrd	r2, r3, [sp]
 80065de:	4620      	mov	r0, r4
 80065e0:	4629      	mov	r1, r5
 80065e2:	f7fa fa79 	bl	8000ad8 <__aeabi_dcmpeq>
 80065e6:	b118      	cbz	r0, 80065f0 <_dtoa_r+0x4e0>
 80065e8:	f018 0f01 	tst.w	r8, #1
 80065ec:	f040 80ee 	bne.w	80067cc <_dtoa_r+0x6bc>
 80065f0:	4649      	mov	r1, r9
 80065f2:	4658      	mov	r0, fp
 80065f4:	f000 fc90 	bl	8006f18 <_Bfree>
 80065f8:	2300      	movs	r3, #0
 80065fa:	7033      	strb	r3, [r6, #0]
 80065fc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80065fe:	3701      	adds	r7, #1
 8006600:	601f      	str	r7, [r3, #0]
 8006602:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006604:	2b00      	cmp	r3, #0
 8006606:	f000 831d 	beq.w	8006c44 <_dtoa_r+0xb34>
 800660a:	601e      	str	r6, [r3, #0]
 800660c:	e31a      	b.n	8006c44 <_dtoa_r+0xb34>
 800660e:	07e2      	lsls	r2, r4, #31
 8006610:	d505      	bpl.n	800661e <_dtoa_r+0x50e>
 8006612:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006616:	f7f9 fff7 	bl	8000608 <__aeabi_dmul>
 800661a:	3601      	adds	r6, #1
 800661c:	2301      	movs	r3, #1
 800661e:	1064      	asrs	r4, r4, #1
 8006620:	3508      	adds	r5, #8
 8006622:	e73f      	b.n	80064a4 <_dtoa_r+0x394>
 8006624:	2602      	movs	r6, #2
 8006626:	e742      	b.n	80064ae <_dtoa_r+0x39e>
 8006628:	9c07      	ldr	r4, [sp, #28]
 800662a:	9704      	str	r7, [sp, #16]
 800662c:	e761      	b.n	80064f2 <_dtoa_r+0x3e2>
 800662e:	4b27      	ldr	r3, [pc, #156]	@ (80066cc <_dtoa_r+0x5bc>)
 8006630:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006632:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006636:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800663a:	4454      	add	r4, sl
 800663c:	2900      	cmp	r1, #0
 800663e:	d053      	beq.n	80066e8 <_dtoa_r+0x5d8>
 8006640:	4928      	ldr	r1, [pc, #160]	@ (80066e4 <_dtoa_r+0x5d4>)
 8006642:	2000      	movs	r0, #0
 8006644:	f7fa f90a 	bl	800085c <__aeabi_ddiv>
 8006648:	4633      	mov	r3, r6
 800664a:	462a      	mov	r2, r5
 800664c:	f7f9 fe24 	bl	8000298 <__aeabi_dsub>
 8006650:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006654:	4656      	mov	r6, sl
 8006656:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800665a:	f7fa fa85 	bl	8000b68 <__aeabi_d2iz>
 800665e:	4605      	mov	r5, r0
 8006660:	f7f9 ff68 	bl	8000534 <__aeabi_i2d>
 8006664:	4602      	mov	r2, r0
 8006666:	460b      	mov	r3, r1
 8006668:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800666c:	f7f9 fe14 	bl	8000298 <__aeabi_dsub>
 8006670:	3530      	adds	r5, #48	@ 0x30
 8006672:	4602      	mov	r2, r0
 8006674:	460b      	mov	r3, r1
 8006676:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800667a:	f806 5b01 	strb.w	r5, [r6], #1
 800667e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006682:	f7fa fa33 	bl	8000aec <__aeabi_dcmplt>
 8006686:	2800      	cmp	r0, #0
 8006688:	d171      	bne.n	800676e <_dtoa_r+0x65e>
 800668a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800668e:	4911      	ldr	r1, [pc, #68]	@ (80066d4 <_dtoa_r+0x5c4>)
 8006690:	2000      	movs	r0, #0
 8006692:	f7f9 fe01 	bl	8000298 <__aeabi_dsub>
 8006696:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800669a:	f7fa fa27 	bl	8000aec <__aeabi_dcmplt>
 800669e:	2800      	cmp	r0, #0
 80066a0:	f040 8095 	bne.w	80067ce <_dtoa_r+0x6be>
 80066a4:	42a6      	cmp	r6, r4
 80066a6:	f43f af50 	beq.w	800654a <_dtoa_r+0x43a>
 80066aa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80066ae:	4b0a      	ldr	r3, [pc, #40]	@ (80066d8 <_dtoa_r+0x5c8>)
 80066b0:	2200      	movs	r2, #0
 80066b2:	f7f9 ffa9 	bl	8000608 <__aeabi_dmul>
 80066b6:	4b08      	ldr	r3, [pc, #32]	@ (80066d8 <_dtoa_r+0x5c8>)
 80066b8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066bc:	2200      	movs	r2, #0
 80066be:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066c2:	f7f9 ffa1 	bl	8000608 <__aeabi_dmul>
 80066c6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80066ca:	e7c4      	b.n	8006656 <_dtoa_r+0x546>
 80066cc:	08007f20 	.word	0x08007f20
 80066d0:	08007ef8 	.word	0x08007ef8
 80066d4:	3ff00000 	.word	0x3ff00000
 80066d8:	40240000 	.word	0x40240000
 80066dc:	401c0000 	.word	0x401c0000
 80066e0:	40140000 	.word	0x40140000
 80066e4:	3fe00000 	.word	0x3fe00000
 80066e8:	4631      	mov	r1, r6
 80066ea:	4628      	mov	r0, r5
 80066ec:	f7f9 ff8c 	bl	8000608 <__aeabi_dmul>
 80066f0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80066f4:	9415      	str	r4, [sp, #84]	@ 0x54
 80066f6:	4656      	mov	r6, sl
 80066f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80066fc:	f7fa fa34 	bl	8000b68 <__aeabi_d2iz>
 8006700:	4605      	mov	r5, r0
 8006702:	f7f9 ff17 	bl	8000534 <__aeabi_i2d>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800670e:	f7f9 fdc3 	bl	8000298 <__aeabi_dsub>
 8006712:	3530      	adds	r5, #48	@ 0x30
 8006714:	f806 5b01 	strb.w	r5, [r6], #1
 8006718:	4602      	mov	r2, r0
 800671a:	460b      	mov	r3, r1
 800671c:	42a6      	cmp	r6, r4
 800671e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006722:	f04f 0200 	mov.w	r2, #0
 8006726:	d124      	bne.n	8006772 <_dtoa_r+0x662>
 8006728:	4bac      	ldr	r3, [pc, #688]	@ (80069dc <_dtoa_r+0x8cc>)
 800672a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800672e:	f7f9 fdb5 	bl	800029c <__adddf3>
 8006732:	4602      	mov	r2, r0
 8006734:	460b      	mov	r3, r1
 8006736:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800673a:	f7fa f9f5 	bl	8000b28 <__aeabi_dcmpgt>
 800673e:	2800      	cmp	r0, #0
 8006740:	d145      	bne.n	80067ce <_dtoa_r+0x6be>
 8006742:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006746:	49a5      	ldr	r1, [pc, #660]	@ (80069dc <_dtoa_r+0x8cc>)
 8006748:	2000      	movs	r0, #0
 800674a:	f7f9 fda5 	bl	8000298 <__aeabi_dsub>
 800674e:	4602      	mov	r2, r0
 8006750:	460b      	mov	r3, r1
 8006752:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006756:	f7fa f9c9 	bl	8000aec <__aeabi_dcmplt>
 800675a:	2800      	cmp	r0, #0
 800675c:	f43f aef5 	beq.w	800654a <_dtoa_r+0x43a>
 8006760:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006762:	1e73      	subs	r3, r6, #1
 8006764:	9315      	str	r3, [sp, #84]	@ 0x54
 8006766:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800676a:	2b30      	cmp	r3, #48	@ 0x30
 800676c:	d0f8      	beq.n	8006760 <_dtoa_r+0x650>
 800676e:	9f04      	ldr	r7, [sp, #16]
 8006770:	e73e      	b.n	80065f0 <_dtoa_r+0x4e0>
 8006772:	4b9b      	ldr	r3, [pc, #620]	@ (80069e0 <_dtoa_r+0x8d0>)
 8006774:	f7f9 ff48 	bl	8000608 <__aeabi_dmul>
 8006778:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800677c:	e7bc      	b.n	80066f8 <_dtoa_r+0x5e8>
 800677e:	d10c      	bne.n	800679a <_dtoa_r+0x68a>
 8006780:	4b98      	ldr	r3, [pc, #608]	@ (80069e4 <_dtoa_r+0x8d4>)
 8006782:	2200      	movs	r2, #0
 8006784:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006788:	f7f9 ff3e 	bl	8000608 <__aeabi_dmul>
 800678c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006790:	f7fa f9c0 	bl	8000b14 <__aeabi_dcmpge>
 8006794:	2800      	cmp	r0, #0
 8006796:	f000 8157 	beq.w	8006a48 <_dtoa_r+0x938>
 800679a:	2400      	movs	r4, #0
 800679c:	4625      	mov	r5, r4
 800679e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80067a0:	43db      	mvns	r3, r3
 80067a2:	9304      	str	r3, [sp, #16]
 80067a4:	4656      	mov	r6, sl
 80067a6:	2700      	movs	r7, #0
 80067a8:	4621      	mov	r1, r4
 80067aa:	4658      	mov	r0, fp
 80067ac:	f000 fbb4 	bl	8006f18 <_Bfree>
 80067b0:	2d00      	cmp	r5, #0
 80067b2:	d0dc      	beq.n	800676e <_dtoa_r+0x65e>
 80067b4:	b12f      	cbz	r7, 80067c2 <_dtoa_r+0x6b2>
 80067b6:	42af      	cmp	r7, r5
 80067b8:	d003      	beq.n	80067c2 <_dtoa_r+0x6b2>
 80067ba:	4639      	mov	r1, r7
 80067bc:	4658      	mov	r0, fp
 80067be:	f000 fbab 	bl	8006f18 <_Bfree>
 80067c2:	4629      	mov	r1, r5
 80067c4:	4658      	mov	r0, fp
 80067c6:	f000 fba7 	bl	8006f18 <_Bfree>
 80067ca:	e7d0      	b.n	800676e <_dtoa_r+0x65e>
 80067cc:	9704      	str	r7, [sp, #16]
 80067ce:	4633      	mov	r3, r6
 80067d0:	461e      	mov	r6, r3
 80067d2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80067d6:	2a39      	cmp	r2, #57	@ 0x39
 80067d8:	d107      	bne.n	80067ea <_dtoa_r+0x6da>
 80067da:	459a      	cmp	sl, r3
 80067dc:	d1f8      	bne.n	80067d0 <_dtoa_r+0x6c0>
 80067de:	9a04      	ldr	r2, [sp, #16]
 80067e0:	3201      	adds	r2, #1
 80067e2:	9204      	str	r2, [sp, #16]
 80067e4:	2230      	movs	r2, #48	@ 0x30
 80067e6:	f88a 2000 	strb.w	r2, [sl]
 80067ea:	781a      	ldrb	r2, [r3, #0]
 80067ec:	3201      	adds	r2, #1
 80067ee:	701a      	strb	r2, [r3, #0]
 80067f0:	e7bd      	b.n	800676e <_dtoa_r+0x65e>
 80067f2:	4b7b      	ldr	r3, [pc, #492]	@ (80069e0 <_dtoa_r+0x8d0>)
 80067f4:	2200      	movs	r2, #0
 80067f6:	f7f9 ff07 	bl	8000608 <__aeabi_dmul>
 80067fa:	2200      	movs	r2, #0
 80067fc:	2300      	movs	r3, #0
 80067fe:	4604      	mov	r4, r0
 8006800:	460d      	mov	r5, r1
 8006802:	f7fa f969 	bl	8000ad8 <__aeabi_dcmpeq>
 8006806:	2800      	cmp	r0, #0
 8006808:	f43f aebb 	beq.w	8006582 <_dtoa_r+0x472>
 800680c:	e6f0      	b.n	80065f0 <_dtoa_r+0x4e0>
 800680e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006810:	2a00      	cmp	r2, #0
 8006812:	f000 80db 	beq.w	80069cc <_dtoa_r+0x8bc>
 8006816:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006818:	2a01      	cmp	r2, #1
 800681a:	f300 80bf 	bgt.w	800699c <_dtoa_r+0x88c>
 800681e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006820:	2a00      	cmp	r2, #0
 8006822:	f000 80b7 	beq.w	8006994 <_dtoa_r+0x884>
 8006826:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800682a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800682c:	4646      	mov	r6, r8
 800682e:	9a08      	ldr	r2, [sp, #32]
 8006830:	2101      	movs	r1, #1
 8006832:	441a      	add	r2, r3
 8006834:	4658      	mov	r0, fp
 8006836:	4498      	add	r8, r3
 8006838:	9208      	str	r2, [sp, #32]
 800683a:	f000 fc21 	bl	8007080 <__i2b>
 800683e:	4605      	mov	r5, r0
 8006840:	b15e      	cbz	r6, 800685a <_dtoa_r+0x74a>
 8006842:	9b08      	ldr	r3, [sp, #32]
 8006844:	2b00      	cmp	r3, #0
 8006846:	dd08      	ble.n	800685a <_dtoa_r+0x74a>
 8006848:	42b3      	cmp	r3, r6
 800684a:	9a08      	ldr	r2, [sp, #32]
 800684c:	bfa8      	it	ge
 800684e:	4633      	movge	r3, r6
 8006850:	eba8 0803 	sub.w	r8, r8, r3
 8006854:	1af6      	subs	r6, r6, r3
 8006856:	1ad3      	subs	r3, r2, r3
 8006858:	9308      	str	r3, [sp, #32]
 800685a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800685c:	b1f3      	cbz	r3, 800689c <_dtoa_r+0x78c>
 800685e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006860:	2b00      	cmp	r3, #0
 8006862:	f000 80b7 	beq.w	80069d4 <_dtoa_r+0x8c4>
 8006866:	b18c      	cbz	r4, 800688c <_dtoa_r+0x77c>
 8006868:	4629      	mov	r1, r5
 800686a:	4622      	mov	r2, r4
 800686c:	4658      	mov	r0, fp
 800686e:	f000 fcc7 	bl	8007200 <__pow5mult>
 8006872:	464a      	mov	r2, r9
 8006874:	4601      	mov	r1, r0
 8006876:	4605      	mov	r5, r0
 8006878:	4658      	mov	r0, fp
 800687a:	f000 fc17 	bl	80070ac <__multiply>
 800687e:	4649      	mov	r1, r9
 8006880:	9004      	str	r0, [sp, #16]
 8006882:	4658      	mov	r0, fp
 8006884:	f000 fb48 	bl	8006f18 <_Bfree>
 8006888:	9b04      	ldr	r3, [sp, #16]
 800688a:	4699      	mov	r9, r3
 800688c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800688e:	1b1a      	subs	r2, r3, r4
 8006890:	d004      	beq.n	800689c <_dtoa_r+0x78c>
 8006892:	4649      	mov	r1, r9
 8006894:	4658      	mov	r0, fp
 8006896:	f000 fcb3 	bl	8007200 <__pow5mult>
 800689a:	4681      	mov	r9, r0
 800689c:	2101      	movs	r1, #1
 800689e:	4658      	mov	r0, fp
 80068a0:	f000 fbee 	bl	8007080 <__i2b>
 80068a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068a6:	4604      	mov	r4, r0
 80068a8:	2b00      	cmp	r3, #0
 80068aa:	f000 81cf 	beq.w	8006c4c <_dtoa_r+0xb3c>
 80068ae:	461a      	mov	r2, r3
 80068b0:	4601      	mov	r1, r0
 80068b2:	4658      	mov	r0, fp
 80068b4:	f000 fca4 	bl	8007200 <__pow5mult>
 80068b8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068ba:	2b01      	cmp	r3, #1
 80068bc:	4604      	mov	r4, r0
 80068be:	f300 8095 	bgt.w	80069ec <_dtoa_r+0x8dc>
 80068c2:	9b02      	ldr	r3, [sp, #8]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	f040 8087 	bne.w	80069d8 <_dtoa_r+0x8c8>
 80068ca:	9b03      	ldr	r3, [sp, #12]
 80068cc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	f040 8089 	bne.w	80069e8 <_dtoa_r+0x8d8>
 80068d6:	9b03      	ldr	r3, [sp, #12]
 80068d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80068dc:	0d1b      	lsrs	r3, r3, #20
 80068de:	051b      	lsls	r3, r3, #20
 80068e0:	b12b      	cbz	r3, 80068ee <_dtoa_r+0x7de>
 80068e2:	9b08      	ldr	r3, [sp, #32]
 80068e4:	3301      	adds	r3, #1
 80068e6:	9308      	str	r3, [sp, #32]
 80068e8:	f108 0801 	add.w	r8, r8, #1
 80068ec:	2301      	movs	r3, #1
 80068ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80068f0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80068f2:	2b00      	cmp	r3, #0
 80068f4:	f000 81b0 	beq.w	8006c58 <_dtoa_r+0xb48>
 80068f8:	6923      	ldr	r3, [r4, #16]
 80068fa:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80068fe:	6918      	ldr	r0, [r3, #16]
 8006900:	f000 fb72 	bl	8006fe8 <__hi0bits>
 8006904:	f1c0 0020 	rsb	r0, r0, #32
 8006908:	9b08      	ldr	r3, [sp, #32]
 800690a:	4418      	add	r0, r3
 800690c:	f010 001f 	ands.w	r0, r0, #31
 8006910:	d077      	beq.n	8006a02 <_dtoa_r+0x8f2>
 8006912:	f1c0 0320 	rsb	r3, r0, #32
 8006916:	2b04      	cmp	r3, #4
 8006918:	dd6b      	ble.n	80069f2 <_dtoa_r+0x8e2>
 800691a:	9b08      	ldr	r3, [sp, #32]
 800691c:	f1c0 001c 	rsb	r0, r0, #28
 8006920:	4403      	add	r3, r0
 8006922:	4480      	add	r8, r0
 8006924:	4406      	add	r6, r0
 8006926:	9308      	str	r3, [sp, #32]
 8006928:	f1b8 0f00 	cmp.w	r8, #0
 800692c:	dd05      	ble.n	800693a <_dtoa_r+0x82a>
 800692e:	4649      	mov	r1, r9
 8006930:	4642      	mov	r2, r8
 8006932:	4658      	mov	r0, fp
 8006934:	f000 fcbe 	bl	80072b4 <__lshift>
 8006938:	4681      	mov	r9, r0
 800693a:	9b08      	ldr	r3, [sp, #32]
 800693c:	2b00      	cmp	r3, #0
 800693e:	dd05      	ble.n	800694c <_dtoa_r+0x83c>
 8006940:	4621      	mov	r1, r4
 8006942:	461a      	mov	r2, r3
 8006944:	4658      	mov	r0, fp
 8006946:	f000 fcb5 	bl	80072b4 <__lshift>
 800694a:	4604      	mov	r4, r0
 800694c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800694e:	2b00      	cmp	r3, #0
 8006950:	d059      	beq.n	8006a06 <_dtoa_r+0x8f6>
 8006952:	4621      	mov	r1, r4
 8006954:	4648      	mov	r0, r9
 8006956:	f000 fd19 	bl	800738c <__mcmp>
 800695a:	2800      	cmp	r0, #0
 800695c:	da53      	bge.n	8006a06 <_dtoa_r+0x8f6>
 800695e:	1e7b      	subs	r3, r7, #1
 8006960:	9304      	str	r3, [sp, #16]
 8006962:	4649      	mov	r1, r9
 8006964:	2300      	movs	r3, #0
 8006966:	220a      	movs	r2, #10
 8006968:	4658      	mov	r0, fp
 800696a:	f000 faf7 	bl	8006f5c <__multadd>
 800696e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006970:	4681      	mov	r9, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	f000 8172 	beq.w	8006c5c <_dtoa_r+0xb4c>
 8006978:	2300      	movs	r3, #0
 800697a:	4629      	mov	r1, r5
 800697c:	220a      	movs	r2, #10
 800697e:	4658      	mov	r0, fp
 8006980:	f000 faec 	bl	8006f5c <__multadd>
 8006984:	9b00      	ldr	r3, [sp, #0]
 8006986:	2b00      	cmp	r3, #0
 8006988:	4605      	mov	r5, r0
 800698a:	dc67      	bgt.n	8006a5c <_dtoa_r+0x94c>
 800698c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800698e:	2b02      	cmp	r3, #2
 8006990:	dc41      	bgt.n	8006a16 <_dtoa_r+0x906>
 8006992:	e063      	b.n	8006a5c <_dtoa_r+0x94c>
 8006994:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006996:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800699a:	e746      	b.n	800682a <_dtoa_r+0x71a>
 800699c:	9b07      	ldr	r3, [sp, #28]
 800699e:	1e5c      	subs	r4, r3, #1
 80069a0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80069a2:	42a3      	cmp	r3, r4
 80069a4:	bfbf      	itttt	lt
 80069a6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80069a8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80069aa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80069ac:	1ae3      	sublt	r3, r4, r3
 80069ae:	bfb4      	ite	lt
 80069b0:	18d2      	addlt	r2, r2, r3
 80069b2:	1b1c      	subge	r4, r3, r4
 80069b4:	9b07      	ldr	r3, [sp, #28]
 80069b6:	bfbc      	itt	lt
 80069b8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80069ba:	2400      	movlt	r4, #0
 80069bc:	2b00      	cmp	r3, #0
 80069be:	bfb5      	itete	lt
 80069c0:	eba8 0603 	sublt.w	r6, r8, r3
 80069c4:	9b07      	ldrge	r3, [sp, #28]
 80069c6:	2300      	movlt	r3, #0
 80069c8:	4646      	movge	r6, r8
 80069ca:	e730      	b.n	800682e <_dtoa_r+0x71e>
 80069cc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80069ce:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80069d0:	4646      	mov	r6, r8
 80069d2:	e735      	b.n	8006840 <_dtoa_r+0x730>
 80069d4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80069d6:	e75c      	b.n	8006892 <_dtoa_r+0x782>
 80069d8:	2300      	movs	r3, #0
 80069da:	e788      	b.n	80068ee <_dtoa_r+0x7de>
 80069dc:	3fe00000 	.word	0x3fe00000
 80069e0:	40240000 	.word	0x40240000
 80069e4:	40140000 	.word	0x40140000
 80069e8:	9b02      	ldr	r3, [sp, #8]
 80069ea:	e780      	b.n	80068ee <_dtoa_r+0x7de>
 80069ec:	2300      	movs	r3, #0
 80069ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80069f0:	e782      	b.n	80068f8 <_dtoa_r+0x7e8>
 80069f2:	d099      	beq.n	8006928 <_dtoa_r+0x818>
 80069f4:	9a08      	ldr	r2, [sp, #32]
 80069f6:	331c      	adds	r3, #28
 80069f8:	441a      	add	r2, r3
 80069fa:	4498      	add	r8, r3
 80069fc:	441e      	add	r6, r3
 80069fe:	9208      	str	r2, [sp, #32]
 8006a00:	e792      	b.n	8006928 <_dtoa_r+0x818>
 8006a02:	4603      	mov	r3, r0
 8006a04:	e7f6      	b.n	80069f4 <_dtoa_r+0x8e4>
 8006a06:	9b07      	ldr	r3, [sp, #28]
 8006a08:	9704      	str	r7, [sp, #16]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	dc20      	bgt.n	8006a50 <_dtoa_r+0x940>
 8006a0e:	9300      	str	r3, [sp, #0]
 8006a10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a12:	2b02      	cmp	r3, #2
 8006a14:	dd1e      	ble.n	8006a54 <_dtoa_r+0x944>
 8006a16:	9b00      	ldr	r3, [sp, #0]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	f47f aec0 	bne.w	800679e <_dtoa_r+0x68e>
 8006a1e:	4621      	mov	r1, r4
 8006a20:	2205      	movs	r2, #5
 8006a22:	4658      	mov	r0, fp
 8006a24:	f000 fa9a 	bl	8006f5c <__multadd>
 8006a28:	4601      	mov	r1, r0
 8006a2a:	4604      	mov	r4, r0
 8006a2c:	4648      	mov	r0, r9
 8006a2e:	f000 fcad 	bl	800738c <__mcmp>
 8006a32:	2800      	cmp	r0, #0
 8006a34:	f77f aeb3 	ble.w	800679e <_dtoa_r+0x68e>
 8006a38:	4656      	mov	r6, sl
 8006a3a:	2331      	movs	r3, #49	@ 0x31
 8006a3c:	f806 3b01 	strb.w	r3, [r6], #1
 8006a40:	9b04      	ldr	r3, [sp, #16]
 8006a42:	3301      	adds	r3, #1
 8006a44:	9304      	str	r3, [sp, #16]
 8006a46:	e6ae      	b.n	80067a6 <_dtoa_r+0x696>
 8006a48:	9c07      	ldr	r4, [sp, #28]
 8006a4a:	9704      	str	r7, [sp, #16]
 8006a4c:	4625      	mov	r5, r4
 8006a4e:	e7f3      	b.n	8006a38 <_dtoa_r+0x928>
 8006a50:	9b07      	ldr	r3, [sp, #28]
 8006a52:	9300      	str	r3, [sp, #0]
 8006a54:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006a56:	2b00      	cmp	r3, #0
 8006a58:	f000 8104 	beq.w	8006c64 <_dtoa_r+0xb54>
 8006a5c:	2e00      	cmp	r6, #0
 8006a5e:	dd05      	ble.n	8006a6c <_dtoa_r+0x95c>
 8006a60:	4629      	mov	r1, r5
 8006a62:	4632      	mov	r2, r6
 8006a64:	4658      	mov	r0, fp
 8006a66:	f000 fc25 	bl	80072b4 <__lshift>
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006a6e:	2b00      	cmp	r3, #0
 8006a70:	d05a      	beq.n	8006b28 <_dtoa_r+0xa18>
 8006a72:	6869      	ldr	r1, [r5, #4]
 8006a74:	4658      	mov	r0, fp
 8006a76:	f000 fa0f 	bl	8006e98 <_Balloc>
 8006a7a:	4606      	mov	r6, r0
 8006a7c:	b928      	cbnz	r0, 8006a8a <_dtoa_r+0x97a>
 8006a7e:	4b84      	ldr	r3, [pc, #528]	@ (8006c90 <_dtoa_r+0xb80>)
 8006a80:	4602      	mov	r2, r0
 8006a82:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006a86:	f7ff bb5a 	b.w	800613e <_dtoa_r+0x2e>
 8006a8a:	692a      	ldr	r2, [r5, #16]
 8006a8c:	3202      	adds	r2, #2
 8006a8e:	0092      	lsls	r2, r2, #2
 8006a90:	f105 010c 	add.w	r1, r5, #12
 8006a94:	300c      	adds	r0, #12
 8006a96:	f001 f813 	bl	8007ac0 <memcpy>
 8006a9a:	2201      	movs	r2, #1
 8006a9c:	4631      	mov	r1, r6
 8006a9e:	4658      	mov	r0, fp
 8006aa0:	f000 fc08 	bl	80072b4 <__lshift>
 8006aa4:	f10a 0301 	add.w	r3, sl, #1
 8006aa8:	9307      	str	r3, [sp, #28]
 8006aaa:	9b00      	ldr	r3, [sp, #0]
 8006aac:	4453      	add	r3, sl
 8006aae:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006ab0:	9b02      	ldr	r3, [sp, #8]
 8006ab2:	f003 0301 	and.w	r3, r3, #1
 8006ab6:	462f      	mov	r7, r5
 8006ab8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006aba:	4605      	mov	r5, r0
 8006abc:	9b07      	ldr	r3, [sp, #28]
 8006abe:	4621      	mov	r1, r4
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	4648      	mov	r0, r9
 8006ac4:	9300      	str	r3, [sp, #0]
 8006ac6:	f7ff fa98 	bl	8005ffa <quorem>
 8006aca:	4639      	mov	r1, r7
 8006acc:	9002      	str	r0, [sp, #8]
 8006ace:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006ad2:	4648      	mov	r0, r9
 8006ad4:	f000 fc5a 	bl	800738c <__mcmp>
 8006ad8:	462a      	mov	r2, r5
 8006ada:	9008      	str	r0, [sp, #32]
 8006adc:	4621      	mov	r1, r4
 8006ade:	4658      	mov	r0, fp
 8006ae0:	f000 fc70 	bl	80073c4 <__mdiff>
 8006ae4:	68c2      	ldr	r2, [r0, #12]
 8006ae6:	4606      	mov	r6, r0
 8006ae8:	bb02      	cbnz	r2, 8006b2c <_dtoa_r+0xa1c>
 8006aea:	4601      	mov	r1, r0
 8006aec:	4648      	mov	r0, r9
 8006aee:	f000 fc4d 	bl	800738c <__mcmp>
 8006af2:	4602      	mov	r2, r0
 8006af4:	4631      	mov	r1, r6
 8006af6:	4658      	mov	r0, fp
 8006af8:	920e      	str	r2, [sp, #56]	@ 0x38
 8006afa:	f000 fa0d 	bl	8006f18 <_Bfree>
 8006afe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006b00:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006b02:	9e07      	ldr	r6, [sp, #28]
 8006b04:	ea43 0102 	orr.w	r1, r3, r2
 8006b08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006b0a:	4319      	orrs	r1, r3
 8006b0c:	d110      	bne.n	8006b30 <_dtoa_r+0xa20>
 8006b0e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b12:	d029      	beq.n	8006b68 <_dtoa_r+0xa58>
 8006b14:	9b08      	ldr	r3, [sp, #32]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	dd02      	ble.n	8006b20 <_dtoa_r+0xa10>
 8006b1a:	9b02      	ldr	r3, [sp, #8]
 8006b1c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8006b20:	9b00      	ldr	r3, [sp, #0]
 8006b22:	f883 8000 	strb.w	r8, [r3]
 8006b26:	e63f      	b.n	80067a8 <_dtoa_r+0x698>
 8006b28:	4628      	mov	r0, r5
 8006b2a:	e7bb      	b.n	8006aa4 <_dtoa_r+0x994>
 8006b2c:	2201      	movs	r2, #1
 8006b2e:	e7e1      	b.n	8006af4 <_dtoa_r+0x9e4>
 8006b30:	9b08      	ldr	r3, [sp, #32]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	db04      	blt.n	8006b40 <_dtoa_r+0xa30>
 8006b36:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006b38:	430b      	orrs	r3, r1
 8006b3a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8006b3c:	430b      	orrs	r3, r1
 8006b3e:	d120      	bne.n	8006b82 <_dtoa_r+0xa72>
 8006b40:	2a00      	cmp	r2, #0
 8006b42:	dded      	ble.n	8006b20 <_dtoa_r+0xa10>
 8006b44:	4649      	mov	r1, r9
 8006b46:	2201      	movs	r2, #1
 8006b48:	4658      	mov	r0, fp
 8006b4a:	f000 fbb3 	bl	80072b4 <__lshift>
 8006b4e:	4621      	mov	r1, r4
 8006b50:	4681      	mov	r9, r0
 8006b52:	f000 fc1b 	bl	800738c <__mcmp>
 8006b56:	2800      	cmp	r0, #0
 8006b58:	dc03      	bgt.n	8006b62 <_dtoa_r+0xa52>
 8006b5a:	d1e1      	bne.n	8006b20 <_dtoa_r+0xa10>
 8006b5c:	f018 0f01 	tst.w	r8, #1
 8006b60:	d0de      	beq.n	8006b20 <_dtoa_r+0xa10>
 8006b62:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b66:	d1d8      	bne.n	8006b1a <_dtoa_r+0xa0a>
 8006b68:	9a00      	ldr	r2, [sp, #0]
 8006b6a:	2339      	movs	r3, #57	@ 0x39
 8006b6c:	7013      	strb	r3, [r2, #0]
 8006b6e:	4633      	mov	r3, r6
 8006b70:	461e      	mov	r6, r3
 8006b72:	3b01      	subs	r3, #1
 8006b74:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8006b78:	2a39      	cmp	r2, #57	@ 0x39
 8006b7a:	d052      	beq.n	8006c22 <_dtoa_r+0xb12>
 8006b7c:	3201      	adds	r2, #1
 8006b7e:	701a      	strb	r2, [r3, #0]
 8006b80:	e612      	b.n	80067a8 <_dtoa_r+0x698>
 8006b82:	2a00      	cmp	r2, #0
 8006b84:	dd07      	ble.n	8006b96 <_dtoa_r+0xa86>
 8006b86:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8006b8a:	d0ed      	beq.n	8006b68 <_dtoa_r+0xa58>
 8006b8c:	9a00      	ldr	r2, [sp, #0]
 8006b8e:	f108 0301 	add.w	r3, r8, #1
 8006b92:	7013      	strb	r3, [r2, #0]
 8006b94:	e608      	b.n	80067a8 <_dtoa_r+0x698>
 8006b96:	9b07      	ldr	r3, [sp, #28]
 8006b98:	9a07      	ldr	r2, [sp, #28]
 8006b9a:	f803 8c01 	strb.w	r8, [r3, #-1]
 8006b9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d028      	beq.n	8006bf6 <_dtoa_r+0xae6>
 8006ba4:	4649      	mov	r1, r9
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	220a      	movs	r2, #10
 8006baa:	4658      	mov	r0, fp
 8006bac:	f000 f9d6 	bl	8006f5c <__multadd>
 8006bb0:	42af      	cmp	r7, r5
 8006bb2:	4681      	mov	r9, r0
 8006bb4:	f04f 0300 	mov.w	r3, #0
 8006bb8:	f04f 020a 	mov.w	r2, #10
 8006bbc:	4639      	mov	r1, r7
 8006bbe:	4658      	mov	r0, fp
 8006bc0:	d107      	bne.n	8006bd2 <_dtoa_r+0xac2>
 8006bc2:	f000 f9cb 	bl	8006f5c <__multadd>
 8006bc6:	4607      	mov	r7, r0
 8006bc8:	4605      	mov	r5, r0
 8006bca:	9b07      	ldr	r3, [sp, #28]
 8006bcc:	3301      	adds	r3, #1
 8006bce:	9307      	str	r3, [sp, #28]
 8006bd0:	e774      	b.n	8006abc <_dtoa_r+0x9ac>
 8006bd2:	f000 f9c3 	bl	8006f5c <__multadd>
 8006bd6:	4629      	mov	r1, r5
 8006bd8:	4607      	mov	r7, r0
 8006bda:	2300      	movs	r3, #0
 8006bdc:	220a      	movs	r2, #10
 8006bde:	4658      	mov	r0, fp
 8006be0:	f000 f9bc 	bl	8006f5c <__multadd>
 8006be4:	4605      	mov	r5, r0
 8006be6:	e7f0      	b.n	8006bca <_dtoa_r+0xaba>
 8006be8:	9b00      	ldr	r3, [sp, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	bfcc      	ite	gt
 8006bee:	461e      	movgt	r6, r3
 8006bf0:	2601      	movle	r6, #1
 8006bf2:	4456      	add	r6, sl
 8006bf4:	2700      	movs	r7, #0
 8006bf6:	4649      	mov	r1, r9
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	4658      	mov	r0, fp
 8006bfc:	f000 fb5a 	bl	80072b4 <__lshift>
 8006c00:	4621      	mov	r1, r4
 8006c02:	4681      	mov	r9, r0
 8006c04:	f000 fbc2 	bl	800738c <__mcmp>
 8006c08:	2800      	cmp	r0, #0
 8006c0a:	dcb0      	bgt.n	8006b6e <_dtoa_r+0xa5e>
 8006c0c:	d102      	bne.n	8006c14 <_dtoa_r+0xb04>
 8006c0e:	f018 0f01 	tst.w	r8, #1
 8006c12:	d1ac      	bne.n	8006b6e <_dtoa_r+0xa5e>
 8006c14:	4633      	mov	r3, r6
 8006c16:	461e      	mov	r6, r3
 8006c18:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006c1c:	2a30      	cmp	r2, #48	@ 0x30
 8006c1e:	d0fa      	beq.n	8006c16 <_dtoa_r+0xb06>
 8006c20:	e5c2      	b.n	80067a8 <_dtoa_r+0x698>
 8006c22:	459a      	cmp	sl, r3
 8006c24:	d1a4      	bne.n	8006b70 <_dtoa_r+0xa60>
 8006c26:	9b04      	ldr	r3, [sp, #16]
 8006c28:	3301      	adds	r3, #1
 8006c2a:	9304      	str	r3, [sp, #16]
 8006c2c:	2331      	movs	r3, #49	@ 0x31
 8006c2e:	f88a 3000 	strb.w	r3, [sl]
 8006c32:	e5b9      	b.n	80067a8 <_dtoa_r+0x698>
 8006c34:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006c36:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8006c94 <_dtoa_r+0xb84>
 8006c3a:	b11b      	cbz	r3, 8006c44 <_dtoa_r+0xb34>
 8006c3c:	f10a 0308 	add.w	r3, sl, #8
 8006c40:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006c42:	6013      	str	r3, [r2, #0]
 8006c44:	4650      	mov	r0, sl
 8006c46:	b019      	add	sp, #100	@ 0x64
 8006c48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c4c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006c4e:	2b01      	cmp	r3, #1
 8006c50:	f77f ae37 	ble.w	80068c2 <_dtoa_r+0x7b2>
 8006c54:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006c56:	930a      	str	r3, [sp, #40]	@ 0x28
 8006c58:	2001      	movs	r0, #1
 8006c5a:	e655      	b.n	8006908 <_dtoa_r+0x7f8>
 8006c5c:	9b00      	ldr	r3, [sp, #0]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f77f aed6 	ble.w	8006a10 <_dtoa_r+0x900>
 8006c64:	4656      	mov	r6, sl
 8006c66:	4621      	mov	r1, r4
 8006c68:	4648      	mov	r0, r9
 8006c6a:	f7ff f9c6 	bl	8005ffa <quorem>
 8006c6e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8006c72:	f806 8b01 	strb.w	r8, [r6], #1
 8006c76:	9b00      	ldr	r3, [sp, #0]
 8006c78:	eba6 020a 	sub.w	r2, r6, sl
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	ddb3      	ble.n	8006be8 <_dtoa_r+0xad8>
 8006c80:	4649      	mov	r1, r9
 8006c82:	2300      	movs	r3, #0
 8006c84:	220a      	movs	r2, #10
 8006c86:	4658      	mov	r0, fp
 8006c88:	f000 f968 	bl	8006f5c <__multadd>
 8006c8c:	4681      	mov	r9, r0
 8006c8e:	e7ea      	b.n	8006c66 <_dtoa_r+0xb56>
 8006c90:	08007e80 	.word	0x08007e80
 8006c94:	08007e04 	.word	0x08007e04

08006c98 <_free_r>:
 8006c98:	b538      	push	{r3, r4, r5, lr}
 8006c9a:	4605      	mov	r5, r0
 8006c9c:	2900      	cmp	r1, #0
 8006c9e:	d041      	beq.n	8006d24 <_free_r+0x8c>
 8006ca0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ca4:	1f0c      	subs	r4, r1, #4
 8006ca6:	2b00      	cmp	r3, #0
 8006ca8:	bfb8      	it	lt
 8006caa:	18e4      	addlt	r4, r4, r3
 8006cac:	f000 f8e8 	bl	8006e80 <__malloc_lock>
 8006cb0:	4a1d      	ldr	r2, [pc, #116]	@ (8006d28 <_free_r+0x90>)
 8006cb2:	6813      	ldr	r3, [r2, #0]
 8006cb4:	b933      	cbnz	r3, 8006cc4 <_free_r+0x2c>
 8006cb6:	6063      	str	r3, [r4, #4]
 8006cb8:	6014      	str	r4, [r2, #0]
 8006cba:	4628      	mov	r0, r5
 8006cbc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006cc0:	f000 b8e4 	b.w	8006e8c <__malloc_unlock>
 8006cc4:	42a3      	cmp	r3, r4
 8006cc6:	d908      	bls.n	8006cda <_free_r+0x42>
 8006cc8:	6820      	ldr	r0, [r4, #0]
 8006cca:	1821      	adds	r1, r4, r0
 8006ccc:	428b      	cmp	r3, r1
 8006cce:	bf01      	itttt	eq
 8006cd0:	6819      	ldreq	r1, [r3, #0]
 8006cd2:	685b      	ldreq	r3, [r3, #4]
 8006cd4:	1809      	addeq	r1, r1, r0
 8006cd6:	6021      	streq	r1, [r4, #0]
 8006cd8:	e7ed      	b.n	8006cb6 <_free_r+0x1e>
 8006cda:	461a      	mov	r2, r3
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	b10b      	cbz	r3, 8006ce4 <_free_r+0x4c>
 8006ce0:	42a3      	cmp	r3, r4
 8006ce2:	d9fa      	bls.n	8006cda <_free_r+0x42>
 8006ce4:	6811      	ldr	r1, [r2, #0]
 8006ce6:	1850      	adds	r0, r2, r1
 8006ce8:	42a0      	cmp	r0, r4
 8006cea:	d10b      	bne.n	8006d04 <_free_r+0x6c>
 8006cec:	6820      	ldr	r0, [r4, #0]
 8006cee:	4401      	add	r1, r0
 8006cf0:	1850      	adds	r0, r2, r1
 8006cf2:	4283      	cmp	r3, r0
 8006cf4:	6011      	str	r1, [r2, #0]
 8006cf6:	d1e0      	bne.n	8006cba <_free_r+0x22>
 8006cf8:	6818      	ldr	r0, [r3, #0]
 8006cfa:	685b      	ldr	r3, [r3, #4]
 8006cfc:	6053      	str	r3, [r2, #4]
 8006cfe:	4408      	add	r0, r1
 8006d00:	6010      	str	r0, [r2, #0]
 8006d02:	e7da      	b.n	8006cba <_free_r+0x22>
 8006d04:	d902      	bls.n	8006d0c <_free_r+0x74>
 8006d06:	230c      	movs	r3, #12
 8006d08:	602b      	str	r3, [r5, #0]
 8006d0a:	e7d6      	b.n	8006cba <_free_r+0x22>
 8006d0c:	6820      	ldr	r0, [r4, #0]
 8006d0e:	1821      	adds	r1, r4, r0
 8006d10:	428b      	cmp	r3, r1
 8006d12:	bf04      	itt	eq
 8006d14:	6819      	ldreq	r1, [r3, #0]
 8006d16:	685b      	ldreq	r3, [r3, #4]
 8006d18:	6063      	str	r3, [r4, #4]
 8006d1a:	bf04      	itt	eq
 8006d1c:	1809      	addeq	r1, r1, r0
 8006d1e:	6021      	streq	r1, [r4, #0]
 8006d20:	6054      	str	r4, [r2, #4]
 8006d22:	e7ca      	b.n	8006cba <_free_r+0x22>
 8006d24:	bd38      	pop	{r3, r4, r5, pc}
 8006d26:	bf00      	nop
 8006d28:	20000478 	.word	0x20000478

08006d2c <malloc>:
 8006d2c:	4b02      	ldr	r3, [pc, #8]	@ (8006d38 <malloc+0xc>)
 8006d2e:	4601      	mov	r1, r0
 8006d30:	6818      	ldr	r0, [r3, #0]
 8006d32:	f000 b825 	b.w	8006d80 <_malloc_r>
 8006d36:	bf00      	nop
 8006d38:	20000018 	.word	0x20000018

08006d3c <sbrk_aligned>:
 8006d3c:	b570      	push	{r4, r5, r6, lr}
 8006d3e:	4e0f      	ldr	r6, [pc, #60]	@ (8006d7c <sbrk_aligned+0x40>)
 8006d40:	460c      	mov	r4, r1
 8006d42:	6831      	ldr	r1, [r6, #0]
 8006d44:	4605      	mov	r5, r0
 8006d46:	b911      	cbnz	r1, 8006d4e <sbrk_aligned+0x12>
 8006d48:	f000 feaa 	bl	8007aa0 <_sbrk_r>
 8006d4c:	6030      	str	r0, [r6, #0]
 8006d4e:	4621      	mov	r1, r4
 8006d50:	4628      	mov	r0, r5
 8006d52:	f000 fea5 	bl	8007aa0 <_sbrk_r>
 8006d56:	1c43      	adds	r3, r0, #1
 8006d58:	d103      	bne.n	8006d62 <sbrk_aligned+0x26>
 8006d5a:	f04f 34ff 	mov.w	r4, #4294967295
 8006d5e:	4620      	mov	r0, r4
 8006d60:	bd70      	pop	{r4, r5, r6, pc}
 8006d62:	1cc4      	adds	r4, r0, #3
 8006d64:	f024 0403 	bic.w	r4, r4, #3
 8006d68:	42a0      	cmp	r0, r4
 8006d6a:	d0f8      	beq.n	8006d5e <sbrk_aligned+0x22>
 8006d6c:	1a21      	subs	r1, r4, r0
 8006d6e:	4628      	mov	r0, r5
 8006d70:	f000 fe96 	bl	8007aa0 <_sbrk_r>
 8006d74:	3001      	adds	r0, #1
 8006d76:	d1f2      	bne.n	8006d5e <sbrk_aligned+0x22>
 8006d78:	e7ef      	b.n	8006d5a <sbrk_aligned+0x1e>
 8006d7a:	bf00      	nop
 8006d7c:	20000474 	.word	0x20000474

08006d80 <_malloc_r>:
 8006d80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d84:	1ccd      	adds	r5, r1, #3
 8006d86:	f025 0503 	bic.w	r5, r5, #3
 8006d8a:	3508      	adds	r5, #8
 8006d8c:	2d0c      	cmp	r5, #12
 8006d8e:	bf38      	it	cc
 8006d90:	250c      	movcc	r5, #12
 8006d92:	2d00      	cmp	r5, #0
 8006d94:	4606      	mov	r6, r0
 8006d96:	db01      	blt.n	8006d9c <_malloc_r+0x1c>
 8006d98:	42a9      	cmp	r1, r5
 8006d9a:	d904      	bls.n	8006da6 <_malloc_r+0x26>
 8006d9c:	230c      	movs	r3, #12
 8006d9e:	6033      	str	r3, [r6, #0]
 8006da0:	2000      	movs	r0, #0
 8006da2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006da6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006e7c <_malloc_r+0xfc>
 8006daa:	f000 f869 	bl	8006e80 <__malloc_lock>
 8006dae:	f8d8 3000 	ldr.w	r3, [r8]
 8006db2:	461c      	mov	r4, r3
 8006db4:	bb44      	cbnz	r4, 8006e08 <_malloc_r+0x88>
 8006db6:	4629      	mov	r1, r5
 8006db8:	4630      	mov	r0, r6
 8006dba:	f7ff ffbf 	bl	8006d3c <sbrk_aligned>
 8006dbe:	1c43      	adds	r3, r0, #1
 8006dc0:	4604      	mov	r4, r0
 8006dc2:	d158      	bne.n	8006e76 <_malloc_r+0xf6>
 8006dc4:	f8d8 4000 	ldr.w	r4, [r8]
 8006dc8:	4627      	mov	r7, r4
 8006dca:	2f00      	cmp	r7, #0
 8006dcc:	d143      	bne.n	8006e56 <_malloc_r+0xd6>
 8006dce:	2c00      	cmp	r4, #0
 8006dd0:	d04b      	beq.n	8006e6a <_malloc_r+0xea>
 8006dd2:	6823      	ldr	r3, [r4, #0]
 8006dd4:	4639      	mov	r1, r7
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	eb04 0903 	add.w	r9, r4, r3
 8006ddc:	f000 fe60 	bl	8007aa0 <_sbrk_r>
 8006de0:	4581      	cmp	r9, r0
 8006de2:	d142      	bne.n	8006e6a <_malloc_r+0xea>
 8006de4:	6821      	ldr	r1, [r4, #0]
 8006de6:	1a6d      	subs	r5, r5, r1
 8006de8:	4629      	mov	r1, r5
 8006dea:	4630      	mov	r0, r6
 8006dec:	f7ff ffa6 	bl	8006d3c <sbrk_aligned>
 8006df0:	3001      	adds	r0, #1
 8006df2:	d03a      	beq.n	8006e6a <_malloc_r+0xea>
 8006df4:	6823      	ldr	r3, [r4, #0]
 8006df6:	442b      	add	r3, r5
 8006df8:	6023      	str	r3, [r4, #0]
 8006dfa:	f8d8 3000 	ldr.w	r3, [r8]
 8006dfe:	685a      	ldr	r2, [r3, #4]
 8006e00:	bb62      	cbnz	r2, 8006e5c <_malloc_r+0xdc>
 8006e02:	f8c8 7000 	str.w	r7, [r8]
 8006e06:	e00f      	b.n	8006e28 <_malloc_r+0xa8>
 8006e08:	6822      	ldr	r2, [r4, #0]
 8006e0a:	1b52      	subs	r2, r2, r5
 8006e0c:	d420      	bmi.n	8006e50 <_malloc_r+0xd0>
 8006e0e:	2a0b      	cmp	r2, #11
 8006e10:	d917      	bls.n	8006e42 <_malloc_r+0xc2>
 8006e12:	1961      	adds	r1, r4, r5
 8006e14:	42a3      	cmp	r3, r4
 8006e16:	6025      	str	r5, [r4, #0]
 8006e18:	bf18      	it	ne
 8006e1a:	6059      	strne	r1, [r3, #4]
 8006e1c:	6863      	ldr	r3, [r4, #4]
 8006e1e:	bf08      	it	eq
 8006e20:	f8c8 1000 	streq.w	r1, [r8]
 8006e24:	5162      	str	r2, [r4, r5]
 8006e26:	604b      	str	r3, [r1, #4]
 8006e28:	4630      	mov	r0, r6
 8006e2a:	f000 f82f 	bl	8006e8c <__malloc_unlock>
 8006e2e:	f104 000b 	add.w	r0, r4, #11
 8006e32:	1d23      	adds	r3, r4, #4
 8006e34:	f020 0007 	bic.w	r0, r0, #7
 8006e38:	1ac2      	subs	r2, r0, r3
 8006e3a:	bf1c      	itt	ne
 8006e3c:	1a1b      	subne	r3, r3, r0
 8006e3e:	50a3      	strne	r3, [r4, r2]
 8006e40:	e7af      	b.n	8006da2 <_malloc_r+0x22>
 8006e42:	6862      	ldr	r2, [r4, #4]
 8006e44:	42a3      	cmp	r3, r4
 8006e46:	bf0c      	ite	eq
 8006e48:	f8c8 2000 	streq.w	r2, [r8]
 8006e4c:	605a      	strne	r2, [r3, #4]
 8006e4e:	e7eb      	b.n	8006e28 <_malloc_r+0xa8>
 8006e50:	4623      	mov	r3, r4
 8006e52:	6864      	ldr	r4, [r4, #4]
 8006e54:	e7ae      	b.n	8006db4 <_malloc_r+0x34>
 8006e56:	463c      	mov	r4, r7
 8006e58:	687f      	ldr	r7, [r7, #4]
 8006e5a:	e7b6      	b.n	8006dca <_malloc_r+0x4a>
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	685b      	ldr	r3, [r3, #4]
 8006e60:	42a3      	cmp	r3, r4
 8006e62:	d1fb      	bne.n	8006e5c <_malloc_r+0xdc>
 8006e64:	2300      	movs	r3, #0
 8006e66:	6053      	str	r3, [r2, #4]
 8006e68:	e7de      	b.n	8006e28 <_malloc_r+0xa8>
 8006e6a:	230c      	movs	r3, #12
 8006e6c:	6033      	str	r3, [r6, #0]
 8006e6e:	4630      	mov	r0, r6
 8006e70:	f000 f80c 	bl	8006e8c <__malloc_unlock>
 8006e74:	e794      	b.n	8006da0 <_malloc_r+0x20>
 8006e76:	6005      	str	r5, [r0, #0]
 8006e78:	e7d6      	b.n	8006e28 <_malloc_r+0xa8>
 8006e7a:	bf00      	nop
 8006e7c:	20000478 	.word	0x20000478

08006e80 <__malloc_lock>:
 8006e80:	4801      	ldr	r0, [pc, #4]	@ (8006e88 <__malloc_lock+0x8>)
 8006e82:	f7ff b8b8 	b.w	8005ff6 <__retarget_lock_acquire_recursive>
 8006e86:	bf00      	nop
 8006e88:	20000470 	.word	0x20000470

08006e8c <__malloc_unlock>:
 8006e8c:	4801      	ldr	r0, [pc, #4]	@ (8006e94 <__malloc_unlock+0x8>)
 8006e8e:	f7ff b8b3 	b.w	8005ff8 <__retarget_lock_release_recursive>
 8006e92:	bf00      	nop
 8006e94:	20000470 	.word	0x20000470

08006e98 <_Balloc>:
 8006e98:	b570      	push	{r4, r5, r6, lr}
 8006e9a:	69c6      	ldr	r6, [r0, #28]
 8006e9c:	4604      	mov	r4, r0
 8006e9e:	460d      	mov	r5, r1
 8006ea0:	b976      	cbnz	r6, 8006ec0 <_Balloc+0x28>
 8006ea2:	2010      	movs	r0, #16
 8006ea4:	f7ff ff42 	bl	8006d2c <malloc>
 8006ea8:	4602      	mov	r2, r0
 8006eaa:	61e0      	str	r0, [r4, #28]
 8006eac:	b920      	cbnz	r0, 8006eb8 <_Balloc+0x20>
 8006eae:	4b18      	ldr	r3, [pc, #96]	@ (8006f10 <_Balloc+0x78>)
 8006eb0:	4818      	ldr	r0, [pc, #96]	@ (8006f14 <_Balloc+0x7c>)
 8006eb2:	216b      	movs	r1, #107	@ 0x6b
 8006eb4:	f000 fe12 	bl	8007adc <__assert_func>
 8006eb8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006ebc:	6006      	str	r6, [r0, #0]
 8006ebe:	60c6      	str	r6, [r0, #12]
 8006ec0:	69e6      	ldr	r6, [r4, #28]
 8006ec2:	68f3      	ldr	r3, [r6, #12]
 8006ec4:	b183      	cbz	r3, 8006ee8 <_Balloc+0x50>
 8006ec6:	69e3      	ldr	r3, [r4, #28]
 8006ec8:	68db      	ldr	r3, [r3, #12]
 8006eca:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006ece:	b9b8      	cbnz	r0, 8006f00 <_Balloc+0x68>
 8006ed0:	2101      	movs	r1, #1
 8006ed2:	fa01 f605 	lsl.w	r6, r1, r5
 8006ed6:	1d72      	adds	r2, r6, #5
 8006ed8:	0092      	lsls	r2, r2, #2
 8006eda:	4620      	mov	r0, r4
 8006edc:	f000 fe1c 	bl	8007b18 <_calloc_r>
 8006ee0:	b160      	cbz	r0, 8006efc <_Balloc+0x64>
 8006ee2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006ee6:	e00e      	b.n	8006f06 <_Balloc+0x6e>
 8006ee8:	2221      	movs	r2, #33	@ 0x21
 8006eea:	2104      	movs	r1, #4
 8006eec:	4620      	mov	r0, r4
 8006eee:	f000 fe13 	bl	8007b18 <_calloc_r>
 8006ef2:	69e3      	ldr	r3, [r4, #28]
 8006ef4:	60f0      	str	r0, [r6, #12]
 8006ef6:	68db      	ldr	r3, [r3, #12]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d1e4      	bne.n	8006ec6 <_Balloc+0x2e>
 8006efc:	2000      	movs	r0, #0
 8006efe:	bd70      	pop	{r4, r5, r6, pc}
 8006f00:	6802      	ldr	r2, [r0, #0]
 8006f02:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006f06:	2300      	movs	r3, #0
 8006f08:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006f0c:	e7f7      	b.n	8006efe <_Balloc+0x66>
 8006f0e:	bf00      	nop
 8006f10:	08007e11 	.word	0x08007e11
 8006f14:	08007e91 	.word	0x08007e91

08006f18 <_Bfree>:
 8006f18:	b570      	push	{r4, r5, r6, lr}
 8006f1a:	69c6      	ldr	r6, [r0, #28]
 8006f1c:	4605      	mov	r5, r0
 8006f1e:	460c      	mov	r4, r1
 8006f20:	b976      	cbnz	r6, 8006f40 <_Bfree+0x28>
 8006f22:	2010      	movs	r0, #16
 8006f24:	f7ff ff02 	bl	8006d2c <malloc>
 8006f28:	4602      	mov	r2, r0
 8006f2a:	61e8      	str	r0, [r5, #28]
 8006f2c:	b920      	cbnz	r0, 8006f38 <_Bfree+0x20>
 8006f2e:	4b09      	ldr	r3, [pc, #36]	@ (8006f54 <_Bfree+0x3c>)
 8006f30:	4809      	ldr	r0, [pc, #36]	@ (8006f58 <_Bfree+0x40>)
 8006f32:	218f      	movs	r1, #143	@ 0x8f
 8006f34:	f000 fdd2 	bl	8007adc <__assert_func>
 8006f38:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006f3c:	6006      	str	r6, [r0, #0]
 8006f3e:	60c6      	str	r6, [r0, #12]
 8006f40:	b13c      	cbz	r4, 8006f52 <_Bfree+0x3a>
 8006f42:	69eb      	ldr	r3, [r5, #28]
 8006f44:	6862      	ldr	r2, [r4, #4]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006f4c:	6021      	str	r1, [r4, #0]
 8006f4e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006f52:	bd70      	pop	{r4, r5, r6, pc}
 8006f54:	08007e11 	.word	0x08007e11
 8006f58:	08007e91 	.word	0x08007e91

08006f5c <__multadd>:
 8006f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f60:	690d      	ldr	r5, [r1, #16]
 8006f62:	4607      	mov	r7, r0
 8006f64:	460c      	mov	r4, r1
 8006f66:	461e      	mov	r6, r3
 8006f68:	f101 0c14 	add.w	ip, r1, #20
 8006f6c:	2000      	movs	r0, #0
 8006f6e:	f8dc 3000 	ldr.w	r3, [ip]
 8006f72:	b299      	uxth	r1, r3
 8006f74:	fb02 6101 	mla	r1, r2, r1, r6
 8006f78:	0c1e      	lsrs	r6, r3, #16
 8006f7a:	0c0b      	lsrs	r3, r1, #16
 8006f7c:	fb02 3306 	mla	r3, r2, r6, r3
 8006f80:	b289      	uxth	r1, r1
 8006f82:	3001      	adds	r0, #1
 8006f84:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8006f88:	4285      	cmp	r5, r0
 8006f8a:	f84c 1b04 	str.w	r1, [ip], #4
 8006f8e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8006f92:	dcec      	bgt.n	8006f6e <__multadd+0x12>
 8006f94:	b30e      	cbz	r6, 8006fda <__multadd+0x7e>
 8006f96:	68a3      	ldr	r3, [r4, #8]
 8006f98:	42ab      	cmp	r3, r5
 8006f9a:	dc19      	bgt.n	8006fd0 <__multadd+0x74>
 8006f9c:	6861      	ldr	r1, [r4, #4]
 8006f9e:	4638      	mov	r0, r7
 8006fa0:	3101      	adds	r1, #1
 8006fa2:	f7ff ff79 	bl	8006e98 <_Balloc>
 8006fa6:	4680      	mov	r8, r0
 8006fa8:	b928      	cbnz	r0, 8006fb6 <__multadd+0x5a>
 8006faa:	4602      	mov	r2, r0
 8006fac:	4b0c      	ldr	r3, [pc, #48]	@ (8006fe0 <__multadd+0x84>)
 8006fae:	480d      	ldr	r0, [pc, #52]	@ (8006fe4 <__multadd+0x88>)
 8006fb0:	21ba      	movs	r1, #186	@ 0xba
 8006fb2:	f000 fd93 	bl	8007adc <__assert_func>
 8006fb6:	6922      	ldr	r2, [r4, #16]
 8006fb8:	3202      	adds	r2, #2
 8006fba:	f104 010c 	add.w	r1, r4, #12
 8006fbe:	0092      	lsls	r2, r2, #2
 8006fc0:	300c      	adds	r0, #12
 8006fc2:	f000 fd7d 	bl	8007ac0 <memcpy>
 8006fc6:	4621      	mov	r1, r4
 8006fc8:	4638      	mov	r0, r7
 8006fca:	f7ff ffa5 	bl	8006f18 <_Bfree>
 8006fce:	4644      	mov	r4, r8
 8006fd0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8006fd4:	3501      	adds	r5, #1
 8006fd6:	615e      	str	r6, [r3, #20]
 8006fd8:	6125      	str	r5, [r4, #16]
 8006fda:	4620      	mov	r0, r4
 8006fdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006fe0:	08007e80 	.word	0x08007e80
 8006fe4:	08007e91 	.word	0x08007e91

08006fe8 <__hi0bits>:
 8006fe8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8006fec:	4603      	mov	r3, r0
 8006fee:	bf36      	itet	cc
 8006ff0:	0403      	lslcc	r3, r0, #16
 8006ff2:	2000      	movcs	r0, #0
 8006ff4:	2010      	movcc	r0, #16
 8006ff6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006ffa:	bf3c      	itt	cc
 8006ffc:	021b      	lslcc	r3, r3, #8
 8006ffe:	3008      	addcc	r0, #8
 8007000:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007004:	bf3c      	itt	cc
 8007006:	011b      	lslcc	r3, r3, #4
 8007008:	3004      	addcc	r0, #4
 800700a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800700e:	bf3c      	itt	cc
 8007010:	009b      	lslcc	r3, r3, #2
 8007012:	3002      	addcc	r0, #2
 8007014:	2b00      	cmp	r3, #0
 8007016:	db05      	blt.n	8007024 <__hi0bits+0x3c>
 8007018:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800701c:	f100 0001 	add.w	r0, r0, #1
 8007020:	bf08      	it	eq
 8007022:	2020      	moveq	r0, #32
 8007024:	4770      	bx	lr

08007026 <__lo0bits>:
 8007026:	6803      	ldr	r3, [r0, #0]
 8007028:	4602      	mov	r2, r0
 800702a:	f013 0007 	ands.w	r0, r3, #7
 800702e:	d00b      	beq.n	8007048 <__lo0bits+0x22>
 8007030:	07d9      	lsls	r1, r3, #31
 8007032:	d421      	bmi.n	8007078 <__lo0bits+0x52>
 8007034:	0798      	lsls	r0, r3, #30
 8007036:	bf49      	itett	mi
 8007038:	085b      	lsrmi	r3, r3, #1
 800703a:	089b      	lsrpl	r3, r3, #2
 800703c:	2001      	movmi	r0, #1
 800703e:	6013      	strmi	r3, [r2, #0]
 8007040:	bf5c      	itt	pl
 8007042:	6013      	strpl	r3, [r2, #0]
 8007044:	2002      	movpl	r0, #2
 8007046:	4770      	bx	lr
 8007048:	b299      	uxth	r1, r3
 800704a:	b909      	cbnz	r1, 8007050 <__lo0bits+0x2a>
 800704c:	0c1b      	lsrs	r3, r3, #16
 800704e:	2010      	movs	r0, #16
 8007050:	b2d9      	uxtb	r1, r3
 8007052:	b909      	cbnz	r1, 8007058 <__lo0bits+0x32>
 8007054:	3008      	adds	r0, #8
 8007056:	0a1b      	lsrs	r3, r3, #8
 8007058:	0719      	lsls	r1, r3, #28
 800705a:	bf04      	itt	eq
 800705c:	091b      	lsreq	r3, r3, #4
 800705e:	3004      	addeq	r0, #4
 8007060:	0799      	lsls	r1, r3, #30
 8007062:	bf04      	itt	eq
 8007064:	089b      	lsreq	r3, r3, #2
 8007066:	3002      	addeq	r0, #2
 8007068:	07d9      	lsls	r1, r3, #31
 800706a:	d403      	bmi.n	8007074 <__lo0bits+0x4e>
 800706c:	085b      	lsrs	r3, r3, #1
 800706e:	f100 0001 	add.w	r0, r0, #1
 8007072:	d003      	beq.n	800707c <__lo0bits+0x56>
 8007074:	6013      	str	r3, [r2, #0]
 8007076:	4770      	bx	lr
 8007078:	2000      	movs	r0, #0
 800707a:	4770      	bx	lr
 800707c:	2020      	movs	r0, #32
 800707e:	4770      	bx	lr

08007080 <__i2b>:
 8007080:	b510      	push	{r4, lr}
 8007082:	460c      	mov	r4, r1
 8007084:	2101      	movs	r1, #1
 8007086:	f7ff ff07 	bl	8006e98 <_Balloc>
 800708a:	4602      	mov	r2, r0
 800708c:	b928      	cbnz	r0, 800709a <__i2b+0x1a>
 800708e:	4b05      	ldr	r3, [pc, #20]	@ (80070a4 <__i2b+0x24>)
 8007090:	4805      	ldr	r0, [pc, #20]	@ (80070a8 <__i2b+0x28>)
 8007092:	f240 1145 	movw	r1, #325	@ 0x145
 8007096:	f000 fd21 	bl	8007adc <__assert_func>
 800709a:	2301      	movs	r3, #1
 800709c:	6144      	str	r4, [r0, #20]
 800709e:	6103      	str	r3, [r0, #16]
 80070a0:	bd10      	pop	{r4, pc}
 80070a2:	bf00      	nop
 80070a4:	08007e80 	.word	0x08007e80
 80070a8:	08007e91 	.word	0x08007e91

080070ac <__multiply>:
 80070ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070b0:	4614      	mov	r4, r2
 80070b2:	690a      	ldr	r2, [r1, #16]
 80070b4:	6923      	ldr	r3, [r4, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	bfa8      	it	ge
 80070ba:	4623      	movge	r3, r4
 80070bc:	460f      	mov	r7, r1
 80070be:	bfa4      	itt	ge
 80070c0:	460c      	movge	r4, r1
 80070c2:	461f      	movge	r7, r3
 80070c4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80070c8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80070cc:	68a3      	ldr	r3, [r4, #8]
 80070ce:	6861      	ldr	r1, [r4, #4]
 80070d0:	eb0a 0609 	add.w	r6, sl, r9
 80070d4:	42b3      	cmp	r3, r6
 80070d6:	b085      	sub	sp, #20
 80070d8:	bfb8      	it	lt
 80070da:	3101      	addlt	r1, #1
 80070dc:	f7ff fedc 	bl	8006e98 <_Balloc>
 80070e0:	b930      	cbnz	r0, 80070f0 <__multiply+0x44>
 80070e2:	4602      	mov	r2, r0
 80070e4:	4b44      	ldr	r3, [pc, #272]	@ (80071f8 <__multiply+0x14c>)
 80070e6:	4845      	ldr	r0, [pc, #276]	@ (80071fc <__multiply+0x150>)
 80070e8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80070ec:	f000 fcf6 	bl	8007adc <__assert_func>
 80070f0:	f100 0514 	add.w	r5, r0, #20
 80070f4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 80070f8:	462b      	mov	r3, r5
 80070fa:	2200      	movs	r2, #0
 80070fc:	4543      	cmp	r3, r8
 80070fe:	d321      	bcc.n	8007144 <__multiply+0x98>
 8007100:	f107 0114 	add.w	r1, r7, #20
 8007104:	f104 0214 	add.w	r2, r4, #20
 8007108:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800710c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007110:	9302      	str	r3, [sp, #8]
 8007112:	1b13      	subs	r3, r2, r4
 8007114:	3b15      	subs	r3, #21
 8007116:	f023 0303 	bic.w	r3, r3, #3
 800711a:	3304      	adds	r3, #4
 800711c:	f104 0715 	add.w	r7, r4, #21
 8007120:	42ba      	cmp	r2, r7
 8007122:	bf38      	it	cc
 8007124:	2304      	movcc	r3, #4
 8007126:	9301      	str	r3, [sp, #4]
 8007128:	9b02      	ldr	r3, [sp, #8]
 800712a:	9103      	str	r1, [sp, #12]
 800712c:	428b      	cmp	r3, r1
 800712e:	d80c      	bhi.n	800714a <__multiply+0x9e>
 8007130:	2e00      	cmp	r6, #0
 8007132:	dd03      	ble.n	800713c <__multiply+0x90>
 8007134:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007138:	2b00      	cmp	r3, #0
 800713a:	d05b      	beq.n	80071f4 <__multiply+0x148>
 800713c:	6106      	str	r6, [r0, #16]
 800713e:	b005      	add	sp, #20
 8007140:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007144:	f843 2b04 	str.w	r2, [r3], #4
 8007148:	e7d8      	b.n	80070fc <__multiply+0x50>
 800714a:	f8b1 a000 	ldrh.w	sl, [r1]
 800714e:	f1ba 0f00 	cmp.w	sl, #0
 8007152:	d024      	beq.n	800719e <__multiply+0xf2>
 8007154:	f104 0e14 	add.w	lr, r4, #20
 8007158:	46a9      	mov	r9, r5
 800715a:	f04f 0c00 	mov.w	ip, #0
 800715e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007162:	f8d9 3000 	ldr.w	r3, [r9]
 8007166:	fa1f fb87 	uxth.w	fp, r7
 800716a:	b29b      	uxth	r3, r3
 800716c:	fb0a 330b 	mla	r3, sl, fp, r3
 8007170:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8007174:	f8d9 7000 	ldr.w	r7, [r9]
 8007178:	4463      	add	r3, ip
 800717a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800717e:	fb0a c70b 	mla	r7, sl, fp, ip
 8007182:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 8007186:	b29b      	uxth	r3, r3
 8007188:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800718c:	4572      	cmp	r2, lr
 800718e:	f849 3b04 	str.w	r3, [r9], #4
 8007192:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8007196:	d8e2      	bhi.n	800715e <__multiply+0xb2>
 8007198:	9b01      	ldr	r3, [sp, #4]
 800719a:	f845 c003 	str.w	ip, [r5, r3]
 800719e:	9b03      	ldr	r3, [sp, #12]
 80071a0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80071a4:	3104      	adds	r1, #4
 80071a6:	f1b9 0f00 	cmp.w	r9, #0
 80071aa:	d021      	beq.n	80071f0 <__multiply+0x144>
 80071ac:	682b      	ldr	r3, [r5, #0]
 80071ae:	f104 0c14 	add.w	ip, r4, #20
 80071b2:	46ae      	mov	lr, r5
 80071b4:	f04f 0a00 	mov.w	sl, #0
 80071b8:	f8bc b000 	ldrh.w	fp, [ip]
 80071bc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80071c0:	fb09 770b 	mla	r7, r9, fp, r7
 80071c4:	4457      	add	r7, sl
 80071c6:	b29b      	uxth	r3, r3
 80071c8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80071cc:	f84e 3b04 	str.w	r3, [lr], #4
 80071d0:	f85c 3b04 	ldr.w	r3, [ip], #4
 80071d4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071d8:	f8be 3000 	ldrh.w	r3, [lr]
 80071dc:	fb09 330a 	mla	r3, r9, sl, r3
 80071e0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80071e4:	4562      	cmp	r2, ip
 80071e6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80071ea:	d8e5      	bhi.n	80071b8 <__multiply+0x10c>
 80071ec:	9f01      	ldr	r7, [sp, #4]
 80071ee:	51eb      	str	r3, [r5, r7]
 80071f0:	3504      	adds	r5, #4
 80071f2:	e799      	b.n	8007128 <__multiply+0x7c>
 80071f4:	3e01      	subs	r6, #1
 80071f6:	e79b      	b.n	8007130 <__multiply+0x84>
 80071f8:	08007e80 	.word	0x08007e80
 80071fc:	08007e91 	.word	0x08007e91

08007200 <__pow5mult>:
 8007200:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007204:	4615      	mov	r5, r2
 8007206:	f012 0203 	ands.w	r2, r2, #3
 800720a:	4607      	mov	r7, r0
 800720c:	460e      	mov	r6, r1
 800720e:	d007      	beq.n	8007220 <__pow5mult+0x20>
 8007210:	4c25      	ldr	r4, [pc, #148]	@ (80072a8 <__pow5mult+0xa8>)
 8007212:	3a01      	subs	r2, #1
 8007214:	2300      	movs	r3, #0
 8007216:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800721a:	f7ff fe9f 	bl	8006f5c <__multadd>
 800721e:	4606      	mov	r6, r0
 8007220:	10ad      	asrs	r5, r5, #2
 8007222:	d03d      	beq.n	80072a0 <__pow5mult+0xa0>
 8007224:	69fc      	ldr	r4, [r7, #28]
 8007226:	b97c      	cbnz	r4, 8007248 <__pow5mult+0x48>
 8007228:	2010      	movs	r0, #16
 800722a:	f7ff fd7f 	bl	8006d2c <malloc>
 800722e:	4602      	mov	r2, r0
 8007230:	61f8      	str	r0, [r7, #28]
 8007232:	b928      	cbnz	r0, 8007240 <__pow5mult+0x40>
 8007234:	4b1d      	ldr	r3, [pc, #116]	@ (80072ac <__pow5mult+0xac>)
 8007236:	481e      	ldr	r0, [pc, #120]	@ (80072b0 <__pow5mult+0xb0>)
 8007238:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800723c:	f000 fc4e 	bl	8007adc <__assert_func>
 8007240:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007244:	6004      	str	r4, [r0, #0]
 8007246:	60c4      	str	r4, [r0, #12]
 8007248:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800724c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007250:	b94c      	cbnz	r4, 8007266 <__pow5mult+0x66>
 8007252:	f240 2171 	movw	r1, #625	@ 0x271
 8007256:	4638      	mov	r0, r7
 8007258:	f7ff ff12 	bl	8007080 <__i2b>
 800725c:	2300      	movs	r3, #0
 800725e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007262:	4604      	mov	r4, r0
 8007264:	6003      	str	r3, [r0, #0]
 8007266:	f04f 0900 	mov.w	r9, #0
 800726a:	07eb      	lsls	r3, r5, #31
 800726c:	d50a      	bpl.n	8007284 <__pow5mult+0x84>
 800726e:	4631      	mov	r1, r6
 8007270:	4622      	mov	r2, r4
 8007272:	4638      	mov	r0, r7
 8007274:	f7ff ff1a 	bl	80070ac <__multiply>
 8007278:	4631      	mov	r1, r6
 800727a:	4680      	mov	r8, r0
 800727c:	4638      	mov	r0, r7
 800727e:	f7ff fe4b 	bl	8006f18 <_Bfree>
 8007282:	4646      	mov	r6, r8
 8007284:	106d      	asrs	r5, r5, #1
 8007286:	d00b      	beq.n	80072a0 <__pow5mult+0xa0>
 8007288:	6820      	ldr	r0, [r4, #0]
 800728a:	b938      	cbnz	r0, 800729c <__pow5mult+0x9c>
 800728c:	4622      	mov	r2, r4
 800728e:	4621      	mov	r1, r4
 8007290:	4638      	mov	r0, r7
 8007292:	f7ff ff0b 	bl	80070ac <__multiply>
 8007296:	6020      	str	r0, [r4, #0]
 8007298:	f8c0 9000 	str.w	r9, [r0]
 800729c:	4604      	mov	r4, r0
 800729e:	e7e4      	b.n	800726a <__pow5mult+0x6a>
 80072a0:	4630      	mov	r0, r6
 80072a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072a6:	bf00      	nop
 80072a8:	08007eec 	.word	0x08007eec
 80072ac:	08007e11 	.word	0x08007e11
 80072b0:	08007e91 	.word	0x08007e91

080072b4 <__lshift>:
 80072b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80072b8:	460c      	mov	r4, r1
 80072ba:	6849      	ldr	r1, [r1, #4]
 80072bc:	6923      	ldr	r3, [r4, #16]
 80072be:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80072c2:	68a3      	ldr	r3, [r4, #8]
 80072c4:	4607      	mov	r7, r0
 80072c6:	4691      	mov	r9, r2
 80072c8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80072cc:	f108 0601 	add.w	r6, r8, #1
 80072d0:	42b3      	cmp	r3, r6
 80072d2:	db0b      	blt.n	80072ec <__lshift+0x38>
 80072d4:	4638      	mov	r0, r7
 80072d6:	f7ff fddf 	bl	8006e98 <_Balloc>
 80072da:	4605      	mov	r5, r0
 80072dc:	b948      	cbnz	r0, 80072f2 <__lshift+0x3e>
 80072de:	4602      	mov	r2, r0
 80072e0:	4b28      	ldr	r3, [pc, #160]	@ (8007384 <__lshift+0xd0>)
 80072e2:	4829      	ldr	r0, [pc, #164]	@ (8007388 <__lshift+0xd4>)
 80072e4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80072e8:	f000 fbf8 	bl	8007adc <__assert_func>
 80072ec:	3101      	adds	r1, #1
 80072ee:	005b      	lsls	r3, r3, #1
 80072f0:	e7ee      	b.n	80072d0 <__lshift+0x1c>
 80072f2:	2300      	movs	r3, #0
 80072f4:	f100 0114 	add.w	r1, r0, #20
 80072f8:	f100 0210 	add.w	r2, r0, #16
 80072fc:	4618      	mov	r0, r3
 80072fe:	4553      	cmp	r3, sl
 8007300:	db33      	blt.n	800736a <__lshift+0xb6>
 8007302:	6920      	ldr	r0, [r4, #16]
 8007304:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007308:	f104 0314 	add.w	r3, r4, #20
 800730c:	f019 091f 	ands.w	r9, r9, #31
 8007310:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007314:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007318:	d02b      	beq.n	8007372 <__lshift+0xbe>
 800731a:	f1c9 0e20 	rsb	lr, r9, #32
 800731e:	468a      	mov	sl, r1
 8007320:	2200      	movs	r2, #0
 8007322:	6818      	ldr	r0, [r3, #0]
 8007324:	fa00 f009 	lsl.w	r0, r0, r9
 8007328:	4310      	orrs	r0, r2
 800732a:	f84a 0b04 	str.w	r0, [sl], #4
 800732e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007332:	459c      	cmp	ip, r3
 8007334:	fa22 f20e 	lsr.w	r2, r2, lr
 8007338:	d8f3      	bhi.n	8007322 <__lshift+0x6e>
 800733a:	ebac 0304 	sub.w	r3, ip, r4
 800733e:	3b15      	subs	r3, #21
 8007340:	f023 0303 	bic.w	r3, r3, #3
 8007344:	3304      	adds	r3, #4
 8007346:	f104 0015 	add.w	r0, r4, #21
 800734a:	4584      	cmp	ip, r0
 800734c:	bf38      	it	cc
 800734e:	2304      	movcc	r3, #4
 8007350:	50ca      	str	r2, [r1, r3]
 8007352:	b10a      	cbz	r2, 8007358 <__lshift+0xa4>
 8007354:	f108 0602 	add.w	r6, r8, #2
 8007358:	3e01      	subs	r6, #1
 800735a:	4638      	mov	r0, r7
 800735c:	612e      	str	r6, [r5, #16]
 800735e:	4621      	mov	r1, r4
 8007360:	f7ff fdda 	bl	8006f18 <_Bfree>
 8007364:	4628      	mov	r0, r5
 8007366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800736a:	f842 0f04 	str.w	r0, [r2, #4]!
 800736e:	3301      	adds	r3, #1
 8007370:	e7c5      	b.n	80072fe <__lshift+0x4a>
 8007372:	3904      	subs	r1, #4
 8007374:	f853 2b04 	ldr.w	r2, [r3], #4
 8007378:	f841 2f04 	str.w	r2, [r1, #4]!
 800737c:	459c      	cmp	ip, r3
 800737e:	d8f9      	bhi.n	8007374 <__lshift+0xc0>
 8007380:	e7ea      	b.n	8007358 <__lshift+0xa4>
 8007382:	bf00      	nop
 8007384:	08007e80 	.word	0x08007e80
 8007388:	08007e91 	.word	0x08007e91

0800738c <__mcmp>:
 800738c:	690a      	ldr	r2, [r1, #16]
 800738e:	4603      	mov	r3, r0
 8007390:	6900      	ldr	r0, [r0, #16]
 8007392:	1a80      	subs	r0, r0, r2
 8007394:	b530      	push	{r4, r5, lr}
 8007396:	d10e      	bne.n	80073b6 <__mcmp+0x2a>
 8007398:	3314      	adds	r3, #20
 800739a:	3114      	adds	r1, #20
 800739c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80073a0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80073a4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80073a8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80073ac:	4295      	cmp	r5, r2
 80073ae:	d003      	beq.n	80073b8 <__mcmp+0x2c>
 80073b0:	d205      	bcs.n	80073be <__mcmp+0x32>
 80073b2:	f04f 30ff 	mov.w	r0, #4294967295
 80073b6:	bd30      	pop	{r4, r5, pc}
 80073b8:	42a3      	cmp	r3, r4
 80073ba:	d3f3      	bcc.n	80073a4 <__mcmp+0x18>
 80073bc:	e7fb      	b.n	80073b6 <__mcmp+0x2a>
 80073be:	2001      	movs	r0, #1
 80073c0:	e7f9      	b.n	80073b6 <__mcmp+0x2a>
	...

080073c4 <__mdiff>:
 80073c4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80073c8:	4689      	mov	r9, r1
 80073ca:	4606      	mov	r6, r0
 80073cc:	4611      	mov	r1, r2
 80073ce:	4648      	mov	r0, r9
 80073d0:	4614      	mov	r4, r2
 80073d2:	f7ff ffdb 	bl	800738c <__mcmp>
 80073d6:	1e05      	subs	r5, r0, #0
 80073d8:	d112      	bne.n	8007400 <__mdiff+0x3c>
 80073da:	4629      	mov	r1, r5
 80073dc:	4630      	mov	r0, r6
 80073de:	f7ff fd5b 	bl	8006e98 <_Balloc>
 80073e2:	4602      	mov	r2, r0
 80073e4:	b928      	cbnz	r0, 80073f2 <__mdiff+0x2e>
 80073e6:	4b3f      	ldr	r3, [pc, #252]	@ (80074e4 <__mdiff+0x120>)
 80073e8:	f240 2137 	movw	r1, #567	@ 0x237
 80073ec:	483e      	ldr	r0, [pc, #248]	@ (80074e8 <__mdiff+0x124>)
 80073ee:	f000 fb75 	bl	8007adc <__assert_func>
 80073f2:	2301      	movs	r3, #1
 80073f4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80073f8:	4610      	mov	r0, r2
 80073fa:	b003      	add	sp, #12
 80073fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007400:	bfbc      	itt	lt
 8007402:	464b      	movlt	r3, r9
 8007404:	46a1      	movlt	r9, r4
 8007406:	4630      	mov	r0, r6
 8007408:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800740c:	bfba      	itte	lt
 800740e:	461c      	movlt	r4, r3
 8007410:	2501      	movlt	r5, #1
 8007412:	2500      	movge	r5, #0
 8007414:	f7ff fd40 	bl	8006e98 <_Balloc>
 8007418:	4602      	mov	r2, r0
 800741a:	b918      	cbnz	r0, 8007424 <__mdiff+0x60>
 800741c:	4b31      	ldr	r3, [pc, #196]	@ (80074e4 <__mdiff+0x120>)
 800741e:	f240 2145 	movw	r1, #581	@ 0x245
 8007422:	e7e3      	b.n	80073ec <__mdiff+0x28>
 8007424:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007428:	6926      	ldr	r6, [r4, #16]
 800742a:	60c5      	str	r5, [r0, #12]
 800742c:	f109 0310 	add.w	r3, r9, #16
 8007430:	f109 0514 	add.w	r5, r9, #20
 8007434:	f104 0e14 	add.w	lr, r4, #20
 8007438:	f100 0b14 	add.w	fp, r0, #20
 800743c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007440:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007444:	9301      	str	r3, [sp, #4]
 8007446:	46d9      	mov	r9, fp
 8007448:	f04f 0c00 	mov.w	ip, #0
 800744c:	9b01      	ldr	r3, [sp, #4]
 800744e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007452:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007456:	9301      	str	r3, [sp, #4]
 8007458:	fa1f f38a 	uxth.w	r3, sl
 800745c:	4619      	mov	r1, r3
 800745e:	b283      	uxth	r3, r0
 8007460:	1acb      	subs	r3, r1, r3
 8007462:	0c00      	lsrs	r0, r0, #16
 8007464:	4463      	add	r3, ip
 8007466:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800746a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800746e:	b29b      	uxth	r3, r3
 8007470:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8007474:	4576      	cmp	r6, lr
 8007476:	f849 3b04 	str.w	r3, [r9], #4
 800747a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800747e:	d8e5      	bhi.n	800744c <__mdiff+0x88>
 8007480:	1b33      	subs	r3, r6, r4
 8007482:	3b15      	subs	r3, #21
 8007484:	f023 0303 	bic.w	r3, r3, #3
 8007488:	3415      	adds	r4, #21
 800748a:	3304      	adds	r3, #4
 800748c:	42a6      	cmp	r6, r4
 800748e:	bf38      	it	cc
 8007490:	2304      	movcc	r3, #4
 8007492:	441d      	add	r5, r3
 8007494:	445b      	add	r3, fp
 8007496:	461e      	mov	r6, r3
 8007498:	462c      	mov	r4, r5
 800749a:	4544      	cmp	r4, r8
 800749c:	d30e      	bcc.n	80074bc <__mdiff+0xf8>
 800749e:	f108 0103 	add.w	r1, r8, #3
 80074a2:	1b49      	subs	r1, r1, r5
 80074a4:	f021 0103 	bic.w	r1, r1, #3
 80074a8:	3d03      	subs	r5, #3
 80074aa:	45a8      	cmp	r8, r5
 80074ac:	bf38      	it	cc
 80074ae:	2100      	movcc	r1, #0
 80074b0:	440b      	add	r3, r1
 80074b2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80074b6:	b191      	cbz	r1, 80074de <__mdiff+0x11a>
 80074b8:	6117      	str	r7, [r2, #16]
 80074ba:	e79d      	b.n	80073f8 <__mdiff+0x34>
 80074bc:	f854 1b04 	ldr.w	r1, [r4], #4
 80074c0:	46e6      	mov	lr, ip
 80074c2:	0c08      	lsrs	r0, r1, #16
 80074c4:	fa1c fc81 	uxtah	ip, ip, r1
 80074c8:	4471      	add	r1, lr
 80074ca:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80074ce:	b289      	uxth	r1, r1
 80074d0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80074d4:	f846 1b04 	str.w	r1, [r6], #4
 80074d8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80074dc:	e7dd      	b.n	800749a <__mdiff+0xd6>
 80074de:	3f01      	subs	r7, #1
 80074e0:	e7e7      	b.n	80074b2 <__mdiff+0xee>
 80074e2:	bf00      	nop
 80074e4:	08007e80 	.word	0x08007e80
 80074e8:	08007e91 	.word	0x08007e91

080074ec <__d2b>:
 80074ec:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80074f0:	460f      	mov	r7, r1
 80074f2:	2101      	movs	r1, #1
 80074f4:	ec59 8b10 	vmov	r8, r9, d0
 80074f8:	4616      	mov	r6, r2
 80074fa:	f7ff fccd 	bl	8006e98 <_Balloc>
 80074fe:	4604      	mov	r4, r0
 8007500:	b930      	cbnz	r0, 8007510 <__d2b+0x24>
 8007502:	4602      	mov	r2, r0
 8007504:	4b23      	ldr	r3, [pc, #140]	@ (8007594 <__d2b+0xa8>)
 8007506:	4824      	ldr	r0, [pc, #144]	@ (8007598 <__d2b+0xac>)
 8007508:	f240 310f 	movw	r1, #783	@ 0x30f
 800750c:	f000 fae6 	bl	8007adc <__assert_func>
 8007510:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007514:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007518:	b10d      	cbz	r5, 800751e <__d2b+0x32>
 800751a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800751e:	9301      	str	r3, [sp, #4]
 8007520:	f1b8 0300 	subs.w	r3, r8, #0
 8007524:	d023      	beq.n	800756e <__d2b+0x82>
 8007526:	4668      	mov	r0, sp
 8007528:	9300      	str	r3, [sp, #0]
 800752a:	f7ff fd7c 	bl	8007026 <__lo0bits>
 800752e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007532:	b1d0      	cbz	r0, 800756a <__d2b+0x7e>
 8007534:	f1c0 0320 	rsb	r3, r0, #32
 8007538:	fa02 f303 	lsl.w	r3, r2, r3
 800753c:	430b      	orrs	r3, r1
 800753e:	40c2      	lsrs	r2, r0
 8007540:	6163      	str	r3, [r4, #20]
 8007542:	9201      	str	r2, [sp, #4]
 8007544:	9b01      	ldr	r3, [sp, #4]
 8007546:	61a3      	str	r3, [r4, #24]
 8007548:	2b00      	cmp	r3, #0
 800754a:	bf0c      	ite	eq
 800754c:	2201      	moveq	r2, #1
 800754e:	2202      	movne	r2, #2
 8007550:	6122      	str	r2, [r4, #16]
 8007552:	b1a5      	cbz	r5, 800757e <__d2b+0x92>
 8007554:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007558:	4405      	add	r5, r0
 800755a:	603d      	str	r5, [r7, #0]
 800755c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007560:	6030      	str	r0, [r6, #0]
 8007562:	4620      	mov	r0, r4
 8007564:	b003      	add	sp, #12
 8007566:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800756a:	6161      	str	r1, [r4, #20]
 800756c:	e7ea      	b.n	8007544 <__d2b+0x58>
 800756e:	a801      	add	r0, sp, #4
 8007570:	f7ff fd59 	bl	8007026 <__lo0bits>
 8007574:	9b01      	ldr	r3, [sp, #4]
 8007576:	6163      	str	r3, [r4, #20]
 8007578:	3020      	adds	r0, #32
 800757a:	2201      	movs	r2, #1
 800757c:	e7e8      	b.n	8007550 <__d2b+0x64>
 800757e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007582:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007586:	6038      	str	r0, [r7, #0]
 8007588:	6918      	ldr	r0, [r3, #16]
 800758a:	f7ff fd2d 	bl	8006fe8 <__hi0bits>
 800758e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007592:	e7e5      	b.n	8007560 <__d2b+0x74>
 8007594:	08007e80 	.word	0x08007e80
 8007598:	08007e91 	.word	0x08007e91

0800759c <__sfputc_r>:
 800759c:	6893      	ldr	r3, [r2, #8]
 800759e:	3b01      	subs	r3, #1
 80075a0:	2b00      	cmp	r3, #0
 80075a2:	b410      	push	{r4}
 80075a4:	6093      	str	r3, [r2, #8]
 80075a6:	da08      	bge.n	80075ba <__sfputc_r+0x1e>
 80075a8:	6994      	ldr	r4, [r2, #24]
 80075aa:	42a3      	cmp	r3, r4
 80075ac:	db01      	blt.n	80075b2 <__sfputc_r+0x16>
 80075ae:	290a      	cmp	r1, #10
 80075b0:	d103      	bne.n	80075ba <__sfputc_r+0x1e>
 80075b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075b6:	f000 b9df 	b.w	8007978 <__swbuf_r>
 80075ba:	6813      	ldr	r3, [r2, #0]
 80075bc:	1c58      	adds	r0, r3, #1
 80075be:	6010      	str	r0, [r2, #0]
 80075c0:	7019      	strb	r1, [r3, #0]
 80075c2:	4608      	mov	r0, r1
 80075c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <__sfputs_r>:
 80075ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80075cc:	4606      	mov	r6, r0
 80075ce:	460f      	mov	r7, r1
 80075d0:	4614      	mov	r4, r2
 80075d2:	18d5      	adds	r5, r2, r3
 80075d4:	42ac      	cmp	r4, r5
 80075d6:	d101      	bne.n	80075dc <__sfputs_r+0x12>
 80075d8:	2000      	movs	r0, #0
 80075da:	e007      	b.n	80075ec <__sfputs_r+0x22>
 80075dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80075e0:	463a      	mov	r2, r7
 80075e2:	4630      	mov	r0, r6
 80075e4:	f7ff ffda 	bl	800759c <__sfputc_r>
 80075e8:	1c43      	adds	r3, r0, #1
 80075ea:	d1f3      	bne.n	80075d4 <__sfputs_r+0xa>
 80075ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080075f0 <_vfiprintf_r>:
 80075f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075f4:	460d      	mov	r5, r1
 80075f6:	b09d      	sub	sp, #116	@ 0x74
 80075f8:	4614      	mov	r4, r2
 80075fa:	4698      	mov	r8, r3
 80075fc:	4606      	mov	r6, r0
 80075fe:	b118      	cbz	r0, 8007608 <_vfiprintf_r+0x18>
 8007600:	6a03      	ldr	r3, [r0, #32]
 8007602:	b90b      	cbnz	r3, 8007608 <_vfiprintf_r+0x18>
 8007604:	f7fe fbee 	bl	8005de4 <__sinit>
 8007608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800760a:	07d9      	lsls	r1, r3, #31
 800760c:	d405      	bmi.n	800761a <_vfiprintf_r+0x2a>
 800760e:	89ab      	ldrh	r3, [r5, #12]
 8007610:	059a      	lsls	r2, r3, #22
 8007612:	d402      	bmi.n	800761a <_vfiprintf_r+0x2a>
 8007614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007616:	f7fe fcee 	bl	8005ff6 <__retarget_lock_acquire_recursive>
 800761a:	89ab      	ldrh	r3, [r5, #12]
 800761c:	071b      	lsls	r3, r3, #28
 800761e:	d501      	bpl.n	8007624 <_vfiprintf_r+0x34>
 8007620:	692b      	ldr	r3, [r5, #16]
 8007622:	b99b      	cbnz	r3, 800764c <_vfiprintf_r+0x5c>
 8007624:	4629      	mov	r1, r5
 8007626:	4630      	mov	r0, r6
 8007628:	f000 f9e4 	bl	80079f4 <__swsetup_r>
 800762c:	b170      	cbz	r0, 800764c <_vfiprintf_r+0x5c>
 800762e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007630:	07dc      	lsls	r4, r3, #31
 8007632:	d504      	bpl.n	800763e <_vfiprintf_r+0x4e>
 8007634:	f04f 30ff 	mov.w	r0, #4294967295
 8007638:	b01d      	add	sp, #116	@ 0x74
 800763a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800763e:	89ab      	ldrh	r3, [r5, #12]
 8007640:	0598      	lsls	r0, r3, #22
 8007642:	d4f7      	bmi.n	8007634 <_vfiprintf_r+0x44>
 8007644:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007646:	f7fe fcd7 	bl	8005ff8 <__retarget_lock_release_recursive>
 800764a:	e7f3      	b.n	8007634 <_vfiprintf_r+0x44>
 800764c:	2300      	movs	r3, #0
 800764e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007650:	2320      	movs	r3, #32
 8007652:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007656:	f8cd 800c 	str.w	r8, [sp, #12]
 800765a:	2330      	movs	r3, #48	@ 0x30
 800765c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800780c <_vfiprintf_r+0x21c>
 8007660:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007664:	f04f 0901 	mov.w	r9, #1
 8007668:	4623      	mov	r3, r4
 800766a:	469a      	mov	sl, r3
 800766c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007670:	b10a      	cbz	r2, 8007676 <_vfiprintf_r+0x86>
 8007672:	2a25      	cmp	r2, #37	@ 0x25
 8007674:	d1f9      	bne.n	800766a <_vfiprintf_r+0x7a>
 8007676:	ebba 0b04 	subs.w	fp, sl, r4
 800767a:	d00b      	beq.n	8007694 <_vfiprintf_r+0xa4>
 800767c:	465b      	mov	r3, fp
 800767e:	4622      	mov	r2, r4
 8007680:	4629      	mov	r1, r5
 8007682:	4630      	mov	r0, r6
 8007684:	f7ff ffa1 	bl	80075ca <__sfputs_r>
 8007688:	3001      	adds	r0, #1
 800768a:	f000 80a7 	beq.w	80077dc <_vfiprintf_r+0x1ec>
 800768e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007690:	445a      	add	r2, fp
 8007692:	9209      	str	r2, [sp, #36]	@ 0x24
 8007694:	f89a 3000 	ldrb.w	r3, [sl]
 8007698:	2b00      	cmp	r3, #0
 800769a:	f000 809f 	beq.w	80077dc <_vfiprintf_r+0x1ec>
 800769e:	2300      	movs	r3, #0
 80076a0:	f04f 32ff 	mov.w	r2, #4294967295
 80076a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80076a8:	f10a 0a01 	add.w	sl, sl, #1
 80076ac:	9304      	str	r3, [sp, #16]
 80076ae:	9307      	str	r3, [sp, #28]
 80076b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80076b4:	931a      	str	r3, [sp, #104]	@ 0x68
 80076b6:	4654      	mov	r4, sl
 80076b8:	2205      	movs	r2, #5
 80076ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80076be:	4853      	ldr	r0, [pc, #332]	@ (800780c <_vfiprintf_r+0x21c>)
 80076c0:	f7f8 fd8e 	bl	80001e0 <memchr>
 80076c4:	9a04      	ldr	r2, [sp, #16]
 80076c6:	b9d8      	cbnz	r0, 8007700 <_vfiprintf_r+0x110>
 80076c8:	06d1      	lsls	r1, r2, #27
 80076ca:	bf44      	itt	mi
 80076cc:	2320      	movmi	r3, #32
 80076ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076d2:	0713      	lsls	r3, r2, #28
 80076d4:	bf44      	itt	mi
 80076d6:	232b      	movmi	r3, #43	@ 0x2b
 80076d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80076dc:	f89a 3000 	ldrb.w	r3, [sl]
 80076e0:	2b2a      	cmp	r3, #42	@ 0x2a
 80076e2:	d015      	beq.n	8007710 <_vfiprintf_r+0x120>
 80076e4:	9a07      	ldr	r2, [sp, #28]
 80076e6:	4654      	mov	r4, sl
 80076e8:	2000      	movs	r0, #0
 80076ea:	f04f 0c0a 	mov.w	ip, #10
 80076ee:	4621      	mov	r1, r4
 80076f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80076f4:	3b30      	subs	r3, #48	@ 0x30
 80076f6:	2b09      	cmp	r3, #9
 80076f8:	d94b      	bls.n	8007792 <_vfiprintf_r+0x1a2>
 80076fa:	b1b0      	cbz	r0, 800772a <_vfiprintf_r+0x13a>
 80076fc:	9207      	str	r2, [sp, #28]
 80076fe:	e014      	b.n	800772a <_vfiprintf_r+0x13a>
 8007700:	eba0 0308 	sub.w	r3, r0, r8
 8007704:	fa09 f303 	lsl.w	r3, r9, r3
 8007708:	4313      	orrs	r3, r2
 800770a:	9304      	str	r3, [sp, #16]
 800770c:	46a2      	mov	sl, r4
 800770e:	e7d2      	b.n	80076b6 <_vfiprintf_r+0xc6>
 8007710:	9b03      	ldr	r3, [sp, #12]
 8007712:	1d19      	adds	r1, r3, #4
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	9103      	str	r1, [sp, #12]
 8007718:	2b00      	cmp	r3, #0
 800771a:	bfbb      	ittet	lt
 800771c:	425b      	neglt	r3, r3
 800771e:	f042 0202 	orrlt.w	r2, r2, #2
 8007722:	9307      	strge	r3, [sp, #28]
 8007724:	9307      	strlt	r3, [sp, #28]
 8007726:	bfb8      	it	lt
 8007728:	9204      	strlt	r2, [sp, #16]
 800772a:	7823      	ldrb	r3, [r4, #0]
 800772c:	2b2e      	cmp	r3, #46	@ 0x2e
 800772e:	d10a      	bne.n	8007746 <_vfiprintf_r+0x156>
 8007730:	7863      	ldrb	r3, [r4, #1]
 8007732:	2b2a      	cmp	r3, #42	@ 0x2a
 8007734:	d132      	bne.n	800779c <_vfiprintf_r+0x1ac>
 8007736:	9b03      	ldr	r3, [sp, #12]
 8007738:	1d1a      	adds	r2, r3, #4
 800773a:	681b      	ldr	r3, [r3, #0]
 800773c:	9203      	str	r2, [sp, #12]
 800773e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007742:	3402      	adds	r4, #2
 8007744:	9305      	str	r3, [sp, #20]
 8007746:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800781c <_vfiprintf_r+0x22c>
 800774a:	7821      	ldrb	r1, [r4, #0]
 800774c:	2203      	movs	r2, #3
 800774e:	4650      	mov	r0, sl
 8007750:	f7f8 fd46 	bl	80001e0 <memchr>
 8007754:	b138      	cbz	r0, 8007766 <_vfiprintf_r+0x176>
 8007756:	9b04      	ldr	r3, [sp, #16]
 8007758:	eba0 000a 	sub.w	r0, r0, sl
 800775c:	2240      	movs	r2, #64	@ 0x40
 800775e:	4082      	lsls	r2, r0
 8007760:	4313      	orrs	r3, r2
 8007762:	3401      	adds	r4, #1
 8007764:	9304      	str	r3, [sp, #16]
 8007766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776a:	4829      	ldr	r0, [pc, #164]	@ (8007810 <_vfiprintf_r+0x220>)
 800776c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007770:	2206      	movs	r2, #6
 8007772:	f7f8 fd35 	bl	80001e0 <memchr>
 8007776:	2800      	cmp	r0, #0
 8007778:	d03f      	beq.n	80077fa <_vfiprintf_r+0x20a>
 800777a:	4b26      	ldr	r3, [pc, #152]	@ (8007814 <_vfiprintf_r+0x224>)
 800777c:	bb1b      	cbnz	r3, 80077c6 <_vfiprintf_r+0x1d6>
 800777e:	9b03      	ldr	r3, [sp, #12]
 8007780:	3307      	adds	r3, #7
 8007782:	f023 0307 	bic.w	r3, r3, #7
 8007786:	3308      	adds	r3, #8
 8007788:	9303      	str	r3, [sp, #12]
 800778a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800778c:	443b      	add	r3, r7
 800778e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007790:	e76a      	b.n	8007668 <_vfiprintf_r+0x78>
 8007792:	fb0c 3202 	mla	r2, ip, r2, r3
 8007796:	460c      	mov	r4, r1
 8007798:	2001      	movs	r0, #1
 800779a:	e7a8      	b.n	80076ee <_vfiprintf_r+0xfe>
 800779c:	2300      	movs	r3, #0
 800779e:	3401      	adds	r4, #1
 80077a0:	9305      	str	r3, [sp, #20]
 80077a2:	4619      	mov	r1, r3
 80077a4:	f04f 0c0a 	mov.w	ip, #10
 80077a8:	4620      	mov	r0, r4
 80077aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 80077ae:	3a30      	subs	r2, #48	@ 0x30
 80077b0:	2a09      	cmp	r2, #9
 80077b2:	d903      	bls.n	80077bc <_vfiprintf_r+0x1cc>
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d0c6      	beq.n	8007746 <_vfiprintf_r+0x156>
 80077b8:	9105      	str	r1, [sp, #20]
 80077ba:	e7c4      	b.n	8007746 <_vfiprintf_r+0x156>
 80077bc:	fb0c 2101 	mla	r1, ip, r1, r2
 80077c0:	4604      	mov	r4, r0
 80077c2:	2301      	movs	r3, #1
 80077c4:	e7f0      	b.n	80077a8 <_vfiprintf_r+0x1b8>
 80077c6:	ab03      	add	r3, sp, #12
 80077c8:	9300      	str	r3, [sp, #0]
 80077ca:	462a      	mov	r2, r5
 80077cc:	4b12      	ldr	r3, [pc, #72]	@ (8007818 <_vfiprintf_r+0x228>)
 80077ce:	a904      	add	r1, sp, #16
 80077d0:	4630      	mov	r0, r6
 80077d2:	f7fd fec3 	bl	800555c <_printf_float>
 80077d6:	4607      	mov	r7, r0
 80077d8:	1c78      	adds	r0, r7, #1
 80077da:	d1d6      	bne.n	800778a <_vfiprintf_r+0x19a>
 80077dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80077de:	07d9      	lsls	r1, r3, #31
 80077e0:	d405      	bmi.n	80077ee <_vfiprintf_r+0x1fe>
 80077e2:	89ab      	ldrh	r3, [r5, #12]
 80077e4:	059a      	lsls	r2, r3, #22
 80077e6:	d402      	bmi.n	80077ee <_vfiprintf_r+0x1fe>
 80077e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80077ea:	f7fe fc05 	bl	8005ff8 <__retarget_lock_release_recursive>
 80077ee:	89ab      	ldrh	r3, [r5, #12]
 80077f0:	065b      	lsls	r3, r3, #25
 80077f2:	f53f af1f 	bmi.w	8007634 <_vfiprintf_r+0x44>
 80077f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80077f8:	e71e      	b.n	8007638 <_vfiprintf_r+0x48>
 80077fa:	ab03      	add	r3, sp, #12
 80077fc:	9300      	str	r3, [sp, #0]
 80077fe:	462a      	mov	r2, r5
 8007800:	4b05      	ldr	r3, [pc, #20]	@ (8007818 <_vfiprintf_r+0x228>)
 8007802:	a904      	add	r1, sp, #16
 8007804:	4630      	mov	r0, r6
 8007806:	f7fe f941 	bl	8005a8c <_printf_i>
 800780a:	e7e4      	b.n	80077d6 <_vfiprintf_r+0x1e6>
 800780c:	08007fe8 	.word	0x08007fe8
 8007810:	08007ff2 	.word	0x08007ff2
 8007814:	0800555d 	.word	0x0800555d
 8007818:	080075cb 	.word	0x080075cb
 800781c:	08007fee 	.word	0x08007fee

08007820 <__sflush_r>:
 8007820:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007828:	0716      	lsls	r6, r2, #28
 800782a:	4605      	mov	r5, r0
 800782c:	460c      	mov	r4, r1
 800782e:	d454      	bmi.n	80078da <__sflush_r+0xba>
 8007830:	684b      	ldr	r3, [r1, #4]
 8007832:	2b00      	cmp	r3, #0
 8007834:	dc02      	bgt.n	800783c <__sflush_r+0x1c>
 8007836:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007838:	2b00      	cmp	r3, #0
 800783a:	dd48      	ble.n	80078ce <__sflush_r+0xae>
 800783c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800783e:	2e00      	cmp	r6, #0
 8007840:	d045      	beq.n	80078ce <__sflush_r+0xae>
 8007842:	2300      	movs	r3, #0
 8007844:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8007848:	682f      	ldr	r7, [r5, #0]
 800784a:	6a21      	ldr	r1, [r4, #32]
 800784c:	602b      	str	r3, [r5, #0]
 800784e:	d030      	beq.n	80078b2 <__sflush_r+0x92>
 8007850:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8007852:	89a3      	ldrh	r3, [r4, #12]
 8007854:	0759      	lsls	r1, r3, #29
 8007856:	d505      	bpl.n	8007864 <__sflush_r+0x44>
 8007858:	6863      	ldr	r3, [r4, #4]
 800785a:	1ad2      	subs	r2, r2, r3
 800785c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800785e:	b10b      	cbz	r3, 8007864 <__sflush_r+0x44>
 8007860:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8007862:	1ad2      	subs	r2, r2, r3
 8007864:	2300      	movs	r3, #0
 8007866:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8007868:	6a21      	ldr	r1, [r4, #32]
 800786a:	4628      	mov	r0, r5
 800786c:	47b0      	blx	r6
 800786e:	1c43      	adds	r3, r0, #1
 8007870:	89a3      	ldrh	r3, [r4, #12]
 8007872:	d106      	bne.n	8007882 <__sflush_r+0x62>
 8007874:	6829      	ldr	r1, [r5, #0]
 8007876:	291d      	cmp	r1, #29
 8007878:	d82b      	bhi.n	80078d2 <__sflush_r+0xb2>
 800787a:	4a2a      	ldr	r2, [pc, #168]	@ (8007924 <__sflush_r+0x104>)
 800787c:	410a      	asrs	r2, r1
 800787e:	07d6      	lsls	r6, r2, #31
 8007880:	d427      	bmi.n	80078d2 <__sflush_r+0xb2>
 8007882:	2200      	movs	r2, #0
 8007884:	6062      	str	r2, [r4, #4]
 8007886:	04d9      	lsls	r1, r3, #19
 8007888:	6922      	ldr	r2, [r4, #16]
 800788a:	6022      	str	r2, [r4, #0]
 800788c:	d504      	bpl.n	8007898 <__sflush_r+0x78>
 800788e:	1c42      	adds	r2, r0, #1
 8007890:	d101      	bne.n	8007896 <__sflush_r+0x76>
 8007892:	682b      	ldr	r3, [r5, #0]
 8007894:	b903      	cbnz	r3, 8007898 <__sflush_r+0x78>
 8007896:	6560      	str	r0, [r4, #84]	@ 0x54
 8007898:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800789a:	602f      	str	r7, [r5, #0]
 800789c:	b1b9      	cbz	r1, 80078ce <__sflush_r+0xae>
 800789e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80078a2:	4299      	cmp	r1, r3
 80078a4:	d002      	beq.n	80078ac <__sflush_r+0x8c>
 80078a6:	4628      	mov	r0, r5
 80078a8:	f7ff f9f6 	bl	8006c98 <_free_r>
 80078ac:	2300      	movs	r3, #0
 80078ae:	6363      	str	r3, [r4, #52]	@ 0x34
 80078b0:	e00d      	b.n	80078ce <__sflush_r+0xae>
 80078b2:	2301      	movs	r3, #1
 80078b4:	4628      	mov	r0, r5
 80078b6:	47b0      	blx	r6
 80078b8:	4602      	mov	r2, r0
 80078ba:	1c50      	adds	r0, r2, #1
 80078bc:	d1c9      	bne.n	8007852 <__sflush_r+0x32>
 80078be:	682b      	ldr	r3, [r5, #0]
 80078c0:	2b00      	cmp	r3, #0
 80078c2:	d0c6      	beq.n	8007852 <__sflush_r+0x32>
 80078c4:	2b1d      	cmp	r3, #29
 80078c6:	d001      	beq.n	80078cc <__sflush_r+0xac>
 80078c8:	2b16      	cmp	r3, #22
 80078ca:	d11e      	bne.n	800790a <__sflush_r+0xea>
 80078cc:	602f      	str	r7, [r5, #0]
 80078ce:	2000      	movs	r0, #0
 80078d0:	e022      	b.n	8007918 <__sflush_r+0xf8>
 80078d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80078d6:	b21b      	sxth	r3, r3
 80078d8:	e01b      	b.n	8007912 <__sflush_r+0xf2>
 80078da:	690f      	ldr	r7, [r1, #16]
 80078dc:	2f00      	cmp	r7, #0
 80078de:	d0f6      	beq.n	80078ce <__sflush_r+0xae>
 80078e0:	0793      	lsls	r3, r2, #30
 80078e2:	680e      	ldr	r6, [r1, #0]
 80078e4:	bf08      	it	eq
 80078e6:	694b      	ldreq	r3, [r1, #20]
 80078e8:	600f      	str	r7, [r1, #0]
 80078ea:	bf18      	it	ne
 80078ec:	2300      	movne	r3, #0
 80078ee:	eba6 0807 	sub.w	r8, r6, r7
 80078f2:	608b      	str	r3, [r1, #8]
 80078f4:	f1b8 0f00 	cmp.w	r8, #0
 80078f8:	dde9      	ble.n	80078ce <__sflush_r+0xae>
 80078fa:	6a21      	ldr	r1, [r4, #32]
 80078fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80078fe:	4643      	mov	r3, r8
 8007900:	463a      	mov	r2, r7
 8007902:	4628      	mov	r0, r5
 8007904:	47b0      	blx	r6
 8007906:	2800      	cmp	r0, #0
 8007908:	dc08      	bgt.n	800791c <__sflush_r+0xfc>
 800790a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800790e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007912:	81a3      	strh	r3, [r4, #12]
 8007914:	f04f 30ff 	mov.w	r0, #4294967295
 8007918:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800791c:	4407      	add	r7, r0
 800791e:	eba8 0800 	sub.w	r8, r8, r0
 8007922:	e7e7      	b.n	80078f4 <__sflush_r+0xd4>
 8007924:	dfbffffe 	.word	0xdfbffffe

08007928 <_fflush_r>:
 8007928:	b538      	push	{r3, r4, r5, lr}
 800792a:	690b      	ldr	r3, [r1, #16]
 800792c:	4605      	mov	r5, r0
 800792e:	460c      	mov	r4, r1
 8007930:	b913      	cbnz	r3, 8007938 <_fflush_r+0x10>
 8007932:	2500      	movs	r5, #0
 8007934:	4628      	mov	r0, r5
 8007936:	bd38      	pop	{r3, r4, r5, pc}
 8007938:	b118      	cbz	r0, 8007942 <_fflush_r+0x1a>
 800793a:	6a03      	ldr	r3, [r0, #32]
 800793c:	b90b      	cbnz	r3, 8007942 <_fflush_r+0x1a>
 800793e:	f7fe fa51 	bl	8005de4 <__sinit>
 8007942:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007946:	2b00      	cmp	r3, #0
 8007948:	d0f3      	beq.n	8007932 <_fflush_r+0xa>
 800794a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800794c:	07d0      	lsls	r0, r2, #31
 800794e:	d404      	bmi.n	800795a <_fflush_r+0x32>
 8007950:	0599      	lsls	r1, r3, #22
 8007952:	d402      	bmi.n	800795a <_fflush_r+0x32>
 8007954:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007956:	f7fe fb4e 	bl	8005ff6 <__retarget_lock_acquire_recursive>
 800795a:	4628      	mov	r0, r5
 800795c:	4621      	mov	r1, r4
 800795e:	f7ff ff5f 	bl	8007820 <__sflush_r>
 8007962:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007964:	07da      	lsls	r2, r3, #31
 8007966:	4605      	mov	r5, r0
 8007968:	d4e4      	bmi.n	8007934 <_fflush_r+0xc>
 800796a:	89a3      	ldrh	r3, [r4, #12]
 800796c:	059b      	lsls	r3, r3, #22
 800796e:	d4e1      	bmi.n	8007934 <_fflush_r+0xc>
 8007970:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007972:	f7fe fb41 	bl	8005ff8 <__retarget_lock_release_recursive>
 8007976:	e7dd      	b.n	8007934 <_fflush_r+0xc>

08007978 <__swbuf_r>:
 8007978:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800797a:	460e      	mov	r6, r1
 800797c:	4614      	mov	r4, r2
 800797e:	4605      	mov	r5, r0
 8007980:	b118      	cbz	r0, 800798a <__swbuf_r+0x12>
 8007982:	6a03      	ldr	r3, [r0, #32]
 8007984:	b90b      	cbnz	r3, 800798a <__swbuf_r+0x12>
 8007986:	f7fe fa2d 	bl	8005de4 <__sinit>
 800798a:	69a3      	ldr	r3, [r4, #24]
 800798c:	60a3      	str	r3, [r4, #8]
 800798e:	89a3      	ldrh	r3, [r4, #12]
 8007990:	071a      	lsls	r2, r3, #28
 8007992:	d501      	bpl.n	8007998 <__swbuf_r+0x20>
 8007994:	6923      	ldr	r3, [r4, #16]
 8007996:	b943      	cbnz	r3, 80079aa <__swbuf_r+0x32>
 8007998:	4621      	mov	r1, r4
 800799a:	4628      	mov	r0, r5
 800799c:	f000 f82a 	bl	80079f4 <__swsetup_r>
 80079a0:	b118      	cbz	r0, 80079aa <__swbuf_r+0x32>
 80079a2:	f04f 37ff 	mov.w	r7, #4294967295
 80079a6:	4638      	mov	r0, r7
 80079a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079aa:	6823      	ldr	r3, [r4, #0]
 80079ac:	6922      	ldr	r2, [r4, #16]
 80079ae:	1a98      	subs	r0, r3, r2
 80079b0:	6963      	ldr	r3, [r4, #20]
 80079b2:	b2f6      	uxtb	r6, r6
 80079b4:	4283      	cmp	r3, r0
 80079b6:	4637      	mov	r7, r6
 80079b8:	dc05      	bgt.n	80079c6 <__swbuf_r+0x4e>
 80079ba:	4621      	mov	r1, r4
 80079bc:	4628      	mov	r0, r5
 80079be:	f7ff ffb3 	bl	8007928 <_fflush_r>
 80079c2:	2800      	cmp	r0, #0
 80079c4:	d1ed      	bne.n	80079a2 <__swbuf_r+0x2a>
 80079c6:	68a3      	ldr	r3, [r4, #8]
 80079c8:	3b01      	subs	r3, #1
 80079ca:	60a3      	str	r3, [r4, #8]
 80079cc:	6823      	ldr	r3, [r4, #0]
 80079ce:	1c5a      	adds	r2, r3, #1
 80079d0:	6022      	str	r2, [r4, #0]
 80079d2:	701e      	strb	r6, [r3, #0]
 80079d4:	6962      	ldr	r2, [r4, #20]
 80079d6:	1c43      	adds	r3, r0, #1
 80079d8:	429a      	cmp	r2, r3
 80079da:	d004      	beq.n	80079e6 <__swbuf_r+0x6e>
 80079dc:	89a3      	ldrh	r3, [r4, #12]
 80079de:	07db      	lsls	r3, r3, #31
 80079e0:	d5e1      	bpl.n	80079a6 <__swbuf_r+0x2e>
 80079e2:	2e0a      	cmp	r6, #10
 80079e4:	d1df      	bne.n	80079a6 <__swbuf_r+0x2e>
 80079e6:	4621      	mov	r1, r4
 80079e8:	4628      	mov	r0, r5
 80079ea:	f7ff ff9d 	bl	8007928 <_fflush_r>
 80079ee:	2800      	cmp	r0, #0
 80079f0:	d0d9      	beq.n	80079a6 <__swbuf_r+0x2e>
 80079f2:	e7d6      	b.n	80079a2 <__swbuf_r+0x2a>

080079f4 <__swsetup_r>:
 80079f4:	b538      	push	{r3, r4, r5, lr}
 80079f6:	4b29      	ldr	r3, [pc, #164]	@ (8007a9c <__swsetup_r+0xa8>)
 80079f8:	4605      	mov	r5, r0
 80079fa:	6818      	ldr	r0, [r3, #0]
 80079fc:	460c      	mov	r4, r1
 80079fe:	b118      	cbz	r0, 8007a08 <__swsetup_r+0x14>
 8007a00:	6a03      	ldr	r3, [r0, #32]
 8007a02:	b90b      	cbnz	r3, 8007a08 <__swsetup_r+0x14>
 8007a04:	f7fe f9ee 	bl	8005de4 <__sinit>
 8007a08:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a0c:	0719      	lsls	r1, r3, #28
 8007a0e:	d422      	bmi.n	8007a56 <__swsetup_r+0x62>
 8007a10:	06da      	lsls	r2, r3, #27
 8007a12:	d407      	bmi.n	8007a24 <__swsetup_r+0x30>
 8007a14:	2209      	movs	r2, #9
 8007a16:	602a      	str	r2, [r5, #0]
 8007a18:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a1c:	81a3      	strh	r3, [r4, #12]
 8007a1e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a22:	e033      	b.n	8007a8c <__swsetup_r+0x98>
 8007a24:	0758      	lsls	r0, r3, #29
 8007a26:	d512      	bpl.n	8007a4e <__swsetup_r+0x5a>
 8007a28:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007a2a:	b141      	cbz	r1, 8007a3e <__swsetup_r+0x4a>
 8007a2c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007a30:	4299      	cmp	r1, r3
 8007a32:	d002      	beq.n	8007a3a <__swsetup_r+0x46>
 8007a34:	4628      	mov	r0, r5
 8007a36:	f7ff f92f 	bl	8006c98 <_free_r>
 8007a3a:	2300      	movs	r3, #0
 8007a3c:	6363      	str	r3, [r4, #52]	@ 0x34
 8007a3e:	89a3      	ldrh	r3, [r4, #12]
 8007a40:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007a44:	81a3      	strh	r3, [r4, #12]
 8007a46:	2300      	movs	r3, #0
 8007a48:	6063      	str	r3, [r4, #4]
 8007a4a:	6923      	ldr	r3, [r4, #16]
 8007a4c:	6023      	str	r3, [r4, #0]
 8007a4e:	89a3      	ldrh	r3, [r4, #12]
 8007a50:	f043 0308 	orr.w	r3, r3, #8
 8007a54:	81a3      	strh	r3, [r4, #12]
 8007a56:	6923      	ldr	r3, [r4, #16]
 8007a58:	b94b      	cbnz	r3, 8007a6e <__swsetup_r+0x7a>
 8007a5a:	89a3      	ldrh	r3, [r4, #12]
 8007a5c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007a60:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007a64:	d003      	beq.n	8007a6e <__swsetup_r+0x7a>
 8007a66:	4621      	mov	r1, r4
 8007a68:	4628      	mov	r0, r5
 8007a6a:	f000 f8c1 	bl	8007bf0 <__smakebuf_r>
 8007a6e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a72:	f013 0201 	ands.w	r2, r3, #1
 8007a76:	d00a      	beq.n	8007a8e <__swsetup_r+0x9a>
 8007a78:	2200      	movs	r2, #0
 8007a7a:	60a2      	str	r2, [r4, #8]
 8007a7c:	6962      	ldr	r2, [r4, #20]
 8007a7e:	4252      	negs	r2, r2
 8007a80:	61a2      	str	r2, [r4, #24]
 8007a82:	6922      	ldr	r2, [r4, #16]
 8007a84:	b942      	cbnz	r2, 8007a98 <__swsetup_r+0xa4>
 8007a86:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007a8a:	d1c5      	bne.n	8007a18 <__swsetup_r+0x24>
 8007a8c:	bd38      	pop	{r3, r4, r5, pc}
 8007a8e:	0799      	lsls	r1, r3, #30
 8007a90:	bf58      	it	pl
 8007a92:	6962      	ldrpl	r2, [r4, #20]
 8007a94:	60a2      	str	r2, [r4, #8]
 8007a96:	e7f4      	b.n	8007a82 <__swsetup_r+0x8e>
 8007a98:	2000      	movs	r0, #0
 8007a9a:	e7f7      	b.n	8007a8c <__swsetup_r+0x98>
 8007a9c:	20000018 	.word	0x20000018

08007aa0 <_sbrk_r>:
 8007aa0:	b538      	push	{r3, r4, r5, lr}
 8007aa2:	4d06      	ldr	r5, [pc, #24]	@ (8007abc <_sbrk_r+0x1c>)
 8007aa4:	2300      	movs	r3, #0
 8007aa6:	4604      	mov	r4, r0
 8007aa8:	4608      	mov	r0, r1
 8007aaa:	602b      	str	r3, [r5, #0]
 8007aac:	f7f9 fcb6 	bl	800141c <_sbrk>
 8007ab0:	1c43      	adds	r3, r0, #1
 8007ab2:	d102      	bne.n	8007aba <_sbrk_r+0x1a>
 8007ab4:	682b      	ldr	r3, [r5, #0]
 8007ab6:	b103      	cbz	r3, 8007aba <_sbrk_r+0x1a>
 8007ab8:	6023      	str	r3, [r4, #0]
 8007aba:	bd38      	pop	{r3, r4, r5, pc}
 8007abc:	2000046c 	.word	0x2000046c

08007ac0 <memcpy>:
 8007ac0:	440a      	add	r2, r1
 8007ac2:	4291      	cmp	r1, r2
 8007ac4:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ac8:	d100      	bne.n	8007acc <memcpy+0xc>
 8007aca:	4770      	bx	lr
 8007acc:	b510      	push	{r4, lr}
 8007ace:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007ad2:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007ad6:	4291      	cmp	r1, r2
 8007ad8:	d1f9      	bne.n	8007ace <memcpy+0xe>
 8007ada:	bd10      	pop	{r4, pc}

08007adc <__assert_func>:
 8007adc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007ade:	4614      	mov	r4, r2
 8007ae0:	461a      	mov	r2, r3
 8007ae2:	4b09      	ldr	r3, [pc, #36]	@ (8007b08 <__assert_func+0x2c>)
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	4605      	mov	r5, r0
 8007ae8:	68d8      	ldr	r0, [r3, #12]
 8007aea:	b954      	cbnz	r4, 8007b02 <__assert_func+0x26>
 8007aec:	4b07      	ldr	r3, [pc, #28]	@ (8007b0c <__assert_func+0x30>)
 8007aee:	461c      	mov	r4, r3
 8007af0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007af4:	9100      	str	r1, [sp, #0]
 8007af6:	462b      	mov	r3, r5
 8007af8:	4905      	ldr	r1, [pc, #20]	@ (8007b10 <__assert_func+0x34>)
 8007afa:	f000 f841 	bl	8007b80 <fiprintf>
 8007afe:	f000 f8d5 	bl	8007cac <abort>
 8007b02:	4b04      	ldr	r3, [pc, #16]	@ (8007b14 <__assert_func+0x38>)
 8007b04:	e7f4      	b.n	8007af0 <__assert_func+0x14>
 8007b06:	bf00      	nop
 8007b08:	20000018 	.word	0x20000018
 8007b0c:	0800803e 	.word	0x0800803e
 8007b10:	08008010 	.word	0x08008010
 8007b14:	08008003 	.word	0x08008003

08007b18 <_calloc_r>:
 8007b18:	b570      	push	{r4, r5, r6, lr}
 8007b1a:	fba1 5402 	umull	r5, r4, r1, r2
 8007b1e:	b93c      	cbnz	r4, 8007b30 <_calloc_r+0x18>
 8007b20:	4629      	mov	r1, r5
 8007b22:	f7ff f92d 	bl	8006d80 <_malloc_r>
 8007b26:	4606      	mov	r6, r0
 8007b28:	b928      	cbnz	r0, 8007b36 <_calloc_r+0x1e>
 8007b2a:	2600      	movs	r6, #0
 8007b2c:	4630      	mov	r0, r6
 8007b2e:	bd70      	pop	{r4, r5, r6, pc}
 8007b30:	220c      	movs	r2, #12
 8007b32:	6002      	str	r2, [r0, #0]
 8007b34:	e7f9      	b.n	8007b2a <_calloc_r+0x12>
 8007b36:	462a      	mov	r2, r5
 8007b38:	4621      	mov	r1, r4
 8007b3a:	f7fe f9de 	bl	8005efa <memset>
 8007b3e:	e7f5      	b.n	8007b2c <_calloc_r+0x14>

08007b40 <__ascii_mbtowc>:
 8007b40:	b082      	sub	sp, #8
 8007b42:	b901      	cbnz	r1, 8007b46 <__ascii_mbtowc+0x6>
 8007b44:	a901      	add	r1, sp, #4
 8007b46:	b142      	cbz	r2, 8007b5a <__ascii_mbtowc+0x1a>
 8007b48:	b14b      	cbz	r3, 8007b5e <__ascii_mbtowc+0x1e>
 8007b4a:	7813      	ldrb	r3, [r2, #0]
 8007b4c:	600b      	str	r3, [r1, #0]
 8007b4e:	7812      	ldrb	r2, [r2, #0]
 8007b50:	1e10      	subs	r0, r2, #0
 8007b52:	bf18      	it	ne
 8007b54:	2001      	movne	r0, #1
 8007b56:	b002      	add	sp, #8
 8007b58:	4770      	bx	lr
 8007b5a:	4610      	mov	r0, r2
 8007b5c:	e7fb      	b.n	8007b56 <__ascii_mbtowc+0x16>
 8007b5e:	f06f 0001 	mvn.w	r0, #1
 8007b62:	e7f8      	b.n	8007b56 <__ascii_mbtowc+0x16>

08007b64 <__ascii_wctomb>:
 8007b64:	4603      	mov	r3, r0
 8007b66:	4608      	mov	r0, r1
 8007b68:	b141      	cbz	r1, 8007b7c <__ascii_wctomb+0x18>
 8007b6a:	2aff      	cmp	r2, #255	@ 0xff
 8007b6c:	d904      	bls.n	8007b78 <__ascii_wctomb+0x14>
 8007b6e:	228a      	movs	r2, #138	@ 0x8a
 8007b70:	601a      	str	r2, [r3, #0]
 8007b72:	f04f 30ff 	mov.w	r0, #4294967295
 8007b76:	4770      	bx	lr
 8007b78:	700a      	strb	r2, [r1, #0]
 8007b7a:	2001      	movs	r0, #1
 8007b7c:	4770      	bx	lr
	...

08007b80 <fiprintf>:
 8007b80:	b40e      	push	{r1, r2, r3}
 8007b82:	b503      	push	{r0, r1, lr}
 8007b84:	4601      	mov	r1, r0
 8007b86:	ab03      	add	r3, sp, #12
 8007b88:	4805      	ldr	r0, [pc, #20]	@ (8007ba0 <fiprintf+0x20>)
 8007b8a:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b8e:	6800      	ldr	r0, [r0, #0]
 8007b90:	9301      	str	r3, [sp, #4]
 8007b92:	f7ff fd2d 	bl	80075f0 <_vfiprintf_r>
 8007b96:	b002      	add	sp, #8
 8007b98:	f85d eb04 	ldr.w	lr, [sp], #4
 8007b9c:	b003      	add	sp, #12
 8007b9e:	4770      	bx	lr
 8007ba0:	20000018 	.word	0x20000018

08007ba4 <__swhatbuf_r>:
 8007ba4:	b570      	push	{r4, r5, r6, lr}
 8007ba6:	460c      	mov	r4, r1
 8007ba8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007bac:	2900      	cmp	r1, #0
 8007bae:	b096      	sub	sp, #88	@ 0x58
 8007bb0:	4615      	mov	r5, r2
 8007bb2:	461e      	mov	r6, r3
 8007bb4:	da0d      	bge.n	8007bd2 <__swhatbuf_r+0x2e>
 8007bb6:	89a3      	ldrh	r3, [r4, #12]
 8007bb8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8007bbc:	f04f 0100 	mov.w	r1, #0
 8007bc0:	bf14      	ite	ne
 8007bc2:	2340      	movne	r3, #64	@ 0x40
 8007bc4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8007bc8:	2000      	movs	r0, #0
 8007bca:	6031      	str	r1, [r6, #0]
 8007bcc:	602b      	str	r3, [r5, #0]
 8007bce:	b016      	add	sp, #88	@ 0x58
 8007bd0:	bd70      	pop	{r4, r5, r6, pc}
 8007bd2:	466a      	mov	r2, sp
 8007bd4:	f000 f848 	bl	8007c68 <_fstat_r>
 8007bd8:	2800      	cmp	r0, #0
 8007bda:	dbec      	blt.n	8007bb6 <__swhatbuf_r+0x12>
 8007bdc:	9901      	ldr	r1, [sp, #4]
 8007bde:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007be2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8007be6:	4259      	negs	r1, r3
 8007be8:	4159      	adcs	r1, r3
 8007bea:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007bee:	e7eb      	b.n	8007bc8 <__swhatbuf_r+0x24>

08007bf0 <__smakebuf_r>:
 8007bf0:	898b      	ldrh	r3, [r1, #12]
 8007bf2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007bf4:	079d      	lsls	r5, r3, #30
 8007bf6:	4606      	mov	r6, r0
 8007bf8:	460c      	mov	r4, r1
 8007bfa:	d507      	bpl.n	8007c0c <__smakebuf_r+0x1c>
 8007bfc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007c00:	6023      	str	r3, [r4, #0]
 8007c02:	6123      	str	r3, [r4, #16]
 8007c04:	2301      	movs	r3, #1
 8007c06:	6163      	str	r3, [r4, #20]
 8007c08:	b003      	add	sp, #12
 8007c0a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007c0c:	ab01      	add	r3, sp, #4
 8007c0e:	466a      	mov	r2, sp
 8007c10:	f7ff ffc8 	bl	8007ba4 <__swhatbuf_r>
 8007c14:	9f00      	ldr	r7, [sp, #0]
 8007c16:	4605      	mov	r5, r0
 8007c18:	4639      	mov	r1, r7
 8007c1a:	4630      	mov	r0, r6
 8007c1c:	f7ff f8b0 	bl	8006d80 <_malloc_r>
 8007c20:	b948      	cbnz	r0, 8007c36 <__smakebuf_r+0x46>
 8007c22:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007c26:	059a      	lsls	r2, r3, #22
 8007c28:	d4ee      	bmi.n	8007c08 <__smakebuf_r+0x18>
 8007c2a:	f023 0303 	bic.w	r3, r3, #3
 8007c2e:	f043 0302 	orr.w	r3, r3, #2
 8007c32:	81a3      	strh	r3, [r4, #12]
 8007c34:	e7e2      	b.n	8007bfc <__smakebuf_r+0xc>
 8007c36:	89a3      	ldrh	r3, [r4, #12]
 8007c38:	6020      	str	r0, [r4, #0]
 8007c3a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007c3e:	81a3      	strh	r3, [r4, #12]
 8007c40:	9b01      	ldr	r3, [sp, #4]
 8007c42:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8007c46:	b15b      	cbz	r3, 8007c60 <__smakebuf_r+0x70>
 8007c48:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007c4c:	4630      	mov	r0, r6
 8007c4e:	f000 f81d 	bl	8007c8c <_isatty_r>
 8007c52:	b128      	cbz	r0, 8007c60 <__smakebuf_r+0x70>
 8007c54:	89a3      	ldrh	r3, [r4, #12]
 8007c56:	f023 0303 	bic.w	r3, r3, #3
 8007c5a:	f043 0301 	orr.w	r3, r3, #1
 8007c5e:	81a3      	strh	r3, [r4, #12]
 8007c60:	89a3      	ldrh	r3, [r4, #12]
 8007c62:	431d      	orrs	r5, r3
 8007c64:	81a5      	strh	r5, [r4, #12]
 8007c66:	e7cf      	b.n	8007c08 <__smakebuf_r+0x18>

08007c68 <_fstat_r>:
 8007c68:	b538      	push	{r3, r4, r5, lr}
 8007c6a:	4d07      	ldr	r5, [pc, #28]	@ (8007c88 <_fstat_r+0x20>)
 8007c6c:	2300      	movs	r3, #0
 8007c6e:	4604      	mov	r4, r0
 8007c70:	4608      	mov	r0, r1
 8007c72:	4611      	mov	r1, r2
 8007c74:	602b      	str	r3, [r5, #0]
 8007c76:	f7f9 fba9 	bl	80013cc <_fstat>
 8007c7a:	1c43      	adds	r3, r0, #1
 8007c7c:	d102      	bne.n	8007c84 <_fstat_r+0x1c>
 8007c7e:	682b      	ldr	r3, [r5, #0]
 8007c80:	b103      	cbz	r3, 8007c84 <_fstat_r+0x1c>
 8007c82:	6023      	str	r3, [r4, #0]
 8007c84:	bd38      	pop	{r3, r4, r5, pc}
 8007c86:	bf00      	nop
 8007c88:	2000046c 	.word	0x2000046c

08007c8c <_isatty_r>:
 8007c8c:	b538      	push	{r3, r4, r5, lr}
 8007c8e:	4d06      	ldr	r5, [pc, #24]	@ (8007ca8 <_isatty_r+0x1c>)
 8007c90:	2300      	movs	r3, #0
 8007c92:	4604      	mov	r4, r0
 8007c94:	4608      	mov	r0, r1
 8007c96:	602b      	str	r3, [r5, #0]
 8007c98:	f7f9 fba8 	bl	80013ec <_isatty>
 8007c9c:	1c43      	adds	r3, r0, #1
 8007c9e:	d102      	bne.n	8007ca6 <_isatty_r+0x1a>
 8007ca0:	682b      	ldr	r3, [r5, #0]
 8007ca2:	b103      	cbz	r3, 8007ca6 <_isatty_r+0x1a>
 8007ca4:	6023      	str	r3, [r4, #0]
 8007ca6:	bd38      	pop	{r3, r4, r5, pc}
 8007ca8:	2000046c 	.word	0x2000046c

08007cac <abort>:
 8007cac:	b508      	push	{r3, lr}
 8007cae:	2006      	movs	r0, #6
 8007cb0:	f000 f82c 	bl	8007d0c <raise>
 8007cb4:	2001      	movs	r0, #1
 8007cb6:	f7f9 fb39 	bl	800132c <_exit>

08007cba <_raise_r>:
 8007cba:	291f      	cmp	r1, #31
 8007cbc:	b538      	push	{r3, r4, r5, lr}
 8007cbe:	4605      	mov	r5, r0
 8007cc0:	460c      	mov	r4, r1
 8007cc2:	d904      	bls.n	8007cce <_raise_r+0x14>
 8007cc4:	2316      	movs	r3, #22
 8007cc6:	6003      	str	r3, [r0, #0]
 8007cc8:	f04f 30ff 	mov.w	r0, #4294967295
 8007ccc:	bd38      	pop	{r3, r4, r5, pc}
 8007cce:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8007cd0:	b112      	cbz	r2, 8007cd8 <_raise_r+0x1e>
 8007cd2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cd6:	b94b      	cbnz	r3, 8007cec <_raise_r+0x32>
 8007cd8:	4628      	mov	r0, r5
 8007cda:	f000 f831 	bl	8007d40 <_getpid_r>
 8007cde:	4622      	mov	r2, r4
 8007ce0:	4601      	mov	r1, r0
 8007ce2:	4628      	mov	r0, r5
 8007ce4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007ce8:	f000 b818 	b.w	8007d1c <_kill_r>
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	d00a      	beq.n	8007d06 <_raise_r+0x4c>
 8007cf0:	1c59      	adds	r1, r3, #1
 8007cf2:	d103      	bne.n	8007cfc <_raise_r+0x42>
 8007cf4:	2316      	movs	r3, #22
 8007cf6:	6003      	str	r3, [r0, #0]
 8007cf8:	2001      	movs	r0, #1
 8007cfa:	e7e7      	b.n	8007ccc <_raise_r+0x12>
 8007cfc:	2100      	movs	r1, #0
 8007cfe:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8007d02:	4620      	mov	r0, r4
 8007d04:	4798      	blx	r3
 8007d06:	2000      	movs	r0, #0
 8007d08:	e7e0      	b.n	8007ccc <_raise_r+0x12>
	...

08007d0c <raise>:
 8007d0c:	4b02      	ldr	r3, [pc, #8]	@ (8007d18 <raise+0xc>)
 8007d0e:	4601      	mov	r1, r0
 8007d10:	6818      	ldr	r0, [r3, #0]
 8007d12:	f7ff bfd2 	b.w	8007cba <_raise_r>
 8007d16:	bf00      	nop
 8007d18:	20000018 	.word	0x20000018

08007d1c <_kill_r>:
 8007d1c:	b538      	push	{r3, r4, r5, lr}
 8007d1e:	4d07      	ldr	r5, [pc, #28]	@ (8007d3c <_kill_r+0x20>)
 8007d20:	2300      	movs	r3, #0
 8007d22:	4604      	mov	r4, r0
 8007d24:	4608      	mov	r0, r1
 8007d26:	4611      	mov	r1, r2
 8007d28:	602b      	str	r3, [r5, #0]
 8007d2a:	f7f9 faef 	bl	800130c <_kill>
 8007d2e:	1c43      	adds	r3, r0, #1
 8007d30:	d102      	bne.n	8007d38 <_kill_r+0x1c>
 8007d32:	682b      	ldr	r3, [r5, #0]
 8007d34:	b103      	cbz	r3, 8007d38 <_kill_r+0x1c>
 8007d36:	6023      	str	r3, [r4, #0]
 8007d38:	bd38      	pop	{r3, r4, r5, pc}
 8007d3a:	bf00      	nop
 8007d3c:	2000046c 	.word	0x2000046c

08007d40 <_getpid_r>:
 8007d40:	f7f9 badc 	b.w	80012fc <_getpid>

08007d44 <_init>:
 8007d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d46:	bf00      	nop
 8007d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4a:	bc08      	pop	{r3}
 8007d4c:	469e      	mov	lr, r3
 8007d4e:	4770      	bx	lr

08007d50 <_fini>:
 8007d50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d52:	bf00      	nop
 8007d54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d56:	bc08      	pop	{r3}
 8007d58:	469e      	mov	lr, r3
 8007d5a:	4770      	bx	lr
